// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/warehouse/warehouse.proto

package go_micro_srv_warehouse

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Warehouse service

func NewWarehouseEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Warehouse service

type WarehouseService interface {
	Create(ctx context.Context, in *WarehouseReq, opts ...client.CallOption) (*WarehouseResp, error)
	// 修改仓库信息
	Update(ctx context.Context, in *WarehouseReq, opts ...client.CallOption) (*WarehouseResp, error)
	DeleteByID(ctx context.Context, in *IdReq, opts ...client.CallOption) (*DeleteResp, error)
	GetByID(ctx context.Context, in *IdReq, opts ...client.CallOption) (*WarehouseResp, error)
	//根据分页，条件查询等返回列表
	GetQuery(ctx context.Context, in *Query, opts ...client.CallOption) (*WarehousesResp, error)
	SetOperation(ctx context.Context, in *WarehouseReq, opts ...client.CallOption) (*WarehouseResp, error)
}

type warehouseService struct {
	c    client.Client
	name string
}

func NewWarehouseService(name string, c client.Client) WarehouseService {
	return &warehouseService{
		c:    c,
		name: name,
	}
}

func (c *warehouseService) Create(ctx context.Context, in *WarehouseReq, opts ...client.CallOption) (*WarehouseResp, error) {
	req := c.c.NewRequest(c.name, "Warehouse.Create", in)
	out := new(WarehouseResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseService) Update(ctx context.Context, in *WarehouseReq, opts ...client.CallOption) (*WarehouseResp, error) {
	req := c.c.NewRequest(c.name, "Warehouse.Update", in)
	out := new(WarehouseResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseService) DeleteByID(ctx context.Context, in *IdReq, opts ...client.CallOption) (*DeleteResp, error) {
	req := c.c.NewRequest(c.name, "Warehouse.DeleteByID", in)
	out := new(DeleteResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseService) GetByID(ctx context.Context, in *IdReq, opts ...client.CallOption) (*WarehouseResp, error) {
	req := c.c.NewRequest(c.name, "Warehouse.GetByID", in)
	out := new(WarehouseResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseService) GetQuery(ctx context.Context, in *Query, opts ...client.CallOption) (*WarehousesResp, error) {
	req := c.c.NewRequest(c.name, "Warehouse.GetQuery", in)
	out := new(WarehousesResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseService) SetOperation(ctx context.Context, in *WarehouseReq, opts ...client.CallOption) (*WarehouseResp, error) {
	req := c.c.NewRequest(c.name, "Warehouse.SetOperation", in)
	out := new(WarehouseResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Warehouse service

type WarehouseHandler interface {
	Create(context.Context, *WarehouseReq, *WarehouseResp) error
	// 修改仓库信息
	Update(context.Context, *WarehouseReq, *WarehouseResp) error
	DeleteByID(context.Context, *IdReq, *DeleteResp) error
	GetByID(context.Context, *IdReq, *WarehouseResp) error
	//根据分页，条件查询等返回列表
	GetQuery(context.Context, *Query, *WarehousesResp) error
	SetOperation(context.Context, *WarehouseReq, *WarehouseResp) error
}

func RegisterWarehouseHandler(s server.Server, hdlr WarehouseHandler, opts ...server.HandlerOption) error {
	type warehouse interface {
		Create(ctx context.Context, in *WarehouseReq, out *WarehouseResp) error
		Update(ctx context.Context, in *WarehouseReq, out *WarehouseResp) error
		DeleteByID(ctx context.Context, in *IdReq, out *DeleteResp) error
		GetByID(ctx context.Context, in *IdReq, out *WarehouseResp) error
		GetQuery(ctx context.Context, in *Query, out *WarehousesResp) error
		SetOperation(ctx context.Context, in *WarehouseReq, out *WarehouseResp) error
	}
	type Warehouse struct {
		warehouse
	}
	h := &warehouseHandler{hdlr}
	return s.Handle(s.NewHandler(&Warehouse{h}, opts...))
}

type warehouseHandler struct {
	WarehouseHandler
}

func (h *warehouseHandler) Create(ctx context.Context, in *WarehouseReq, out *WarehouseResp) error {
	return h.WarehouseHandler.Create(ctx, in, out)
}

func (h *warehouseHandler) Update(ctx context.Context, in *WarehouseReq, out *WarehouseResp) error {
	return h.WarehouseHandler.Update(ctx, in, out)
}

func (h *warehouseHandler) DeleteByID(ctx context.Context, in *IdReq, out *DeleteResp) error {
	return h.WarehouseHandler.DeleteByID(ctx, in, out)
}

func (h *warehouseHandler) GetByID(ctx context.Context, in *IdReq, out *WarehouseResp) error {
	return h.WarehouseHandler.GetByID(ctx, in, out)
}

func (h *warehouseHandler) GetQuery(ctx context.Context, in *Query, out *WarehousesResp) error {
	return h.WarehouseHandler.GetQuery(ctx, in, out)
}

func (h *warehouseHandler) SetOperation(ctx context.Context, in *WarehouseReq, out *WarehouseResp) error {
	return h.WarehouseHandler.SetOperation(ctx, in, out)
}
