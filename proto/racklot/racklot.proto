syntax = "proto3";

package go.micro.srv.racklot;

import "google/protobuf/wrappers.proto";

service RacklotService {
  // 添加货位类型
  rpc AddRacklotType(RacklotType) returns (AddResp);
  // 修改货位类型
  rpc UpdateRacklotType(RacklotType) returns (UpdateResp);
  // 删除货GetBindedRack位类型
  rpc DeleteRacklotType(RacklotType) returns (DeleteResp);
  // 获取货位类型
  rpc GetRacklotTypes(RacklotTypeQuery) returns (RacklotTypes);
    // 获取货位类型
    rpc GetOneRacklotType(RacklotIDReq) returns (RacklotType);
  // 添加货位
  rpc AddRacklot(Racklot) returns (AddResp);
  // 批量导入货位
  rpc BatchAddRacklots(Racklots) returns (Response);
  // 删除货位
  rpc DeleteRacklot(RacklotIDReq) returns (DeleteResp);
  // 批量删除货位
  rpc BatchDeleteRacklots(DeleteRacklotsReq) returns (Response);
  // 更新货位基础信息
  rpc UpdateRacklot(UpdateRacklotReq) returns (UpdateResp);
    // 批量修改货位
    rpc BatchUpdateRacklots(UpdateRacklotsReq) returns (Response);
  // 根据查询条件获取货位
  rpc GetRacklots(RacklotQuery) returns (Racklots);
  // 根据ID获取货位信息
  rpc GetOneRacklot(RacklotIDReq) returns (Racklot);
  // 设置重列组
  rpc SetMultipleGroup(MultipleGroup) returns (Response);
  // 设置货位组
  rpc SetRacklotGroup(RacklotGroup) returns (Response);
  // 为货位绑定/解绑货架
  rpc BindRack(RackIDReq) returns (Response);
  rpc UnbindRack(RackIDReq) returns (Response);
  // 禁用/启用货位
  rpc DisableRacklots(RacklotIDsReq) returns (Response);
  rpc EnableRacklots(RacklotIDsReq) returns (Response);
  //站台分组
  rpc AddRacklotsGroup(RacklotGroupsReq) returns (Response);
  rpc RemoveRacklotsGroup(RacklotGroupsReq) returns (Response);
  //占用/释放货位
  rpc OccupyRacklot(RacklotIDReq) returns (Response);
  rpc ReleaseRacklot(RacklotIDReq) returns (Response);
  // 判断货位是否存在
  rpc IsExist(RacklotIDReq) returns (Response);
  // 判断货位是否有效
  rpc IsAvailable(RacklotIDReq) returns (Response);
  // 获取货位关联的货架
  rpc GetBindedRack(RacklotIDReq) returns (IDReq);
    // 设置是否允许存车
    rpc Inbound(FlagReq) returns (Response);
    // 设置是否允许取车
    rpc Outbound(FlagReq) returns (Response);
      //增加属性
  rpc SetProperties(PropertiesReq) returns(Response);
      // 设置类型
  rpc SetRacklotType(TypeReq) returns (Response);
}

message IDReq {
  int32 id = 1;
}

// RacklotType 货位类型
message RacklotType {
  int32 id = 1;
  string name = 2;
  string description = 3;
  int32 Length  = 4 ;
	int32 Width  = 5;
}

message UpdateRacklotType {
    google.protobuf.Int32Value id = 1;
    google.protobuf.StringValue name = 2;
    google.protobuf.StringValue description = 3;
    google.protobuf.Int32Value Length  = 4 ;
    google.protobuf.Int32Value Width  = 5;
  }

message UpdateRacklotTypeReq {
    int32 id = 1;
    UpdateRacklotType update = 2;
}

message RacklotTypes {
  repeated RacklotType racklotTypes = 1;
  uint32 totals = 4;
  uint32 totalpages = 2;
  uint32 currpages = 3;
}

// MultipleGroup 货位重列组
message MultipleGroup {
  int32 racklotID = 1;
  int32 group = 2;
  int32 item = 3;
}

// RacklotGroup 货位组
message RacklotGroup {
  int32 racklotID = 1;
  int32 group = 2;
}

// RacklotGroup 货位组
message RacklotsGroup {
  repeated int32 racklotIDs = 1;
  int32 group = 2;
}

// Racklot 货位
message Racklot {
  int32 id = 1;
  RacklotType type = 2;
  int32 x = 3;
  int32 y = 4;
  float angle = 5;
  int32 length = 6;
  int32 width = 7;
  // 站台重列分组信息
  MultipleGroup multiGroup = 8;
  // 站台分组的ID
  int32 groupID = 9;
  string description = 10;
  // 站台是否有效，被禁用则无效，启用则有效，默认为有效
  bool valid = 11;
  // 关联的货架ID，在货位上没有放置货架时为空
  int32 rackID = 12;
  //是否被占用
  bool occupied = 13;

  int32 areaID = 14;

  int32 stationID = 15;
}

message UpdateRacklotReq {
    int32 id = 1;
    UpdateRacklot racklot = 2;
}

message UpdateRacklot {

      // 区域ID
  google.protobuf.Int32Value id = 20;
  // 
  google.protobuf.Int32Value x = 1;
  google.protobuf.Int32Value y = 2;
  google.protobuf.FloatValue angle = 3;
  google.protobuf.Int32Value length = 4;
  google.protobuf.Int32Value width = 5;
  // 
  google.protobuf.Int32Value racklotType = 24;
  google.protobuf.Int32Value stationID = 25;
  //是否有效
  google.protobuf.BoolValue valid = 27;
  google.protobuf.StringValue description = 30;

 repeated Property props = 31;

}

message UpdateRacklotsReq {
    repeated int32 ids = 1;
    int32 racklotType = 2;
  }

  message DeleteRacklotsReq {
    repeated int32 ids = 1;
    repeated int32 stationIDs = 2;
  }

// message RacklotsReq {
// 	repeated Racklot racklots = 1;
// }

message Response {}

message AddResp {}

message RacklotIDReq { uint32 id = 1; }

message DeleteResp {}

message UpdateResp {}

message Racklots { 
  repeated Racklot racklots = 1;
  uint32 totals = 4;
  uint32 totalpages = 2;
  uint32 currpages = 3;
}

message RackIDReq {
  int32 id = 1;
  int32 rackID = 2;
}

message RackIDsReq {
  repeated RackIDReq rackID = 1;
}

message RacklotIDsReq { repeated uint32 ids = 1; }

message RacklotGroupsReq {
  int32 groupID = 1;
  repeated int32 racklotIDs = 2;
}

message Parameter {
    string key = 1;
    string value = 2;
}

message RacklotQuery {
    uint32 limit = 1;
    uint32 offset = 2;
    uint32 page = 3;
    uint32 perPage = 4;
    RacklotFilter filter = 7;
  }
  
  message RacklotTypeQuery {
    uint32 limit = 1;
    uint32 offset = 2;
    uint32 page = 3;
    uint32 perPage = 4;
    RacklotTypeFilter filter = 7;
  }

//   id_in:[Int!]
//   rackID:Int
//   isValid:Boolean
//   isOccupied:Boolean
//   stationID:Int
//   multipleGroup:MultipleGroupFilter
//   type:RacklotTypeFilter
//   propertiesFilter:PropertiesFilter
//   isFetch:Boolean
//   isDeliv:Boolean
message MultipleGroupFilter {
    google.protobuf.Int32Value group = 1;
    google.protobuf.Int32Value item =2;
}

  message RacklotFilter {
    repeated RacklotFilter and = 1;
    repeated RacklotFilter or = 2;
    repeated int32 idIn = 3;                                 
    google.protobuf.Int32Value stationID = 4;                          
    google.protobuf.Int32Value rackID = 5;          
    google.protobuf.BoolValue isDeliv = 6;             
      google.protobuf.BoolValue isFetch = 7;             
    google.protobuf.BoolValue isValid = 8;     
    google.protobuf.BoolValue isOccupied = 9; 
    RacklotTypeFilter typeFilter  = 11;
    PropertiesFilter  propertiesFilter = 12;     
    MultipleGroupFilter groupFilter  = 13;
  }
  
  message RacklotTypeFilter {
    repeated RacklotTypeFilter and = 1;
    repeated RacklotTypeFilter or = 2;
    repeated int32 idIn = 3;
    repeated string nameIn = 4;
    google.protobuf.Int32Value id = 5;  
    google.protobuf.StringValue name = 6;  
  }

  message PropertiesFilter {
    string key  = 1;
    string value = 2; 
  }

  message Property{
    string key = 1;
    string value = 2;
}

message FlagReq {
    int32 id = 1;
    bool flag = 2;
  }

  message PropertiesReq {
    int32 id = 1;
    repeated Property properties = 2;
  }

  message TypeReq {
    int32 id = 1;
    int32 type = 2;
    string name = 3;
  }