// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: proto/racklot/racklot.proto

package go_micro_srv_racklot

import (
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type IDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IDReq) Reset() {
	*x = IDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racklot_racklot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDReq) ProtoMessage() {}

func (x *IDReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racklot_racklot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDReq.ProtoReflect.Descriptor instead.
func (*IDReq) Descriptor() ([]byte, []int) {
	return file_proto_racklot_racklot_proto_rawDescGZIP(), []int{0}
}

func (x *IDReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RacklotReportReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RacklotReportReq) Reset() {
	*x = RacklotReportReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racklot_racklot_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RacklotReportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RacklotReportReq) ProtoMessage() {}

func (x *RacklotReportReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racklot_racklot_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RacklotReportReq.ProtoReflect.Descriptor instead.
func (*RacklotReportReq) Descriptor() ([]byte, []int) {
	return file_proto_racklot_racklot_proto_rawDescGZIP(), []int{1}
}

type RacklotReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total        uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	RackTotal    uint32 `protobuf:"varint,2,opt,name=rackTotal,proto3" json:"rackTotal,omitempty"`
	NoRackTotal  uint32 `protobuf:"varint,3,opt,name=noRackTotal,proto3" json:"noRackTotal,omitempty"`
	ValidTotal   uint32 `protobuf:"varint,4,opt,name=validTotal,proto3" json:"validTotal,omitempty"`
	InvalidTotal uint32 `protobuf:"varint,5,opt,name=invalidTotal,proto3" json:"invalidTotal,omitempty"`
}

func (x *RacklotReport) Reset() {
	*x = RacklotReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racklot_racklot_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RacklotReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RacklotReport) ProtoMessage() {}

func (x *RacklotReport) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racklot_racklot_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RacklotReport.ProtoReflect.Descriptor instead.
func (*RacklotReport) Descriptor() ([]byte, []int) {
	return file_proto_racklot_racklot_proto_rawDescGZIP(), []int{2}
}

func (x *RacklotReport) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RacklotReport) GetRackTotal() uint32 {
	if x != nil {
		return x.RackTotal
	}
	return 0
}

func (x *RacklotReport) GetNoRackTotal() uint32 {
	if x != nil {
		return x.NoRackTotal
	}
	return 0
}

func (x *RacklotReport) GetValidTotal() uint32 {
	if x != nil {
		return x.ValidTotal
	}
	return 0
}

func (x *RacklotReport) GetInvalidTotal() uint32 {
	if x != nil {
		return x.InvalidTotal
	}
	return 0
}

// RacklotType 货位类型
type RacklotType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Length      uint32 `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`
	Width       uint32 `protobuf:"varint,5,opt,name=width,proto3" json:"width,omitempty"`
	Properties  string `protobuf:"bytes,6,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *RacklotType) Reset() {
	*x = RacklotType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racklot_racklot_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RacklotType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RacklotType) ProtoMessage() {}

func (x *RacklotType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racklot_racklot_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RacklotType.ProtoReflect.Descriptor instead.
func (*RacklotType) Descriptor() ([]byte, []int) {
	return file_proto_racklot_racklot_proto_rawDescGZIP(), []int{3}
}

func (x *RacklotType) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RacklotType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RacklotType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RacklotType) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *RacklotType) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *RacklotType) GetProperties() string {
	if x != nil {
		return x.Properties
	}
	return ""
}

type UpdateRacklotType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *wrappers.UInt32Value `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        *wrappers.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description *wrappers.StringValue `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Length      *wrappers.UInt32Value `protobuf:"bytes,4,opt,name=length,proto3" json:"length,omitempty"`
	Width       *wrappers.UInt32Value `protobuf:"bytes,5,opt,name=width,proto3" json:"width,omitempty"`
	Properties  string                `protobuf:"bytes,6,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *UpdateRacklotType) Reset() {
	*x = UpdateRacklotType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racklot_racklot_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRacklotType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRacklotType) ProtoMessage() {}

func (x *UpdateRacklotType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racklot_racklot_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRacklotType.ProtoReflect.Descriptor instead.
func (*UpdateRacklotType) Descriptor() ([]byte, []int) {
	return file_proto_racklot_racklot_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateRacklotType) GetId() *wrappers.UInt32Value {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UpdateRacklotType) GetName() *wrappers.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *UpdateRacklotType) GetDescription() *wrappers.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *UpdateRacklotType) GetLength() *wrappers.UInt32Value {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *UpdateRacklotType) GetWidth() *wrappers.UInt32Value {
	if x != nil {
		return x.Width
	}
	return nil
}

func (x *UpdateRacklotType) GetProperties() string {
	if x != nil {
		return x.Properties
	}
	return ""
}

type UpdateRacklotTypeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Update *UpdateRacklotType `protobuf:"bytes,2,opt,name=update,proto3" json:"update,omitempty"`
}

func (x *UpdateRacklotTypeReq) Reset() {
	*x = UpdateRacklotTypeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racklot_racklot_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRacklotTypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRacklotTypeReq) ProtoMessage() {}

func (x *UpdateRacklotTypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racklot_racklot_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRacklotTypeReq.ProtoReflect.Descriptor instead.
func (*UpdateRacklotTypeReq) Descriptor() ([]byte, []int) {
	return file_proto_racklot_racklot_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateRacklotTypeReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateRacklotTypeReq) GetUpdate() *UpdateRacklotType {
	if x != nil {
		return x.Update
	}
	return nil
}

type RacklotTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RacklotTypes []*RacklotType `protobuf:"bytes,1,rep,name=racklotTypes,proto3" json:"racklotTypes,omitempty"`
	Totals       uint32         `protobuf:"varint,4,opt,name=totals,proto3" json:"totals,omitempty"`
	Totalpages   uint32         `protobuf:"varint,2,opt,name=totalpages,proto3" json:"totalpages,omitempty"`
	Currpages    uint32         `protobuf:"varint,3,opt,name=currpages,proto3" json:"currpages,omitempty"`
}

func (x *RacklotTypes) Reset() {
	*x = RacklotTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racklot_racklot_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RacklotTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RacklotTypes) ProtoMessage() {}

func (x *RacklotTypes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racklot_racklot_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RacklotTypes.ProtoReflect.Descriptor instead.
func (*RacklotTypes) Descriptor() ([]byte, []int) {
	return file_proto_racklot_racklot_proto_rawDescGZIP(), []int{6}
}

func (x *RacklotTypes) GetRacklotTypes() []*RacklotType {
	if x != nil {
		return x.RacklotTypes
	}
	return nil
}

func (x *RacklotTypes) GetTotals() uint32 {
	if x != nil {
		return x.Totals
	}
	return 0
}

func (x *RacklotTypes) GetTotalpages() uint32 {
	if x != nil {
		return x.Totalpages
	}
	return 0
}

func (x *RacklotTypes) GetCurrpages() uint32 {
	if x != nil {
		return x.Currpages
	}
	return 0
}

// MultipleGroup 货位重列组
type MultipleGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RacklotID uint32 `protobuf:"varint,1,opt,name=racklotID,proto3" json:"racklotID,omitempty"`
	Group     uint32 `protobuf:"varint,2,opt,name=group,proto3" json:"group,omitempty"`
	Item      uint32 `protobuf:"varint,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *MultipleGroup) Reset() {
	*x = MultipleGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racklot_racklot_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipleGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipleGroup) ProtoMessage() {}

func (x *MultipleGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racklot_racklot_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipleGroup.ProtoReflect.Descriptor instead.
func (*MultipleGroup) Descriptor() ([]byte, []int) {
	return file_proto_racklot_racklot_proto_rawDescGZIP(), []int{7}
}

func (x *MultipleGroup) GetRacklotID() uint32 {
	if x != nil {
		return x.RacklotID
	}
	return 0
}

func (x *MultipleGroup) GetGroup() uint32 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *MultipleGroup) GetItem() uint32 {
	if x != nil {
		return x.Item
	}
	return 0
}

// Racklot 货位
type Racklot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type   *RacklotType `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	X      uint32       `protobuf:"varint,3,opt,name=x,proto3" json:"x,omitempty"`
	Y      uint32       `protobuf:"varint,4,opt,name=y,proto3" json:"y,omitempty"`
	Angle  float32      `protobuf:"fixed32,5,opt,name=angle,proto3" json:"angle,omitempty"`
	Length uint32       `protobuf:"varint,6,opt,name=length,proto3" json:"length,omitempty"`
	Width  uint32       `protobuf:"varint,7,opt,name=width,proto3" json:"width,omitempty"`
	// 站台重列分组信息
	MultipleGroups []*MultipleGroup `protobuf:"bytes,8,rep,name=multipleGroups,proto3" json:"multipleGroups,omitempty"`
	Description    string           `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	// 站台是否有效，被禁用则无效，启用则有效，默认为有效
	IsValid bool `protobuf:"varint,11,opt,name=isValid,proto3" json:"isValid,omitempty"`
	// 关联的货架ID，在货位上没有放置货架时为空
	RackID uint32 `protobuf:"varint,12,opt,name=rackID,proto3" json:"rackID,omitempty"`
	//是否被占用
	IsOccupied bool     `protobuf:"varint,13,opt,name=isOccupied,proto3" json:"isOccupied,omitempty"`
	StationID  uint32   `protobuf:"varint,15,opt,name=stationID,proto3" json:"stationID,omitempty"`
	IsInbound  bool     `protobuf:"varint,16,opt,name=isInbound,proto3" json:"isInbound,omitempty"`
	IsOutbound bool     `protobuf:"varint,17,opt,name=isOutbound,proto3" json:"isOutbound,omitempty"`
	AreaIDs    []uint32 `protobuf:"varint,18,rep,packed,name=areaIDs,proto3" json:"areaIDs,omitempty"`
	Properties string   `protobuf:"bytes,19,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *Racklot) Reset() {
	*x = Racklot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racklot_racklot_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Racklot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Racklot) ProtoMessage() {}

func (x *Racklot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racklot_racklot_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Racklot.ProtoReflect.Descriptor instead.
func (*Racklot) Descriptor() ([]byte, []int) {
	return file_proto_racklot_racklot_proto_rawDescGZIP(), []int{8}
}

func (x *Racklot) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Racklot) GetType() *RacklotType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Racklot) GetX() uint32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Racklot) GetY() uint32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Racklot) GetAngle() float32 {
	if x != nil {
		return x.Angle
	}
	return 0
}

func (x *Racklot) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Racklot) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Racklot) GetMultipleGroups() []*MultipleGroup {
	if x != nil {
		return x.MultipleGroups
	}
	return nil
}

func (x *Racklot) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Racklot) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *Racklot) GetRackID() uint32 {
	if x != nil {
		return x.RackID
	}
	return 0
}

func (x *Racklot) GetIsOccupied() bool {
	if x != nil {
		return x.IsOccupied
	}
	return false
}

func (x *Racklot) GetStationID() uint32 {
	if x != nil {
		return x.StationID
	}
	return 0
}

func (x *Racklot) GetIsInbound() bool {
	if x != nil {
		return x.IsInbound
	}
	return false
}

func (x *Racklot) GetIsOutbound() bool {
	if x != nil {
		return x.IsOutbound
	}
	return false
}

func (x *Racklot) GetAreaIDs() []uint32 {
	if x != nil {
		return x.AreaIDs
	}
	return nil
}

func (x *Racklot) GetProperties() string {
	if x != nil {
		return x.Properties
	}
	return ""
}

type UpdateRacklotReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Racklot *UpdateRacklot `protobuf:"bytes,2,opt,name=racklot,proto3" json:"racklot,omitempty"`
}

func (x *UpdateRacklotReq) Reset() {
	*x = UpdateRacklotReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racklot_racklot_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRacklotReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRacklotReq) ProtoMessage() {}

func (x *UpdateRacklotReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racklot_racklot_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRacklotReq.ProtoReflect.Descriptor instead.
func (*UpdateRacklotReq) Descriptor() ([]byte, []int) {
	return file_proto_racklot_racklot_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateRacklotReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateRacklotReq) GetRacklot() *UpdateRacklot {
	if x != nil {
		return x.Racklot
	}
	return nil
}

type UpdateRacklot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *wrappers.UInt32Value `protobuf:"bytes,20,opt,name=id,proto3" json:"id,omitempty"`
	X              *wrappers.UInt32Value `protobuf:"bytes,1,opt,name=x,proto3" json:"x,omitempty"`
	Y              *wrappers.UInt32Value `protobuf:"bytes,2,opt,name=y,proto3" json:"y,omitempty"`
	Angle          *wrappers.FloatValue  `protobuf:"bytes,3,opt,name=angle,proto3" json:"angle,omitempty"`
	Length         *wrappers.UInt32Value `protobuf:"bytes,4,opt,name=length,proto3" json:"length,omitempty"`
	Width          *wrappers.UInt32Value `protobuf:"bytes,5,opt,name=width,proto3" json:"width,omitempty"`
	MultipleGroups []*MultipleGroup      `protobuf:"bytes,7,rep,name=multipleGroups,proto3" json:"multipleGroups,omitempty"`
	RacklotType    *wrappers.UInt32Value `protobuf:"bytes,24,opt,name=racklotType,proto3" json:"racklotType,omitempty"`
	StationID      *wrappers.UInt32Value `protobuf:"bytes,25,opt,name=stationID,proto3" json:"stationID,omitempty"`
	RackID         *wrappers.UInt32Value `protobuf:"bytes,26,opt,name=rackID,proto3" json:"rackID,omitempty"`
	//是否有效
	IsValid     *wrappers.BoolValue   `protobuf:"bytes,27,opt,name=isValid,proto3" json:"isValid,omitempty"`
	IsInbound   *wrappers.BoolValue   `protobuf:"bytes,28,opt,name=isInbound,proto3" json:"isInbound,omitempty"`
	IsOutbound  *wrappers.BoolValue   `protobuf:"bytes,29,opt,name=isOutbound,proto3" json:"isOutbound,omitempty"`
	IsOccupied  *wrappers.BoolValue   `protobuf:"bytes,31,opt,name=isOccupied,proto3" json:"isOccupied,omitempty"`
	Description *wrappers.StringValue `protobuf:"bytes,30,opt,name=description,proto3" json:"description,omitempty"`
	Properties  string                `protobuf:"bytes,6,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *UpdateRacklot) Reset() {
	*x = UpdateRacklot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racklot_racklot_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRacklot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRacklot) ProtoMessage() {}

func (x *UpdateRacklot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racklot_racklot_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRacklot.ProtoReflect.Descriptor instead.
func (*UpdateRacklot) Descriptor() ([]byte, []int) {
	return file_proto_racklot_racklot_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateRacklot) GetId() *wrappers.UInt32Value {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UpdateRacklot) GetX() *wrappers.UInt32Value {
	if x != nil {
		return x.X
	}
	return nil
}

func (x *UpdateRacklot) GetY() *wrappers.UInt32Value {
	if x != nil {
		return x.Y
	}
	return nil
}

func (x *UpdateRacklot) GetAngle() *wrappers.FloatValue {
	if x != nil {
		return x.Angle
	}
	return nil
}

func (x *UpdateRacklot) GetLength() *wrappers.UInt32Value {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *UpdateRacklot) GetWidth() *wrappers.UInt32Value {
	if x != nil {
		return x.Width
	}
	return nil
}

func (x *UpdateRacklot) GetMultipleGroups() []*MultipleGroup {
	if x != nil {
		return x.MultipleGroups
	}
	return nil
}

func (x *UpdateRacklot) GetRacklotType() *wrappers.UInt32Value {
	if x != nil {
		return x.RacklotType
	}
	return nil
}

func (x *UpdateRacklot) GetStationID() *wrappers.UInt32Value {
	if x != nil {
		return x.StationID
	}
	return nil
}

func (x *UpdateRacklot) GetRackID() *wrappers.UInt32Value {
	if x != nil {
		return x.RackID
	}
	return nil
}

func (x *UpdateRacklot) GetIsValid() *wrappers.BoolValue {
	if x != nil {
		return x.IsValid
	}
	return nil
}

func (x *UpdateRacklot) GetIsInbound() *wrappers.BoolValue {
	if x != nil {
		return x.IsInbound
	}
	return nil
}

func (x *UpdateRacklot) GetIsOutbound() *wrappers.BoolValue {
	if x != nil {
		return x.IsOutbound
	}
	return nil
}

func (x *UpdateRacklot) GetIsOccupied() *wrappers.BoolValue {
	if x != nil {
		return x.IsOccupied
	}
	return nil
}

func (x *UpdateRacklot) GetDescription() *wrappers.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *UpdateRacklot) GetProperties() string {
	if x != nil {
		return x.Properties
	}
	return ""
}

type UpdateRacklotsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids    []uint32       `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Update *UpdateRacklot `protobuf:"bytes,2,opt,name=update,proto3" json:"update,omitempty"`
}

func (x *UpdateRacklotsReq) Reset() {
	*x = UpdateRacklotsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racklot_racklot_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRacklotsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRacklotsReq) ProtoMessage() {}

func (x *UpdateRacklotsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racklot_racklot_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRacklotsReq.ProtoReflect.Descriptor instead.
func (*UpdateRacklotsReq) Descriptor() ([]byte, []int) {
	return file_proto_racklot_racklot_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateRacklotsReq) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdateRacklotsReq) GetUpdate() *UpdateRacklot {
	if x != nil {
		return x.Update
	}
	return nil
}

type DeleteRacklotsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids        []uint32 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	StationIDs []uint32 `protobuf:"varint,2,rep,packed,name=stationIDs,proto3" json:"stationIDs,omitempty"`
}

func (x *DeleteRacklotsReq) Reset() {
	*x = DeleteRacklotsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racklot_racklot_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRacklotsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRacklotsReq) ProtoMessage() {}

func (x *DeleteRacklotsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racklot_racklot_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRacklotsReq.ProtoReflect.Descriptor instead.
func (*DeleteRacklotsReq) Descriptor() ([]byte, []int) {
	return file_proto_racklot_racklot_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteRacklotsReq) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DeleteRacklotsReq) GetStationIDs() []uint32 {
	if x != nil {
		return x.StationIDs
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racklot_racklot_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racklot_racklot_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_proto_racklot_racklot_proto_rawDescGZIP(), []int{13}
}

type AddResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddResp) Reset() {
	*x = AddResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racklot_racklot_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddResp) ProtoMessage() {}

func (x *AddResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racklot_racklot_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddResp.ProtoReflect.Descriptor instead.
func (*AddResp) Descriptor() ([]byte, []int) {
	return file_proto_racklot_racklot_proto_rawDescGZIP(), []int{14}
}

type RacklotIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RacklotIDReq) Reset() {
	*x = RacklotIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racklot_racklot_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RacklotIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RacklotIDReq) ProtoMessage() {}

func (x *RacklotIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racklot_racklot_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RacklotIDReq.ProtoReflect.Descriptor instead.
func (*RacklotIDReq) Descriptor() ([]byte, []int) {
	return file_proto_racklot_racklot_proto_rawDescGZIP(), []int{15}
}

func (x *RacklotIDReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteResp) Reset() {
	*x = DeleteResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racklot_racklot_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResp) ProtoMessage() {}

func (x *DeleteResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racklot_racklot_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResp.ProtoReflect.Descriptor instead.
func (*DeleteResp) Descriptor() ([]byte, []int) {
	return file_proto_racklot_racklot_proto_rawDescGZIP(), []int{16}
}

type UpdateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateResp) Reset() {
	*x = UpdateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racklot_racklot_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResp) ProtoMessage() {}

func (x *UpdateResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racklot_racklot_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResp.ProtoReflect.Descriptor instead.
func (*UpdateResp) Descriptor() ([]byte, []int) {
	return file_proto_racklot_racklot_proto_rawDescGZIP(), []int{17}
}

type Racklots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Racklots   []*Racklot `protobuf:"bytes,1,rep,name=racklots,proto3" json:"racklots,omitempty"`
	Totals     uint32     `protobuf:"varint,4,opt,name=totals,proto3" json:"totals,omitempty"`
	Totalpages uint32     `protobuf:"varint,2,opt,name=totalpages,proto3" json:"totalpages,omitempty"`
	Currpages  uint32     `protobuf:"varint,3,opt,name=currpages,proto3" json:"currpages,omitempty"`
}

func (x *Racklots) Reset() {
	*x = Racklots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racklot_racklot_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Racklots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Racklots) ProtoMessage() {}

func (x *Racklots) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racklot_racklot_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Racklots.ProtoReflect.Descriptor instead.
func (*Racklots) Descriptor() ([]byte, []int) {
	return file_proto_racklot_racklot_proto_rawDescGZIP(), []int{18}
}

func (x *Racklots) GetRacklots() []*Racklot {
	if x != nil {
		return x.Racklots
	}
	return nil
}

func (x *Racklots) GetTotals() uint32 {
	if x != nil {
		return x.Totals
	}
	return 0
}

func (x *Racklots) GetTotalpages() uint32 {
	if x != nil {
		return x.Totalpages
	}
	return 0
}

func (x *Racklots) GetCurrpages() uint32 {
	if x != nil {
		return x.Currpages
	}
	return 0
}

type RackIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RackID uint32 `protobuf:"varint,2,opt,name=rackID,proto3" json:"rackID,omitempty"`
}

func (x *RackIDReq) Reset() {
	*x = RackIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racklot_racklot_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RackIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RackIDReq) ProtoMessage() {}

func (x *RackIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racklot_racklot_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RackIDReq.ProtoReflect.Descriptor instead.
func (*RackIDReq) Descriptor() ([]byte, []int) {
	return file_proto_racklot_racklot_proto_rawDescGZIP(), []int{19}
}

func (x *RackIDReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RackIDReq) GetRackID() uint32 {
	if x != nil {
		return x.RackID
	}
	return 0
}

type RackIDsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RackID []*RackIDReq `protobuf:"bytes,1,rep,name=rackID,proto3" json:"rackID,omitempty"`
}

func (x *RackIDsReq) Reset() {
	*x = RackIDsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racklot_racklot_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RackIDsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RackIDsReq) ProtoMessage() {}

func (x *RackIDsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racklot_racklot_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RackIDsReq.ProtoReflect.Descriptor instead.
func (*RackIDsReq) Descriptor() ([]byte, []int) {
	return file_proto_racklot_racklot_proto_rawDescGZIP(), []int{20}
}

func (x *RackIDsReq) GetRackID() []*RackIDReq {
	if x != nil {
		return x.RackID
	}
	return nil
}

type RacklotIDsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []uint32 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *RacklotIDsReq) Reset() {
	*x = RacklotIDsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racklot_racklot_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RacklotIDsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RacklotIDsReq) ProtoMessage() {}

func (x *RacklotIDsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racklot_racklot_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RacklotIDsReq.ProtoReflect.Descriptor instead.
func (*RacklotIDsReq) Descriptor() ([]byte, []int) {
	return file_proto_racklot_racklot_proto_rawDescGZIP(), []int{21}
}

func (x *RacklotIDsReq) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type RacklotGroupsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID    uint32   `protobuf:"varint,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	RacklotIDs []uint32 `protobuf:"varint,2,rep,packed,name=racklotIDs,proto3" json:"racklotIDs,omitempty"`
}

func (x *RacklotGroupsReq) Reset() {
	*x = RacklotGroupsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racklot_racklot_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RacklotGroupsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RacklotGroupsReq) ProtoMessage() {}

func (x *RacklotGroupsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racklot_racklot_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RacklotGroupsReq.ProtoReflect.Descriptor instead.
func (*RacklotGroupsReq) Descriptor() ([]byte, []int) {
	return file_proto_racklot_racklot_proto_rawDescGZIP(), []int{22}
}

func (x *RacklotGroupsReq) GetGroupID() uint32 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *RacklotGroupsReq) GetRacklotIDs() []uint32 {
	if x != nil {
		return x.RacklotIDs
	}
	return nil
}

type Parameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Parameter) Reset() {
	*x = Parameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racklot_racklot_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Parameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parameter) ProtoMessage() {}

func (x *Parameter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racklot_racklot_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parameter.ProtoReflect.Descriptor instead.
func (*Parameter) Descriptor() ([]byte, []int) {
	return file_proto_racklot_racklot_proto_rawDescGZIP(), []int{23}
}

func (x *Parameter) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Parameter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type RacklotQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   uint32         `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  uint32         `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Page    uint32         `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PerPage uint32         `protobuf:"varint,4,opt,name=perPage,proto3" json:"perPage,omitempty"`
	Filter  *RacklotFilter `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *RacklotQuery) Reset() {
	*x = RacklotQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racklot_racklot_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RacklotQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RacklotQuery) ProtoMessage() {}

func (x *RacklotQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racklot_racklot_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RacklotQuery.ProtoReflect.Descriptor instead.
func (*RacklotQuery) Descriptor() ([]byte, []int) {
	return file_proto_racklot_racklot_proto_rawDescGZIP(), []int{24}
}

func (x *RacklotQuery) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RacklotQuery) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *RacklotQuery) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RacklotQuery) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *RacklotQuery) GetFilter() *RacklotFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type RacklotTypeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   uint32             `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  uint32             `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Page    uint32             `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PerPage uint32             `protobuf:"varint,4,opt,name=perPage,proto3" json:"perPage,omitempty"`
	Filter  *RacklotTypeFilter `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *RacklotTypeQuery) Reset() {
	*x = RacklotTypeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racklot_racklot_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RacklotTypeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RacklotTypeQuery) ProtoMessage() {}

func (x *RacklotTypeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racklot_racklot_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RacklotTypeQuery.ProtoReflect.Descriptor instead.
func (*RacklotTypeQuery) Descriptor() ([]byte, []int) {
	return file_proto_racklot_racklot_proto_rawDescGZIP(), []int{25}
}

func (x *RacklotTypeQuery) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RacklotTypeQuery) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *RacklotTypeQuery) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RacklotTypeQuery) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *RacklotTypeQuery) GetFilter() *RacklotTypeFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type RacklotFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	And         []*RacklotFilter      `protobuf:"bytes,1,rep,name=and,proto3" json:"and,omitempty"`
	Or          []*RacklotFilter      `protobuf:"bytes,2,rep,name=or,proto3" json:"or,omitempty"`
	IdIn        []uint32              `protobuf:"varint,3,rep,packed,name=idIn,proto3" json:"idIn,omitempty"`
	IdNotIn     []uint32              `protobuf:"varint,14,rep,packed,name=idNotIn,proto3" json:"idNotIn,omitempty"`
	RackIdNotIn []uint32              `protobuf:"varint,15,rep,packed,name=rackIdNotIn,proto3" json:"rackIdNotIn,omitempty"`
	RackIdIn    []uint32              `protobuf:"varint,16,rep,packed,name=rackIdIn,proto3" json:"rackIdIn,omitempty"`
	StationID   *wrappers.UInt32Value `protobuf:"bytes,4,opt,name=stationID,proto3" json:"stationID,omitempty"`
	StationIDIn []uint32              `protobuf:"varint,10,rep,packed,name=stationIDIn,proto3" json:"stationIDIn,omitempty"`
	RackID      *wrappers.UInt32Value `protobuf:"bytes,5,opt,name=rackID,proto3" json:"rackID,omitempty"`
	IsInbound   *wrappers.BoolValue   `protobuf:"bytes,6,opt,name=isInbound,proto3" json:"isInbound,omitempty"`
	IsOutbound  *wrappers.BoolValue   `protobuf:"bytes,7,opt,name=isOutbound,proto3" json:"isOutbound,omitempty"`
	IsValid     *wrappers.BoolValue   `protobuf:"bytes,8,opt,name=isValid,proto3" json:"isValid,omitempty"`
	IsOccupied  *wrappers.BoolValue   `protobuf:"bytes,9,opt,name=isOccupied,proto3" json:"isOccupied,omitempty"`
	Type        *RacklotTypeFilter    `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty"`
	Properties  []*PropertyFilter     `protobuf:"bytes,12,rep,name=properties,proto3" json:"properties,omitempty"`
	IsHasRack   *wrappers.BoolValue   `protobuf:"bytes,17,opt,name=isHasRack,proto3" json:"isHasRack,omitempty"`
	MultiGroup  *wrappers.UInt32Value `protobuf:"bytes,18,opt,name=multiGroup,proto3" json:"multiGroup,omitempty"`
	MultiItem   *wrappers.UInt32Value `protobuf:"bytes,19,opt,name=multiItem,proto3" json:"multiItem,omitempty"`
}

func (x *RacklotFilter) Reset() {
	*x = RacklotFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racklot_racklot_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RacklotFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RacklotFilter) ProtoMessage() {}

func (x *RacklotFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racklot_racklot_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RacklotFilter.ProtoReflect.Descriptor instead.
func (*RacklotFilter) Descriptor() ([]byte, []int) {
	return file_proto_racklot_racklot_proto_rawDescGZIP(), []int{26}
}

func (x *RacklotFilter) GetAnd() []*RacklotFilter {
	if x != nil {
		return x.And
	}
	return nil
}

func (x *RacklotFilter) GetOr() []*RacklotFilter {
	if x != nil {
		return x.Or
	}
	return nil
}

func (x *RacklotFilter) GetIdIn() []uint32 {
	if x != nil {
		return x.IdIn
	}
	return nil
}

func (x *RacklotFilter) GetIdNotIn() []uint32 {
	if x != nil {
		return x.IdNotIn
	}
	return nil
}

func (x *RacklotFilter) GetRackIdNotIn() []uint32 {
	if x != nil {
		return x.RackIdNotIn
	}
	return nil
}

func (x *RacklotFilter) GetRackIdIn() []uint32 {
	if x != nil {
		return x.RackIdIn
	}
	return nil
}

func (x *RacklotFilter) GetStationID() *wrappers.UInt32Value {
	if x != nil {
		return x.StationID
	}
	return nil
}

func (x *RacklotFilter) GetStationIDIn() []uint32 {
	if x != nil {
		return x.StationIDIn
	}
	return nil
}

func (x *RacklotFilter) GetRackID() *wrappers.UInt32Value {
	if x != nil {
		return x.RackID
	}
	return nil
}

func (x *RacklotFilter) GetIsInbound() *wrappers.BoolValue {
	if x != nil {
		return x.IsInbound
	}
	return nil
}

func (x *RacklotFilter) GetIsOutbound() *wrappers.BoolValue {
	if x != nil {
		return x.IsOutbound
	}
	return nil
}

func (x *RacklotFilter) GetIsValid() *wrappers.BoolValue {
	if x != nil {
		return x.IsValid
	}
	return nil
}

func (x *RacklotFilter) GetIsOccupied() *wrappers.BoolValue {
	if x != nil {
		return x.IsOccupied
	}
	return nil
}

func (x *RacklotFilter) GetType() *RacklotTypeFilter {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *RacklotFilter) GetProperties() []*PropertyFilter {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *RacklotFilter) GetIsHasRack() *wrappers.BoolValue {
	if x != nil {
		return x.IsHasRack
	}
	return nil
}

func (x *RacklotFilter) GetMultiGroup() *wrappers.UInt32Value {
	if x != nil {
		return x.MultiGroup
	}
	return nil
}

func (x *RacklotFilter) GetMultiItem() *wrappers.UInt32Value {
	if x != nil {
		return x.MultiItem
	}
	return nil
}

type RacklotTypeFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	And    []*RacklotTypeFilter  `protobuf:"bytes,1,rep,name=and,proto3" json:"and,omitempty"`
	Or     []*RacklotTypeFilter  `protobuf:"bytes,2,rep,name=or,proto3" json:"or,omitempty"`
	IdIn   []uint32              `protobuf:"varint,3,rep,packed,name=idIn,proto3" json:"idIn,omitempty"`
	NameIn []string              `protobuf:"bytes,4,rep,name=nameIn,proto3" json:"nameIn,omitempty"`
	Id     *wrappers.UInt32Value `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	Name   *wrappers.StringValue `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RacklotTypeFilter) Reset() {
	*x = RacklotTypeFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racklot_racklot_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RacklotTypeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RacklotTypeFilter) ProtoMessage() {}

func (x *RacklotTypeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racklot_racklot_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RacklotTypeFilter.ProtoReflect.Descriptor instead.
func (*RacklotTypeFilter) Descriptor() ([]byte, []int) {
	return file_proto_racklot_racklot_proto_rawDescGZIP(), []int{27}
}

func (x *RacklotTypeFilter) GetAnd() []*RacklotTypeFilter {
	if x != nil {
		return x.And
	}
	return nil
}

func (x *RacklotTypeFilter) GetOr() []*RacklotTypeFilter {
	if x != nil {
		return x.Or
	}
	return nil
}

func (x *RacklotTypeFilter) GetIdIn() []uint32 {
	if x != nil {
		return x.IdIn
	}
	return nil
}

func (x *RacklotTypeFilter) GetNameIn() []string {
	if x != nil {
		return x.NameIn
	}
	return nil
}

func (x *RacklotTypeFilter) GetId() *wrappers.UInt32Value {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RacklotTypeFilter) GetName() *wrappers.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type PropertyFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Type  string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *PropertyFilter) Reset() {
	*x = PropertyFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racklot_racklot_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyFilter) ProtoMessage() {}

func (x *PropertyFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racklot_racklot_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyFilter.ProtoReflect.Descriptor instead.
func (*PropertyFilter) Descriptor() ([]byte, []int) {
	return file_proto_racklot_racklot_proto_rawDescGZIP(), []int{28}
}

func (x *PropertyFilter) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PropertyFilter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *PropertyFilter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Property) Reset() {
	*x = Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racklot_racklot_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Property) ProtoMessage() {}

func (x *Property) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racklot_racklot_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Property.ProtoReflect.Descriptor instead.
func (*Property) Descriptor() ([]byte, []int) {
	return file_proto_racklot_racklot_proto_rawDescGZIP(), []int{29}
}

func (x *Property) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Property) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type FlagReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Flag bool   `protobuf:"varint,2,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (x *FlagReq) Reset() {
	*x = FlagReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racklot_racklot_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagReq) ProtoMessage() {}

func (x *FlagReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racklot_racklot_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagReq.ProtoReflect.Descriptor instead.
func (*FlagReq) Descriptor() ([]byte, []int) {
	return file_proto_racklot_racklot_proto_rawDescGZIP(), []int{30}
}

func (x *FlagReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FlagReq) GetFlag() bool {
	if x != nil {
		return x.Flag
	}
	return false
}

type TypeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type uint32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TypeReq) Reset() {
	*x = TypeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racklot_racklot_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeReq) ProtoMessage() {}

func (x *TypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racklot_racklot_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeReq.ProtoReflect.Descriptor instead.
func (*TypeReq) Descriptor() ([]byte, []int) {
	return file_proto_racklot_racklot_proto_rawDescGZIP(), []int{31}
}

func (x *TypeReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TypeReq) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *TypeReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PropertiesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Properties string `protobuf:"bytes,2,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *PropertiesReq) Reset() {
	*x = PropertiesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racklot_racklot_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertiesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertiesReq) ProtoMessage() {}

func (x *PropertiesReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racklot_racklot_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertiesReq.ProtoReflect.Descriptor instead.
func (*PropertiesReq) Descriptor() ([]byte, []int) {
	return file_proto_racklot_racklot_proto_rawDescGZIP(), []int{32}
}

func (x *PropertiesReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PropertiesReq) GetProperties() string {
	if x != nil {
		return x.Properties
	}
	return ""
}

var File_proto_racklot_racklot_proto protoreflect.FileDescriptor

var file_proto_racklot_racklot_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2f,
	0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b,
	0x6c, 0x6f, 0x74, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x17, 0x0a, 0x05, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x12, 0x0a, 0x10,
	0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x22, 0xa9, 0x01, 0x0a, 0x0d, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x61, 0x63, 0x6b,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x61, 0x63,
	0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f, 0x52, 0x61, 0x63, 0x6b,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x52,
	0x61, 0x63, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xa1, 0x01, 0x0a,
	0x0b, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x22, 0xbd, 0x02, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x6c,
	0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x22, 0x67, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x0c, 0x52, 0x61,
	0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x72, 0x61,
	0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e,
	0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x75, 0x72,
	0x72, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x75,
	0x72, 0x72, 0x70, 0x61, 0x67, 0x65, 0x73, 0x22, 0x57, 0x0a, 0x0d, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x61, 0x63, 0x6b,
	0x6c, 0x6f, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x61, 0x63,
	0x6b, 0x6c, 0x6f, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x22, 0x87, 0x04, 0x0a, 0x07, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f,
	0x74, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01,
	0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x4b, 0x0a, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c,
	0x6f, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x61,
	0x63, 0x6b, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69,
	0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x63, 0x63, 0x75,
	0x70, 0x69, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x07, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x61, 0x0a, 0x10, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d,
	0x0a, 0x07, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72,
	0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63,
	0x6b, 0x6c, 0x6f, 0x74, 0x52, 0x07, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x22, 0xf9, 0x06,
	0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x12,
	0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a,
	0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x01, 0x78, 0x12, 0x2a, 0x0a, 0x01, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x01, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x32,
	0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x4b, 0x0a, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f,
	0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x3e, 0x0a, 0x0b, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3a, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x06, 0x72,
	0x61, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x61, 0x63, 0x6b, 0x49,
	0x44, 0x12, 0x34, 0x0a, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x69, 0x73, 0x49, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x69, 0x73, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x69, 0x73, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3a, 0x0a,
	0x0a, 0x69, 0x73, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x69,
	0x73, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x62, 0x0a, 0x11, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x73,
	0x12, 0x3b, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e,
	0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61,
	0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x45, 0x0a,
	0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x73, 0x22, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x09, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1e, 0x0a, 0x0c, 0x52,
	0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x0c, 0x0a, 0x0a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x0c, 0x0a, 0x0a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x9b, 0x01, 0x0a, 0x08, 0x52, 0x61, 0x63, 0x6b,
	0x6c, 0x6f, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x61,
	0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x52, 0x08, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x72, 0x70,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x22, 0x33, 0x0a, 0x09, 0x52, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x22, 0x45, 0x0a, 0x0a, 0x52, 0x61,
	0x63, 0x6b, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x61, 0x63, 0x6b,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e,
	0x52, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x52, 0x65, 0x71, 0x52, 0x06, 0x72, 0x61, 0x63, 0x6b, 0x49,
	0x44, 0x22, 0x21, 0x0a, 0x0d, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x49, 0x44, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x22, 0x4c, 0x0a, 0x10, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x49, 0x44, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x49,
	0x44, 0x73, 0x22, 0x33, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x0c, 0x52, 0x61, 0x63, 0x6b,
	0x6c, 0x6f, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65,
	0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x61, 0x63, 0x6b,
	0x6c, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x22, 0xaf, 0x01, 0x0a, 0x10, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x50,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72,
	0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0x9a, 0x07, 0x0a, 0x0d, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x03, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72,
	0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x03, 0x61, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x02,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e,
	0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x02, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x64, 0x49, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x04, 0x69, 0x64, 0x49, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x64, 0x4e, 0x6f, 0x74, 0x49, 0x6e,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x64, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x4e, 0x6f, 0x74, 0x49,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x49, 0x6e, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x49, 0x6e, 0x12, 0x3a, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x49, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x49, 0x6e, 0x12, 0x34, 0x0a, 0x06, 0x72,
	0x61, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x61, 0x63, 0x6b, 0x49,
	0x44, 0x12, 0x38, 0x0a, 0x09, 0x69, 0x73, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x69, 0x73, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x69,
	0x73, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x73, 0x4f,
	0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x3a, 0x0a,
	0x0a, 0x69, 0x73, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x69,
	0x73, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x52,
	0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f,
	0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x09,
	0x69, 0x73, 0x48, 0x61, 0x73, 0x52, 0x61, 0x63, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x69, 0x73, 0x48,
	0x61, 0x73, 0x52, 0x61, 0x63, 0x6b, 0x12, 0x3c, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x3a, 0x0a, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x74, 0x65,
	0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x74, 0x65, 0x6d,
	0x22, 0x93, 0x02, 0x0a, 0x11, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x03, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x6c,
	0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x03, 0x61, 0x6e,
	0x64, 0x12, 0x37, 0x0a, 0x02, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63,
	0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x02, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x64,
	0x49, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x69, 0x64, 0x49, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x32, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2d, 0x0a, 0x07, 0x46, 0x6c, 0x61, 0x67,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x22, 0x41, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3f, 0x0a, 0x0d, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x32, 0xb4, 0x10, 0x0a, 0x0e,
	0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x22, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63,
	0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x1a, 0x1e, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74,
	0x73, 0x12, 0x4f, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x12,
	0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72,
	0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x6c,
	0x6f, 0x74, 0x12, 0x5d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x61, 0x63,
	0x6b, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x22, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63,
	0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x57, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x6c,
	0x6f, 0x74, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x52,
	0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x41, 0x64,
	0x64, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e,
	0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x52, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x64, 0x64, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f,
	0x74, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x73, 0x1a, 0x1e, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f,
	0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x12, 0x22, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c,
	0x6f, 0x74, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a,
	0x20, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72,
	0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x5e, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x1e, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x59, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x6c,
	0x6f, 0x74, 0x12, 0x26, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72,
	0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f,
	0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5e, 0x0a, 0x13,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x6c,
	0x6f, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b,
	0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0e,
	0x41, 0x64, 0x64, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61,
	0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x61, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x20, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x58, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x63,
	0x6b, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e,
	0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x20, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c,
	0x6f, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x57, 0x0a,
	0x10, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x23, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x1e, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x61,
	0x63, 0x6b, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72,
	0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x52, 0x61, 0x63,
	0x6b, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72,
	0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x63,
	0x6b, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x61, 0x63,
	0x6b, 0x6c, 0x6f, 0x74, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f,
	0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b,
	0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x49, 0x44, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x1e, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x55, 0x0a, 0x0e, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x52, 0x61, 0x63, 0x6b, 0x6c,
	0x6f, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x6c,
	0x6f, 0x74, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c,
	0x6f, 0x74, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x1e, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e,
	0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4b, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1d,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61,
	0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63,
	0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a,
	0x0b, 0x53, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1d, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b,
	0x6c, 0x6f, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c,
	0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x41,
	0x64, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b,
	0x6c, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x1e, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x61, 0x63,
	0x6b, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63,
	0x6b, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x42, 0x24, 0x5a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x61, 0x63, 0x6b,
	0x6c, 0x6f, 0x74, 0x3b, 0x67, 0x6f, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5f, 0x73, 0x72, 0x76,
	0x5f, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_racklot_racklot_proto_rawDescOnce sync.Once
	file_proto_racklot_racklot_proto_rawDescData = file_proto_racklot_racklot_proto_rawDesc
)

func file_proto_racklot_racklot_proto_rawDescGZIP() []byte {
	file_proto_racklot_racklot_proto_rawDescOnce.Do(func() {
		file_proto_racklot_racklot_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_racklot_racklot_proto_rawDescData)
	})
	return file_proto_racklot_racklot_proto_rawDescData
}

var file_proto_racklot_racklot_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_proto_racklot_racklot_proto_goTypes = []interface{}{
	(*IDReq)(nil),                // 0: go.micro.srv.racklot.IDReq
	(*RacklotReportReq)(nil),     // 1: go.micro.srv.racklot.RacklotReportReq
	(*RacklotReport)(nil),        // 2: go.micro.srv.racklot.RacklotReport
	(*RacklotType)(nil),          // 3: go.micro.srv.racklot.RacklotType
	(*UpdateRacklotType)(nil),    // 4: go.micro.srv.racklot.UpdateRacklotType
	(*UpdateRacklotTypeReq)(nil), // 5: go.micro.srv.racklot.UpdateRacklotTypeReq
	(*RacklotTypes)(nil),         // 6: go.micro.srv.racklot.RacklotTypes
	(*MultipleGroup)(nil),        // 7: go.micro.srv.racklot.MultipleGroup
	(*Racklot)(nil),              // 8: go.micro.srv.racklot.Racklot
	(*UpdateRacklotReq)(nil),     // 9: go.micro.srv.racklot.UpdateRacklotReq
	(*UpdateRacklot)(nil),        // 10: go.micro.srv.racklot.UpdateRacklot
	(*UpdateRacklotsReq)(nil),    // 11: go.micro.srv.racklot.UpdateRacklotsReq
	(*DeleteRacklotsReq)(nil),    // 12: go.micro.srv.racklot.DeleteRacklotsReq
	(*Response)(nil),             // 13: go.micro.srv.racklot.Response
	(*AddResp)(nil),              // 14: go.micro.srv.racklot.AddResp
	(*RacklotIDReq)(nil),         // 15: go.micro.srv.racklot.RacklotIDReq
	(*DeleteResp)(nil),           // 16: go.micro.srv.racklot.DeleteResp
	(*UpdateResp)(nil),           // 17: go.micro.srv.racklot.UpdateResp
	(*Racklots)(nil),             // 18: go.micro.srv.racklot.Racklots
	(*RackIDReq)(nil),            // 19: go.micro.srv.racklot.RackIDReq
	(*RackIDsReq)(nil),           // 20: go.micro.srv.racklot.RackIDsReq
	(*RacklotIDsReq)(nil),        // 21: go.micro.srv.racklot.RacklotIDsReq
	(*RacklotGroupsReq)(nil),     // 22: go.micro.srv.racklot.RacklotGroupsReq
	(*Parameter)(nil),            // 23: go.micro.srv.racklot.Parameter
	(*RacklotQuery)(nil),         // 24: go.micro.srv.racklot.RacklotQuery
	(*RacklotTypeQuery)(nil),     // 25: go.micro.srv.racklot.RacklotTypeQuery
	(*RacklotFilter)(nil),        // 26: go.micro.srv.racklot.RacklotFilter
	(*RacklotTypeFilter)(nil),    // 27: go.micro.srv.racklot.RacklotTypeFilter
	(*PropertyFilter)(nil),       // 28: go.micro.srv.racklot.PropertyFilter
	(*Property)(nil),             // 29: go.micro.srv.racklot.Property
	(*FlagReq)(nil),              // 30: go.micro.srv.racklot.FlagReq
	(*TypeReq)(nil),              // 31: go.micro.srv.racklot.TypeReq
	(*PropertiesReq)(nil),        // 32: go.micro.srv.racklot.PropertiesReq
	(*wrappers.UInt32Value)(nil), // 33: google.protobuf.UInt32Value
	(*wrappers.StringValue)(nil), // 34: google.protobuf.StringValue
	(*wrappers.FloatValue)(nil),  // 35: google.protobuf.FloatValue
	(*wrappers.BoolValue)(nil),   // 36: google.protobuf.BoolValue
}
var file_proto_racklot_racklot_proto_depIdxs = []int32{
	33, // 0: go.micro.srv.racklot.UpdateRacklotType.id:type_name -> google.protobuf.UInt32Value
	34, // 1: go.micro.srv.racklot.UpdateRacklotType.name:type_name -> google.protobuf.StringValue
	34, // 2: go.micro.srv.racklot.UpdateRacklotType.description:type_name -> google.protobuf.StringValue
	33, // 3: go.micro.srv.racklot.UpdateRacklotType.length:type_name -> google.protobuf.UInt32Value
	33, // 4: go.micro.srv.racklot.UpdateRacklotType.width:type_name -> google.protobuf.UInt32Value
	4,  // 5: go.micro.srv.racklot.UpdateRacklotTypeReq.update:type_name -> go.micro.srv.racklot.UpdateRacklotType
	3,  // 6: go.micro.srv.racklot.RacklotTypes.racklotTypes:type_name -> go.micro.srv.racklot.RacklotType
	3,  // 7: go.micro.srv.racklot.Racklot.type:type_name -> go.micro.srv.racklot.RacklotType
	7,  // 8: go.micro.srv.racklot.Racklot.multipleGroups:type_name -> go.micro.srv.racklot.MultipleGroup
	10, // 9: go.micro.srv.racklot.UpdateRacklotReq.racklot:type_name -> go.micro.srv.racklot.UpdateRacklot
	33, // 10: go.micro.srv.racklot.UpdateRacklot.id:type_name -> google.protobuf.UInt32Value
	33, // 11: go.micro.srv.racklot.UpdateRacklot.x:type_name -> google.protobuf.UInt32Value
	33, // 12: go.micro.srv.racklot.UpdateRacklot.y:type_name -> google.protobuf.UInt32Value
	35, // 13: go.micro.srv.racklot.UpdateRacklot.angle:type_name -> google.protobuf.FloatValue
	33, // 14: go.micro.srv.racklot.UpdateRacklot.length:type_name -> google.protobuf.UInt32Value
	33, // 15: go.micro.srv.racklot.UpdateRacklot.width:type_name -> google.protobuf.UInt32Value
	7,  // 16: go.micro.srv.racklot.UpdateRacklot.multipleGroups:type_name -> go.micro.srv.racklot.MultipleGroup
	33, // 17: go.micro.srv.racklot.UpdateRacklot.racklotType:type_name -> google.protobuf.UInt32Value
	33, // 18: go.micro.srv.racklot.UpdateRacklot.stationID:type_name -> google.protobuf.UInt32Value
	33, // 19: go.micro.srv.racklot.UpdateRacklot.rackID:type_name -> google.protobuf.UInt32Value
	36, // 20: go.micro.srv.racklot.UpdateRacklot.isValid:type_name -> google.protobuf.BoolValue
	36, // 21: go.micro.srv.racklot.UpdateRacklot.isInbound:type_name -> google.protobuf.BoolValue
	36, // 22: go.micro.srv.racklot.UpdateRacklot.isOutbound:type_name -> google.protobuf.BoolValue
	36, // 23: go.micro.srv.racklot.UpdateRacklot.isOccupied:type_name -> google.protobuf.BoolValue
	34, // 24: go.micro.srv.racklot.UpdateRacklot.description:type_name -> google.protobuf.StringValue
	10, // 25: go.micro.srv.racklot.UpdateRacklotsReq.update:type_name -> go.micro.srv.racklot.UpdateRacklot
	8,  // 26: go.micro.srv.racklot.Racklots.racklots:type_name -> go.micro.srv.racklot.Racklot
	19, // 27: go.micro.srv.racklot.RackIDsReq.rackID:type_name -> go.micro.srv.racklot.RackIDReq
	26, // 28: go.micro.srv.racklot.RacklotQuery.filter:type_name -> go.micro.srv.racklot.RacklotFilter
	27, // 29: go.micro.srv.racklot.RacklotTypeQuery.filter:type_name -> go.micro.srv.racklot.RacklotTypeFilter
	26, // 30: go.micro.srv.racklot.RacklotFilter.and:type_name -> go.micro.srv.racklot.RacklotFilter
	26, // 31: go.micro.srv.racklot.RacklotFilter.or:type_name -> go.micro.srv.racklot.RacklotFilter
	33, // 32: go.micro.srv.racklot.RacklotFilter.stationID:type_name -> google.protobuf.UInt32Value
	33, // 33: go.micro.srv.racklot.RacklotFilter.rackID:type_name -> google.protobuf.UInt32Value
	36, // 34: go.micro.srv.racklot.RacklotFilter.isInbound:type_name -> google.protobuf.BoolValue
	36, // 35: go.micro.srv.racklot.RacklotFilter.isOutbound:type_name -> google.protobuf.BoolValue
	36, // 36: go.micro.srv.racklot.RacklotFilter.isValid:type_name -> google.protobuf.BoolValue
	36, // 37: go.micro.srv.racklot.RacklotFilter.isOccupied:type_name -> google.protobuf.BoolValue
	27, // 38: go.micro.srv.racklot.RacklotFilter.type:type_name -> go.micro.srv.racklot.RacklotTypeFilter
	28, // 39: go.micro.srv.racklot.RacklotFilter.properties:type_name -> go.micro.srv.racklot.PropertyFilter
	36, // 40: go.micro.srv.racklot.RacklotFilter.isHasRack:type_name -> google.protobuf.BoolValue
	33, // 41: go.micro.srv.racklot.RacklotFilter.multiGroup:type_name -> google.protobuf.UInt32Value
	33, // 42: go.micro.srv.racklot.RacklotFilter.multiItem:type_name -> google.protobuf.UInt32Value
	27, // 43: go.micro.srv.racklot.RacklotTypeFilter.and:type_name -> go.micro.srv.racklot.RacklotTypeFilter
	27, // 44: go.micro.srv.racklot.RacklotTypeFilter.or:type_name -> go.micro.srv.racklot.RacklotTypeFilter
	33, // 45: go.micro.srv.racklot.RacklotTypeFilter.id:type_name -> google.protobuf.UInt32Value
	34, // 46: go.micro.srv.racklot.RacklotTypeFilter.name:type_name -> google.protobuf.StringValue
	24, // 47: go.micro.srv.racklot.RacklotService.GetRacklots:input_type -> go.micro.srv.racklot.RacklotQuery
	15, // 48: go.micro.srv.racklot.RacklotService.GetRacklot:input_type -> go.micro.srv.racklot.RacklotIDReq
	25, // 49: go.micro.srv.racklot.RacklotService.GetRacklotTypes:input_type -> go.micro.srv.racklot.RacklotTypeQuery
	15, // 50: go.micro.srv.racklot.RacklotService.GetRacklotType:input_type -> go.micro.srv.racklot.RacklotIDReq
	8,  // 51: go.micro.srv.racklot.RacklotService.AddRacklot:input_type -> go.micro.srv.racklot.Racklot
	18, // 52: go.micro.srv.racklot.RacklotService.BatchAddRacklots:input_type -> go.micro.srv.racklot.Racklots
	15, // 53: go.micro.srv.racklot.RacklotService.DeleteRacklot:input_type -> go.micro.srv.racklot.RacklotIDReq
	12, // 54: go.micro.srv.racklot.RacklotService.BatchDeleteRacklots:input_type -> go.micro.srv.racklot.DeleteRacklotsReq
	9,  // 55: go.micro.srv.racklot.RacklotService.UpdateRacklot:input_type -> go.micro.srv.racklot.UpdateRacklotReq
	11, // 56: go.micro.srv.racklot.RacklotService.BatchUpdateRacklots:input_type -> go.micro.srv.racklot.UpdateRacklotsReq
	3,  // 57: go.micro.srv.racklot.RacklotService.AddRacklotType:input_type -> go.micro.srv.racklot.RacklotType
	5,  // 58: go.micro.srv.racklot.RacklotService.UpdateRacklotType:input_type -> go.micro.srv.racklot.UpdateRacklotTypeReq
	3,  // 59: go.micro.srv.racklot.RacklotService.DeleteRacklotType:input_type -> go.micro.srv.racklot.RacklotType
	7,  // 60: go.micro.srv.racklot.RacklotService.SetMultipleGroup:input_type -> go.micro.srv.racklot.MultipleGroup
	19, // 61: go.micro.srv.racklot.RacklotService.BindRack:input_type -> go.micro.srv.racklot.RackIDReq
	19, // 62: go.micro.srv.racklot.RacklotService.UnbindRack:input_type -> go.micro.srv.racklot.RackIDReq
	21, // 63: go.micro.srv.racklot.RacklotService.DisableRacklots:input_type -> go.micro.srv.racklot.RacklotIDsReq
	21, // 64: go.micro.srv.racklot.RacklotService.EnableRacklots:input_type -> go.micro.srv.racklot.RacklotIDsReq
	21, // 65: go.micro.srv.racklot.RacklotService.OccupyRacklots:input_type -> go.micro.srv.racklot.RacklotIDsReq
	21, // 66: go.micro.srv.racklot.RacklotService.ReleaseRacklots:input_type -> go.micro.srv.racklot.RacklotIDsReq
	30, // 67: go.micro.srv.racklot.RacklotService.SetInbound:input_type -> go.micro.srv.racklot.FlagReq
	30, // 68: go.micro.srv.racklot.RacklotService.SetOutbound:input_type -> go.micro.srv.racklot.FlagReq
	32, // 69: go.micro.srv.racklot.RacklotService.AddProperties:input_type -> go.micro.srv.racklot.PropertiesReq
	1,  // 70: go.micro.srv.racklot.RacklotService.GetRacklotReport:input_type -> go.micro.srv.racklot.RacklotReportReq
	18, // 71: go.micro.srv.racklot.RacklotService.GetRacklots:output_type -> go.micro.srv.racklot.Racklots
	8,  // 72: go.micro.srv.racklot.RacklotService.GetRacklot:output_type -> go.micro.srv.racklot.Racklot
	6,  // 73: go.micro.srv.racklot.RacklotService.GetRacklotTypes:output_type -> go.micro.srv.racklot.RacklotTypes
	3,  // 74: go.micro.srv.racklot.RacklotService.GetRacklotType:output_type -> go.micro.srv.racklot.RacklotType
	14, // 75: go.micro.srv.racklot.RacklotService.AddRacklot:output_type -> go.micro.srv.racklot.AddResp
	13, // 76: go.micro.srv.racklot.RacklotService.BatchAddRacklots:output_type -> go.micro.srv.racklot.Response
	16, // 77: go.micro.srv.racklot.RacklotService.DeleteRacklot:output_type -> go.micro.srv.racklot.DeleteResp
	13, // 78: go.micro.srv.racklot.RacklotService.BatchDeleteRacklots:output_type -> go.micro.srv.racklot.Response
	17, // 79: go.micro.srv.racklot.RacklotService.UpdateRacklot:output_type -> go.micro.srv.racklot.UpdateResp
	13, // 80: go.micro.srv.racklot.RacklotService.BatchUpdateRacklots:output_type -> go.micro.srv.racklot.Response
	14, // 81: go.micro.srv.racklot.RacklotService.AddRacklotType:output_type -> go.micro.srv.racklot.AddResp
	17, // 82: go.micro.srv.racklot.RacklotService.UpdateRacklotType:output_type -> go.micro.srv.racklot.UpdateResp
	16, // 83: go.micro.srv.racklot.RacklotService.DeleteRacklotType:output_type -> go.micro.srv.racklot.DeleteResp
	13, // 84: go.micro.srv.racklot.RacklotService.SetMultipleGroup:output_type -> go.micro.srv.racklot.Response
	13, // 85: go.micro.srv.racklot.RacklotService.BindRack:output_type -> go.micro.srv.racklot.Response
	13, // 86: go.micro.srv.racklot.RacklotService.UnbindRack:output_type -> go.micro.srv.racklot.Response
	13, // 87: go.micro.srv.racklot.RacklotService.DisableRacklots:output_type -> go.micro.srv.racklot.Response
	13, // 88: go.micro.srv.racklot.RacklotService.EnableRacklots:output_type -> go.micro.srv.racklot.Response
	13, // 89: go.micro.srv.racklot.RacklotService.OccupyRacklots:output_type -> go.micro.srv.racklot.Response
	13, // 90: go.micro.srv.racklot.RacklotService.ReleaseRacklots:output_type -> go.micro.srv.racklot.Response
	13, // 91: go.micro.srv.racklot.RacklotService.SetInbound:output_type -> go.micro.srv.racklot.Response
	13, // 92: go.micro.srv.racklot.RacklotService.SetOutbound:output_type -> go.micro.srv.racklot.Response
	13, // 93: go.micro.srv.racklot.RacklotService.AddProperties:output_type -> go.micro.srv.racklot.Response
	2,  // 94: go.micro.srv.racklot.RacklotService.GetRacklotReport:output_type -> go.micro.srv.racklot.RacklotReport
	71, // [71:95] is the sub-list for method output_type
	47, // [47:71] is the sub-list for method input_type
	47, // [47:47] is the sub-list for extension type_name
	47, // [47:47] is the sub-list for extension extendee
	0,  // [0:47] is the sub-list for field type_name
}

func init() { file_proto_racklot_racklot_proto_init() }
func file_proto_racklot_racklot_proto_init() {
	if File_proto_racklot_racklot_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_racklot_racklot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racklot_racklot_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RacklotReportReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racklot_racklot_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RacklotReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racklot_racklot_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RacklotType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racklot_racklot_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRacklotType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racklot_racklot_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRacklotTypeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racklot_racklot_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RacklotTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racklot_racklot_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipleGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racklot_racklot_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Racklot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racklot_racklot_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRacklotReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racklot_racklot_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRacklot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racklot_racklot_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRacklotsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racklot_racklot_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRacklotsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racklot_racklot_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racklot_racklot_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racklot_racklot_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RacklotIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racklot_racklot_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racklot_racklot_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racklot_racklot_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Racklots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racklot_racklot_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RackIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racklot_racklot_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RackIDsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racklot_racklot_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RacklotIDsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racklot_racklot_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RacklotGroupsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racklot_racklot_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Parameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racklot_racklot_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RacklotQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racklot_racklot_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RacklotTypeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racklot_racklot_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RacklotFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racklot_racklot_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RacklotTypeFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racklot_racklot_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racklot_racklot_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racklot_racklot_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racklot_racklot_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racklot_racklot_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertiesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_racklot_racklot_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_racklot_racklot_proto_goTypes,
		DependencyIndexes: file_proto_racklot_racklot_proto_depIdxs,
		MessageInfos:      file_proto_racklot_racklot_proto_msgTypes,
	}.Build()
	File_proto_racklot_racklot_proto = out.File
	file_proto_racklot_racklot_proto_rawDesc = nil
	file_proto_racklot_racklot_proto_goTypes = nil
	file_proto_racklot_racklot_proto_depIdxs = nil
}
