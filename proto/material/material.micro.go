// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/material/material.proto

package go_micro_srv_material

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for MaterialService service

type MaterialService interface {
	// 添加物料类型
	AddMaterialType(ctx context.Context, in *MaterialType, opts ...client.CallOption) (*Response, error)
	// 移除物料类型
	DeleteMaterialType(ctx context.Context, in *MaterialTypeIDReq, opts ...client.CallOption) (*Response, error)
	// 更新物料类型
	UpdateMaterialType(ctx context.Context, in *MaterialType, opts ...client.CallOption) (*Response, error)
	// 根据查询条件获取物料类型列表
	GetMaterialTypes(ctx context.Context, in *Query, opts ...client.CallOption) (*MaterialTypesResp, error)
	// 根据ID获取指定的物料类型
	GetOneMaterialType(ctx context.Context, in *MaterialTypeIDReq, opts ...client.CallOption) (*MaterialType, error)
	// 添加物料
	AddMaterial(ctx context.Context, in *Material, opts ...client.CallOption) (*Response, error)
	// 移除物料
	DeleteMaterial(ctx context.Context, in *Material, opts ...client.CallOption) (*Response, error)
	// 更新物料
	UpdateMaterial(ctx context.Context, in *Material, opts ...client.CallOption) (*Response, error)
	// 根据查询条件获取物料信息
	GetMaterials(ctx context.Context, in *Query, opts ...client.CallOption) (*MaterialsResp, error)
	// 根据ID获取指定的物料类型
	GetOneMaterial(ctx context.Context, in *Material, opts ...client.CallOption) (*Material, error)
	//根据k,v获取对应的物料
	GetOneMaterialByParameters(ctx context.Context, in *QueryParameter, opts ...client.CallOption) (*Material, error)
}

type materialService struct {
	c    client.Client
	name string
}

func NewMaterialService(name string, c client.Client) MaterialService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.material"
	}
	return &materialService{
		c:    c,
		name: name,
	}
}

func (c *materialService) AddMaterialType(ctx context.Context, in *MaterialType, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MaterialService.AddMaterialType", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialService) DeleteMaterialType(ctx context.Context, in *MaterialTypeIDReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MaterialService.DeleteMaterialType", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialService) UpdateMaterialType(ctx context.Context, in *MaterialType, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MaterialService.UpdateMaterialType", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialService) GetMaterialTypes(ctx context.Context, in *Query, opts ...client.CallOption) (*MaterialTypesResp, error) {
	req := c.c.NewRequest(c.name, "MaterialService.GetMaterialTypes", in)
	out := new(MaterialTypesResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialService) GetOneMaterialType(ctx context.Context, in *MaterialTypeIDReq, opts ...client.CallOption) (*MaterialType, error) {
	req := c.c.NewRequest(c.name, "MaterialService.GetOneMaterialType", in)
	out := new(MaterialType)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialService) AddMaterial(ctx context.Context, in *Material, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MaterialService.AddMaterial", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialService) DeleteMaterial(ctx context.Context, in *Material, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MaterialService.DeleteMaterial", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialService) UpdateMaterial(ctx context.Context, in *Material, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MaterialService.UpdateMaterial", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialService) GetMaterials(ctx context.Context, in *Query, opts ...client.CallOption) (*MaterialsResp, error) {
	req := c.c.NewRequest(c.name, "MaterialService.GetMaterials", in)
	out := new(MaterialsResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialService) GetOneMaterial(ctx context.Context, in *Material, opts ...client.CallOption) (*Material, error) {
	req := c.c.NewRequest(c.name, "MaterialService.GetOneMaterial", in)
	out := new(Material)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialService) GetOneMaterialByParameters(ctx context.Context, in *QueryParameter, opts ...client.CallOption) (*Material, error) {
	req := c.c.NewRequest(c.name, "MaterialService.GetOneMaterialByParameters", in)
	out := new(Material)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MaterialService service

type MaterialServiceHandler interface {
	// 添加物料类型
	AddMaterialType(context.Context, *MaterialType, *Response) error
	// 移除物料类型
	DeleteMaterialType(context.Context, *MaterialTypeIDReq, *Response) error
	// 更新物料类型
	UpdateMaterialType(context.Context, *MaterialType, *Response) error
	// 根据查询条件获取物料类型列表
	GetMaterialTypes(context.Context, *Query, *MaterialTypesResp) error
	// 根据ID获取指定的物料类型
	GetOneMaterialType(context.Context, *MaterialTypeIDReq, *MaterialType) error
	// 添加物料
	AddMaterial(context.Context, *Material, *Response) error
	// 移除物料
	DeleteMaterial(context.Context, *Material, *Response) error
	// 更新物料
	UpdateMaterial(context.Context, *Material, *Response) error
	// 根据查询条件获取物料信息
	GetMaterials(context.Context, *Query, *MaterialsResp) error
	// 根据ID获取指定的物料类型
	GetOneMaterial(context.Context, *Material, *Material) error
	//根据k,v获取对应的物料
	GetOneMaterialByParameters(context.Context, *QueryParameter, *Material) error
}

func RegisterMaterialServiceHandler(s server.Server, hdlr MaterialServiceHandler, opts ...server.HandlerOption) error {
	type materialService interface {
		AddMaterialType(ctx context.Context, in *MaterialType, out *Response) error
		DeleteMaterialType(ctx context.Context, in *MaterialTypeIDReq, out *Response) error
		UpdateMaterialType(ctx context.Context, in *MaterialType, out *Response) error
		GetMaterialTypes(ctx context.Context, in *Query, out *MaterialTypesResp) error
		GetOneMaterialType(ctx context.Context, in *MaterialTypeIDReq, out *MaterialType) error
		AddMaterial(ctx context.Context, in *Material, out *Response) error
		DeleteMaterial(ctx context.Context, in *Material, out *Response) error
		UpdateMaterial(ctx context.Context, in *Material, out *Response) error
		GetMaterials(ctx context.Context, in *Query, out *MaterialsResp) error
		GetOneMaterial(ctx context.Context, in *Material, out *Material) error
		GetOneMaterialByParameters(ctx context.Context, in *QueryParameter, out *Material) error
	}
	type MaterialService struct {
		materialService
	}
	h := &materialServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MaterialService{h}, opts...))
}

type materialServiceHandler struct {
	MaterialServiceHandler
}

func (h *materialServiceHandler) AddMaterialType(ctx context.Context, in *MaterialType, out *Response) error {
	return h.MaterialServiceHandler.AddMaterialType(ctx, in, out)
}

func (h *materialServiceHandler) DeleteMaterialType(ctx context.Context, in *MaterialTypeIDReq, out *Response) error {
	return h.MaterialServiceHandler.DeleteMaterialType(ctx, in, out)
}

func (h *materialServiceHandler) UpdateMaterialType(ctx context.Context, in *MaterialType, out *Response) error {
	return h.MaterialServiceHandler.UpdateMaterialType(ctx, in, out)
}

func (h *materialServiceHandler) GetMaterialTypes(ctx context.Context, in *Query, out *MaterialTypesResp) error {
	return h.MaterialServiceHandler.GetMaterialTypes(ctx, in, out)
}

func (h *materialServiceHandler) GetOneMaterialType(ctx context.Context, in *MaterialTypeIDReq, out *MaterialType) error {
	return h.MaterialServiceHandler.GetOneMaterialType(ctx, in, out)
}

func (h *materialServiceHandler) AddMaterial(ctx context.Context, in *Material, out *Response) error {
	return h.MaterialServiceHandler.AddMaterial(ctx, in, out)
}

func (h *materialServiceHandler) DeleteMaterial(ctx context.Context, in *Material, out *Response) error {
	return h.MaterialServiceHandler.DeleteMaterial(ctx, in, out)
}

func (h *materialServiceHandler) UpdateMaterial(ctx context.Context, in *Material, out *Response) error {
	return h.MaterialServiceHandler.UpdateMaterial(ctx, in, out)
}

func (h *materialServiceHandler) GetMaterials(ctx context.Context, in *Query, out *MaterialsResp) error {
	return h.MaterialServiceHandler.GetMaterials(ctx, in, out)
}

func (h *materialServiceHandler) GetOneMaterial(ctx context.Context, in *Material, out *Material) error {
	return h.MaterialServiceHandler.GetOneMaterial(ctx, in, out)
}

func (h *materialServiceHandler) GetOneMaterialByParameters(ctx context.Context, in *QueryParameter, out *Material) error {
	return h.MaterialServiceHandler.GetOneMaterialByParameters(ctx, in, out)
}
