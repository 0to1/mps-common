// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/route/route.proto

package go_micro_srv_route

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Route service

type RouteService interface {
	//GetRouteFromStnToStn
	GetRouteFromStnToStn(ctx context.Context, in *GetRouteRequest, opts ...client.CallOption) (*GetRouteResponse, error)
	//GetRouteFromPntToPnt
	GetRouteFromPntToPnt(ctx context.Context, in *GetRouteRequest, opts ...client.CallOption) (*GetRouteResponse, error)
	//GetStationListFromPnt
	GetStationListFromPnt(ctx context.Context, in *GetStationListRequest, opts ...client.CallOption) (*GetStationListResponse, error)
	//GetStationListFromStn
	GetStationListFromStn(ctx context.Context, in *GetStationListRequest, opts ...client.CallOption) (*GetStationListResponse, error)
	//更新地图//
	UpdateRouteSearch(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type routeService struct {
	c    client.Client
	name string
}

func NewRouteService(name string, c client.Client) RouteService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.route"
	}
	return &routeService{
		c:    c,
		name: name,
	}
}

func (c *routeService) GetRouteFromStnToStn(ctx context.Context, in *GetRouteRequest, opts ...client.CallOption) (*GetRouteResponse, error) {
	req := c.c.NewRequest(c.name, "Route.GetRouteFromStnToStn", in)
	out := new(GetRouteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeService) GetRouteFromPntToPnt(ctx context.Context, in *GetRouteRequest, opts ...client.CallOption) (*GetRouteResponse, error) {
	req := c.c.NewRequest(c.name, "Route.GetRouteFromPntToPnt", in)
	out := new(GetRouteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeService) GetStationListFromPnt(ctx context.Context, in *GetStationListRequest, opts ...client.CallOption) (*GetStationListResponse, error) {
	req := c.c.NewRequest(c.name, "Route.GetStationListFromPnt", in)
	out := new(GetStationListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeService) GetStationListFromStn(ctx context.Context, in *GetStationListRequest, opts ...client.CallOption) (*GetStationListResponse, error) {
	req := c.c.NewRequest(c.name, "Route.GetStationListFromStn", in)
	out := new(GetStationListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeService) UpdateRouteSearch(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Route.UpdateRouteSearch", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Route service

type RouteHandler interface {
	//GetRouteFromStnToStn
	GetRouteFromStnToStn(context.Context, *GetRouteRequest, *GetRouteResponse) error
	//GetRouteFromPntToPnt
	GetRouteFromPntToPnt(context.Context, *GetRouteRequest, *GetRouteResponse) error
	//GetStationListFromPnt
	GetStationListFromPnt(context.Context, *GetStationListRequest, *GetStationListResponse) error
	//GetStationListFromStn
	GetStationListFromStn(context.Context, *GetStationListRequest, *GetStationListResponse) error
	//更新地图//
	UpdateRouteSearch(context.Context, *Request, *Response) error
}

func RegisterRouteHandler(s server.Server, hdlr RouteHandler, opts ...server.HandlerOption) error {
	type route interface {
		GetRouteFromStnToStn(ctx context.Context, in *GetRouteRequest, out *GetRouteResponse) error
		GetRouteFromPntToPnt(ctx context.Context, in *GetRouteRequest, out *GetRouteResponse) error
		GetStationListFromPnt(ctx context.Context, in *GetStationListRequest, out *GetStationListResponse) error
		GetStationListFromStn(ctx context.Context, in *GetStationListRequest, out *GetStationListResponse) error
		UpdateRouteSearch(ctx context.Context, in *Request, out *Response) error
	}
	type Route struct {
		route
	}
	h := &routeHandler{hdlr}
	return s.Handle(s.NewHandler(&Route{h}, opts...))
}

type routeHandler struct {
	RouteHandler
}

func (h *routeHandler) GetRouteFromStnToStn(ctx context.Context, in *GetRouteRequest, out *GetRouteResponse) error {
	return h.RouteHandler.GetRouteFromStnToStn(ctx, in, out)
}

func (h *routeHandler) GetRouteFromPntToPnt(ctx context.Context, in *GetRouteRequest, out *GetRouteResponse) error {
	return h.RouteHandler.GetRouteFromPntToPnt(ctx, in, out)
}

func (h *routeHandler) GetStationListFromPnt(ctx context.Context, in *GetStationListRequest, out *GetStationListResponse) error {
	return h.RouteHandler.GetStationListFromPnt(ctx, in, out)
}

func (h *routeHandler) GetStationListFromStn(ctx context.Context, in *GetStationListRequest, out *GetStationListResponse) error {
	return h.RouteHandler.GetStationListFromStn(ctx, in, out)
}

func (h *routeHandler) UpdateRouteSearch(ctx context.Context, in *Request, out *Response) error {
	return h.RouteHandler.UpdateRouteSearch(ctx, in, out)
}
