// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/log/log.proto

package go_micro_srv_log

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Log service

type LogService interface {
	UpdateConfig(ctx context.Context, in *CfgReq, opts ...client.CallOption) (*Response, error)
	GetConfig(ctx context.Context, in *Request, opts ...client.CallOption) (*CfgReq, error)
	GetLogs(ctx context.Context, in *Query, opts ...client.CallOption) (*LogContents, error)
	WriteLog(ctx context.Context, in *LogContent, opts ...client.CallOption) (*Response, error)
}

type logService struct {
	c    client.Client
	name string
}

func NewLogService(name string, c client.Client) LogService {
	return &logService{
		c:    c,
		name: name,
	}
}

func (c *logService) UpdateConfig(ctx context.Context, in *CfgReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Log.UpdateConfig", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logService) GetConfig(ctx context.Context, in *Request, opts ...client.CallOption) (*CfgReq, error) {
	req := c.c.NewRequest(c.name, "Log.GetConfig", in)
	out := new(CfgReq)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logService) GetLogs(ctx context.Context, in *Query, opts ...client.CallOption) (*LogContents, error) {
	req := c.c.NewRequest(c.name, "Log.GetLogs", in)
	out := new(LogContents)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logService) WriteLog(ctx context.Context, in *LogContent, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Log.WriteLog", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Log service

type LogHandler interface {
	UpdateConfig(context.Context, *CfgReq, *Response) error
	GetConfig(context.Context, *Request, *CfgReq) error
	GetLogs(context.Context, *Query, *LogContents) error
	WriteLog(context.Context, *LogContent, *Response) error
}

func RegisterLogHandler(s server.Server, hdlr LogHandler, opts ...server.HandlerOption) error {
	type log interface {
		UpdateConfig(ctx context.Context, in *CfgReq, out *Response) error
		GetConfig(ctx context.Context, in *Request, out *CfgReq) error
		GetLogs(ctx context.Context, in *Query, out *LogContents) error
		WriteLog(ctx context.Context, in *LogContent, out *Response) error
	}
	type Log struct {
		log
	}
	h := &logHandler{hdlr}
	return s.Handle(s.NewHandler(&Log{h}, opts...))
}

type logHandler struct {
	LogHandler
}

func (h *logHandler) UpdateConfig(ctx context.Context, in *CfgReq, out *Response) error {
	return h.LogHandler.UpdateConfig(ctx, in, out)
}

func (h *logHandler) GetConfig(ctx context.Context, in *Request, out *CfgReq) error {
	return h.LogHandler.GetConfig(ctx, in, out)
}

func (h *logHandler) GetLogs(ctx context.Context, in *Query, out *LogContents) error {
	return h.LogHandler.GetLogs(ctx, in, out)
}

func (h *logHandler) WriteLog(ctx context.Context, in *LogContent, out *Response) error {
	return h.LogHandler.WriteLog(ctx, in, out)
}
