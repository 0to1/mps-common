// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/devices/devices.proto

package go_micro_service_devices

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for DevicesService service

func NewDevicesServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DevicesService service

type DevicesService interface {
	GetDevice(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Device, error)
	GetDevices(ctx context.Context, in *DeviceQuery, opts ...client.CallOption) (*Devices, error)
	AddDevice(ctx context.Context, in *DeviceRequest, opts ...client.CallOption) (*Response, error)
	DeleteDevice(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error)
	ConfigDevice(ctx context.Context, in *DeviceRequest, opts ...client.CallOption) (*Response, error)
	StartDevice(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error)
	StopDevice(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error)
}

type devicesService struct {
	c    client.Client
	name string
}

func NewDevicesService(name string, c client.Client) DevicesService {
	return &devicesService{
		c:    c,
		name: name,
	}
}

func (c *devicesService) GetDevice(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Device, error) {
	req := c.c.NewRequest(c.name, "DevicesService.GetDevice", in)
	out := new(Device)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesService) GetDevices(ctx context.Context, in *DeviceQuery, opts ...client.CallOption) (*Devices, error) {
	req := c.c.NewRequest(c.name, "DevicesService.GetDevices", in)
	out := new(Devices)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesService) AddDevice(ctx context.Context, in *DeviceRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "DevicesService.AddDevice", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesService) DeleteDevice(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "DevicesService.DeleteDevice", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesService) ConfigDevice(ctx context.Context, in *DeviceRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "DevicesService.ConfigDevice", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesService) StartDevice(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "DevicesService.StartDevice", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesService) StopDevice(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "DevicesService.StopDevice", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DevicesService service

type DevicesServiceHandler interface {
	GetDevice(context.Context, *IDReq, *Device) error
	GetDevices(context.Context, *DeviceQuery, *Devices) error
	AddDevice(context.Context, *DeviceRequest, *Response) error
	DeleteDevice(context.Context, *IDReq, *Response) error
	ConfigDevice(context.Context, *DeviceRequest, *Response) error
	StartDevice(context.Context, *IDReq, *Response) error
	StopDevice(context.Context, *IDReq, *Response) error
}

func RegisterDevicesServiceHandler(s server.Server, hdlr DevicesServiceHandler, opts ...server.HandlerOption) error {
	type devicesService interface {
		GetDevice(ctx context.Context, in *IDReq, out *Device) error
		GetDevices(ctx context.Context, in *DeviceQuery, out *Devices) error
		AddDevice(ctx context.Context, in *DeviceRequest, out *Response) error
		DeleteDevice(ctx context.Context, in *IDReq, out *Response) error
		ConfigDevice(ctx context.Context, in *DeviceRequest, out *Response) error
		StartDevice(ctx context.Context, in *IDReq, out *Response) error
		StopDevice(ctx context.Context, in *IDReq, out *Response) error
	}
	type DevicesService struct {
		devicesService
	}
	h := &devicesServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DevicesService{h}, opts...))
}

type devicesServiceHandler struct {
	DevicesServiceHandler
}

func (h *devicesServiceHandler) GetDevice(ctx context.Context, in *IDReq, out *Device) error {
	return h.DevicesServiceHandler.GetDevice(ctx, in, out)
}

func (h *devicesServiceHandler) GetDevices(ctx context.Context, in *DeviceQuery, out *Devices) error {
	return h.DevicesServiceHandler.GetDevices(ctx, in, out)
}

func (h *devicesServiceHandler) AddDevice(ctx context.Context, in *DeviceRequest, out *Response) error {
	return h.DevicesServiceHandler.AddDevice(ctx, in, out)
}

func (h *devicesServiceHandler) DeleteDevice(ctx context.Context, in *IDReq, out *Response) error {
	return h.DevicesServiceHandler.DeleteDevice(ctx, in, out)
}

func (h *devicesServiceHandler) ConfigDevice(ctx context.Context, in *DeviceRequest, out *Response) error {
	return h.DevicesServiceHandler.ConfigDevice(ctx, in, out)
}

func (h *devicesServiceHandler) StartDevice(ctx context.Context, in *IDReq, out *Response) error {
	return h.DevicesServiceHandler.StartDevice(ctx, in, out)
}

func (h *devicesServiceHandler) StopDevice(ctx context.Context, in *IDReq, out *Response) error {
	return h.DevicesServiceHandler.StopDevice(ctx, in, out)
}
