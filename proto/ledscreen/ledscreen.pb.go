// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: proto/ledscreen/ledscreen.proto

// import "google/protobuf/wrappers.proto";

package go_micro_srv_ledscreen

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ContentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 导引屏编号
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 显示区域编号
	AreaIndex uint32 `protobuf:"varint,2,opt,name=areaIndex,proto3" json:"areaIndex,omitempty"`
	// 待显示的内容
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	// 是否持久化保存到LED屏
	Persistence bool `protobuf:"varint,4,opt,name=persistence,proto3" json:"persistence,omitempty"`
}

func (x *ContentReq) Reset() {
	*x = ContentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ledscreen_ledscreen_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentReq) ProtoMessage() {}

func (x *ContentReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ledscreen_ledscreen_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentReq.ProtoReflect.Descriptor instead.
func (*ContentReq) Descriptor() ([]byte, []int) {
	return file_proto_ledscreen_ledscreen_proto_rawDescGZIP(), []int{0}
}

func (x *ContentReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ContentReq) GetAreaIndex() uint32 {
	if x != nil {
		return x.AreaIndex
	}
	return 0
}

func (x *ContentReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ContentReq) GetPersistence() bool {
	if x != nil {
		return x.Persistence
	}
	return false
}

type Area struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 区域编号
	AreaIndex uint32 `protobuf:"varint,1,opt,name=areaIndex,proto3" json:"areaIndex,omitempty"`
	// 区域显示的内容
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *Area) Reset() {
	*x = Area{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ledscreen_ledscreen_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Area) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Area) ProtoMessage() {}

func (x *Area) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ledscreen_ledscreen_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Area.ProtoReflect.Descriptor instead.
func (*Area) Descriptor() ([]byte, []int) {
	return file_proto_ledscreen_ledscreen_proto_rawDescGZIP(), []int{1}
}

func (x *Area) GetAreaIndex() uint32 {
	if x != nil {
		return x.AreaIndex
	}
	return 0
}

func (x *Area) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type LedScreen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Ip   string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Port int32  `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// 导引屏区域，当前只包含区域内容
	Areas       []*Area `protobuf:"bytes,5,rep,name=areas,proto3" json:"areas,omitempty"`
	Reserve     string  `protobuf:"bytes,8,opt,name=reserve,proto3" json:"reserve,omitempty"`
	Description string  `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *LedScreen) Reset() {
	*x = LedScreen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ledscreen_ledscreen_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedScreen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedScreen) ProtoMessage() {}

func (x *LedScreen) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ledscreen_ledscreen_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedScreen.ProtoReflect.Descriptor instead.
func (*LedScreen) Descriptor() ([]byte, []int) {
	return file_proto_ledscreen_ledscreen_proto_rawDescGZIP(), []int{2}
}

func (x *LedScreen) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LedScreen) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LedScreen) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *LedScreen) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *LedScreen) GetAreas() []*Area {
	if x != nil {
		return x.Areas
	}
	return nil
}

func (x *LedScreen) GetReserve() string {
	if x != nil {
		return x.Reserve
	}
	return ""
}

func (x *LedScreen) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type IDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IDReq) Reset() {
	*x = IDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ledscreen_ledscreen_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDReq) ProtoMessage() {}

func (x *IDReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ledscreen_ledscreen_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDReq.ProtoReflect.Descriptor instead.
func (*IDReq) Descriptor() ([]byte, []int) {
	return file_proto_ledscreen_ledscreen_proto_rawDescGZIP(), []int{3}
}

func (x *IDReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOk    bool   `protobuf:"varint,1,opt,name=isOk,proto3" json:"isOk,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ledscreen_ledscreen_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ledscreen_ledscreen_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_proto_ledscreen_ledscreen_proto_rawDescGZIP(), []int{4}
}

func (x *Response) GetIsOk() bool {
	if x != nil {
		return x.IsOk
	}
	return false
}

func (x *Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type LedScreens struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LedScreens []*LedScreen `protobuf:"bytes,1,rep,name=ledScreens,proto3" json:"ledScreens,omitempty"`
	Totalpages uint32       `protobuf:"varint,2,opt,name=totalpages,proto3" json:"totalpages,omitempty"`
	Currpages  uint32       `protobuf:"varint,3,opt,name=currpages,proto3" json:"currpages,omitempty"`
	Totals     uint32       `protobuf:"varint,4,opt,name=totals,proto3" json:"totals,omitempty"`
}

func (x *LedScreens) Reset() {
	*x = LedScreens{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ledscreen_ledscreen_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedScreens) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedScreens) ProtoMessage() {}

func (x *LedScreens) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ledscreen_ledscreen_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedScreens.ProtoReflect.Descriptor instead.
func (*LedScreens) Descriptor() ([]byte, []int) {
	return file_proto_ledscreen_ledscreen_proto_rawDescGZIP(), []int{5}
}

func (x *LedScreens) GetLedScreens() []*LedScreen {
	if x != nil {
		return x.LedScreens
	}
	return nil
}

func (x *LedScreens) GetTotalpages() uint32 {
	if x != nil {
		return x.Totalpages
	}
	return 0
}

func (x *LedScreens) GetCurrpages() uint32 {
	if x != nil {
		return x.Currpages
	}
	return 0
}

func (x *LedScreens) GetTotals() uint32 {
	if x != nil {
		return x.Totals
	}
	return 0
}

type LedScreenFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	And    []*LedScreenFilter `protobuf:"bytes,1,rep,name=and,proto3" json:"and,omitempty"`
	Or     []*LedScreenFilter `protobuf:"bytes,2,rep,name=or,proto3" json:"or,omitempty"`
	IdIn   []uint32           `protobuf:"varint,3,rep,packed,name=idIn,proto3" json:"idIn,omitempty"`
	NameIn []string           `protobuf:"bytes,4,rep,name=nameIn,proto3" json:"nameIn,omitempty"`
}

func (x *LedScreenFilter) Reset() {
	*x = LedScreenFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ledscreen_ledscreen_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedScreenFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedScreenFilter) ProtoMessage() {}

func (x *LedScreenFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ledscreen_ledscreen_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedScreenFilter.ProtoReflect.Descriptor instead.
func (*LedScreenFilter) Descriptor() ([]byte, []int) {
	return file_proto_ledscreen_ledscreen_proto_rawDescGZIP(), []int{6}
}

func (x *LedScreenFilter) GetAnd() []*LedScreenFilter {
	if x != nil {
		return x.And
	}
	return nil
}

func (x *LedScreenFilter) GetOr() []*LedScreenFilter {
	if x != nil {
		return x.Or
	}
	return nil
}

func (x *LedScreenFilter) GetIdIn() []uint32 {
	if x != nil {
		return x.IdIn
	}
	return nil
}

func (x *LedScreenFilter) GetNameIn() []string {
	if x != nil {
		return x.NameIn
	}
	return nil
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   uint32           `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  uint32           `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Page    uint32           `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PerPage uint32           `protobuf:"varint,4,opt,name=perPage,proto3" json:"perPage,omitempty"`
	Filter  *LedScreenFilter `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ledscreen_ledscreen_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ledscreen_ledscreen_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_proto_ledscreen_ledscreen_proto_rawDescGZIP(), []int{7}
}

func (x *Query) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Query) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Query) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Query) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *Query) GetFilter() *LedScreenFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

var File_proto_ledscreen_ledscreen_proto protoreflect.FileDescriptor

var file_proto_ledscreen_ledscreen_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x65, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x2f, 0x6c, 0x65, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x16, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e,
	0x6c, 0x65, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x22, 0x76, 0x0a, 0x0a, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x61, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x72, 0x65, 0x61,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0x3e, 0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x65,
	0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x72,
	0x65, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0xc3, 0x01, 0x0a, 0x09, 0x4c, 0x65, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x61, 0x72, 0x65, 0x61, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6c, 0x65, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e,
	0x41, 0x72, 0x65, 0x61, 0x52, 0x05, 0x61, 0x72, 0x65, 0x61, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x17, 0x0a, 0x05, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x38, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x73, 0x4f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6b,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x0a, 0x4c,
	0x65, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x6c, 0x65, 0x64,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6c, 0x65, 0x64,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x4c, 0x65, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x52, 0x0a, 0x6c, 0x65, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x75, 0x72, 0x72, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x63, 0x75, 0x72, 0x72, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x0f, 0x4c, 0x65, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x03, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x6c, 0x65, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x4c, 0x65, 0x64,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x03, 0x61, 0x6e,
	0x64, 0x12, 0x37, 0x0a, 0x02, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6c, 0x65, 0x64,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x4c, 0x65, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x02, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x64,
	0x49, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x69, 0x64, 0x49, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x22, 0xa4, 0x01, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6c, 0x65, 0x64, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x4c, 0x65, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x32, 0xae, 0x05,
	0x0a, 0x09, 0x4c, 0x65, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x4e, 0x0a, 0x04, 0x53,
	0x68, 0x6f, 0x77, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x6c, 0x65, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6c, 0x65, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x05, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x6c, 0x65, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x6c, 0x65, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0f, 0x54, 0x69, 0x6d, 0x65, 0x43,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6c, 0x65, 0x64, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x67, 0x6f, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6c, 0x65, 0x64, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a,
	0x0c, 0x41, 0x64, 0x64, 0x4c, 0x65, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x21, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6c, 0x65, 0x64,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x4c, 0x65, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x1a, 0x20, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e,
	0x6c, 0x65, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65,
	0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6c, 0x65, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6c, 0x65, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x21, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6c, 0x65, 0x64,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x4c, 0x65, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x1a, 0x20, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e,
	0x6c, 0x65, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x64, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x6c, 0x65, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x6c, 0x65, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x4c, 0x65, 0x64,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4c,
	0x65, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6c, 0x65, 0x64, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x6c, 0x65, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x2e, 0x4c, 0x65, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x22, 0x00, 0x42, 0x28,
	0x5a, 0x26, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x65, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x3b, 0x67, 0x6f, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5f, 0x73, 0x72, 0x76, 0x5f, 0x6c,
	0x65, 0x64, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_ledscreen_ledscreen_proto_rawDescOnce sync.Once
	file_proto_ledscreen_ledscreen_proto_rawDescData = file_proto_ledscreen_ledscreen_proto_rawDesc
)

func file_proto_ledscreen_ledscreen_proto_rawDescGZIP() []byte {
	file_proto_ledscreen_ledscreen_proto_rawDescOnce.Do(func() {
		file_proto_ledscreen_ledscreen_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_ledscreen_ledscreen_proto_rawDescData)
	})
	return file_proto_ledscreen_ledscreen_proto_rawDescData
}

var file_proto_ledscreen_ledscreen_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_proto_ledscreen_ledscreen_proto_goTypes = []interface{}{
	(*ContentReq)(nil),      // 0: go.micro.srv.ledscreen.ContentReq
	(*Area)(nil),            // 1: go.micro.srv.ledscreen.Area
	(*LedScreen)(nil),       // 2: go.micro.srv.ledscreen.LedScreen
	(*IDReq)(nil),           // 3: go.micro.srv.ledscreen.IDReq
	(*Response)(nil),        // 4: go.micro.srv.ledscreen.Response
	(*LedScreens)(nil),      // 5: go.micro.srv.ledscreen.LedScreens
	(*LedScreenFilter)(nil), // 6: go.micro.srv.ledscreen.LedScreenFilter
	(*Query)(nil),           // 7: go.micro.srv.ledscreen.Query
}
var file_proto_ledscreen_ledscreen_proto_depIdxs = []int32{
	1,  // 0: go.micro.srv.ledscreen.LedScreen.areas:type_name -> go.micro.srv.ledscreen.Area
	2,  // 1: go.micro.srv.ledscreen.LedScreens.ledScreens:type_name -> go.micro.srv.ledscreen.LedScreen
	6,  // 2: go.micro.srv.ledscreen.LedScreenFilter.and:type_name -> go.micro.srv.ledscreen.LedScreenFilter
	6,  // 3: go.micro.srv.ledscreen.LedScreenFilter.or:type_name -> go.micro.srv.ledscreen.LedScreenFilter
	6,  // 4: go.micro.srv.ledscreen.Query.filter:type_name -> go.micro.srv.ledscreen.LedScreenFilter
	0,  // 5: go.micro.srv.ledscreen.Ledscreen.Show:input_type -> go.micro.srv.ledscreen.ContentReq
	3,  // 6: go.micro.srv.ledscreen.Ledscreen.Reset:input_type -> go.micro.srv.ledscreen.IDReq
	3,  // 7: go.micro.srv.ledscreen.Ledscreen.TimeCalibration:input_type -> go.micro.srv.ledscreen.IDReq
	2,  // 8: go.micro.srv.ledscreen.Ledscreen.AddLedScreen:input_type -> go.micro.srv.ledscreen.LedScreen
	3,  // 9: go.micro.srv.ledscreen.Ledscreen.DeleteLedScreen:input_type -> go.micro.srv.ledscreen.IDReq
	2,  // 10: go.micro.srv.ledscreen.Ledscreen.UpdateLedScreen:input_type -> go.micro.srv.ledscreen.LedScreen
	3,  // 11: go.micro.srv.ledscreen.Ledscreen.GetLedScreen:input_type -> go.micro.srv.ledscreen.IDReq
	7,  // 12: go.micro.srv.ledscreen.Ledscreen.GetLedScreens:input_type -> go.micro.srv.ledscreen.Query
	4,  // 13: go.micro.srv.ledscreen.Ledscreen.Show:output_type -> go.micro.srv.ledscreen.Response
	4,  // 14: go.micro.srv.ledscreen.Ledscreen.Reset:output_type -> go.micro.srv.ledscreen.Response
	4,  // 15: go.micro.srv.ledscreen.Ledscreen.TimeCalibration:output_type -> go.micro.srv.ledscreen.Response
	4,  // 16: go.micro.srv.ledscreen.Ledscreen.AddLedScreen:output_type -> go.micro.srv.ledscreen.Response
	4,  // 17: go.micro.srv.ledscreen.Ledscreen.DeleteLedScreen:output_type -> go.micro.srv.ledscreen.Response
	4,  // 18: go.micro.srv.ledscreen.Ledscreen.UpdateLedScreen:output_type -> go.micro.srv.ledscreen.Response
	2,  // 19: go.micro.srv.ledscreen.Ledscreen.GetLedScreen:output_type -> go.micro.srv.ledscreen.LedScreen
	5,  // 20: go.micro.srv.ledscreen.Ledscreen.GetLedScreens:output_type -> go.micro.srv.ledscreen.LedScreens
	13, // [13:21] is the sub-list for method output_type
	5,  // [5:13] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_proto_ledscreen_ledscreen_proto_init() }
func file_proto_ledscreen_ledscreen_proto_init() {
	if File_proto_ledscreen_ledscreen_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_ledscreen_ledscreen_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ledscreen_ledscreen_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Area); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ledscreen_ledscreen_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LedScreen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ledscreen_ledscreen_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ledscreen_ledscreen_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ledscreen_ledscreen_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LedScreens); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ledscreen_ledscreen_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LedScreenFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ledscreen_ledscreen_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_ledscreen_ledscreen_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_ledscreen_ledscreen_proto_goTypes,
		DependencyIndexes: file_proto_ledscreen_ledscreen_proto_depIdxs,
		MessageInfos:      file_proto_ledscreen_ledscreen_proto_msgTypes,
	}.Build()
	File_proto_ledscreen_ledscreen_proto = out.File
	file_proto_ledscreen_ledscreen_proto_rawDesc = nil
	file_proto_ledscreen_ledscreen_proto_goTypes = nil
	file_proto_ledscreen_ledscreen_proto_depIdxs = nil
}
