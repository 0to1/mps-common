// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/ledscreen/ledscreen.proto

package go_micro_srv_ledscreen

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Ledscreen service

func NewLedscreenEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Ledscreen service

type LedscreenService interface {
	//显示相应区域的内容
	Show(ctx context.Context, in *ContentReq, opts ...client.CallOption) (*Response, error)
	//根据设备id，复位显示屏
	Reset(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error)
	//根据设备id，校准时间
	TimeCalibration(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error)
	// 添加设备
	AddLedScreen(ctx context.Context, in *LedScreen, opts ...client.CallOption) (*Response, error)
	// 删除设备
	DeleteLedScreen(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error)
	// 修改相应设备参数
	UpdateLedScreen(ctx context.Context, in *LedScreen, opts ...client.CallOption) (*Response, error)
	//根据设备id,获取设备
	GetLedScreen(ctx context.Context, in *IDReq, opts ...client.CallOption) (*LedScreen, error)
	//返回所有设备
	GetLedScreens(ctx context.Context, in *Query, opts ...client.CallOption) (*LedScreens, error)
}

type ledscreenService struct {
	c    client.Client
	name string
}

func NewLedscreenService(name string, c client.Client) LedscreenService {
	return &ledscreenService{
		c:    c,
		name: name,
	}
}

func (c *ledscreenService) Show(ctx context.Context, in *ContentReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Ledscreen.Show", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledscreenService) Reset(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Ledscreen.Reset", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledscreenService) TimeCalibration(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Ledscreen.TimeCalibration", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledscreenService) AddLedScreen(ctx context.Context, in *LedScreen, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Ledscreen.AddLedScreen", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledscreenService) DeleteLedScreen(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Ledscreen.DeleteLedScreen", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledscreenService) UpdateLedScreen(ctx context.Context, in *LedScreen, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Ledscreen.UpdateLedScreen", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledscreenService) GetLedScreen(ctx context.Context, in *IDReq, opts ...client.CallOption) (*LedScreen, error) {
	req := c.c.NewRequest(c.name, "Ledscreen.GetLedScreen", in)
	out := new(LedScreen)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledscreenService) GetLedScreens(ctx context.Context, in *Query, opts ...client.CallOption) (*LedScreens, error) {
	req := c.c.NewRequest(c.name, "Ledscreen.GetLedScreens", in)
	out := new(LedScreens)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Ledscreen service

type LedscreenHandler interface {
	//显示相应区域的内容
	Show(context.Context, *ContentReq, *Response) error
	//根据设备id，复位显示屏
	Reset(context.Context, *IDReq, *Response) error
	//根据设备id，校准时间
	TimeCalibration(context.Context, *IDReq, *Response) error
	// 添加设备
	AddLedScreen(context.Context, *LedScreen, *Response) error
	// 删除设备
	DeleteLedScreen(context.Context, *IDReq, *Response) error
	// 修改相应设备参数
	UpdateLedScreen(context.Context, *LedScreen, *Response) error
	//根据设备id,获取设备
	GetLedScreen(context.Context, *IDReq, *LedScreen) error
	//返回所有设备
	GetLedScreens(context.Context, *Query, *LedScreens) error
}

func RegisterLedscreenHandler(s server.Server, hdlr LedscreenHandler, opts ...server.HandlerOption) error {
	type ledscreen interface {
		Show(ctx context.Context, in *ContentReq, out *Response) error
		Reset(ctx context.Context, in *IDReq, out *Response) error
		TimeCalibration(ctx context.Context, in *IDReq, out *Response) error
		AddLedScreen(ctx context.Context, in *LedScreen, out *Response) error
		DeleteLedScreen(ctx context.Context, in *IDReq, out *Response) error
		UpdateLedScreen(ctx context.Context, in *LedScreen, out *Response) error
		GetLedScreen(ctx context.Context, in *IDReq, out *LedScreen) error
		GetLedScreens(ctx context.Context, in *Query, out *LedScreens) error
	}
	type Ledscreen struct {
		ledscreen
	}
	h := &ledscreenHandler{hdlr}
	return s.Handle(s.NewHandler(&Ledscreen{h}, opts...))
}

type ledscreenHandler struct {
	LedscreenHandler
}

func (h *ledscreenHandler) Show(ctx context.Context, in *ContentReq, out *Response) error {
	return h.LedscreenHandler.Show(ctx, in, out)
}

func (h *ledscreenHandler) Reset(ctx context.Context, in *IDReq, out *Response) error {
	return h.LedscreenHandler.Reset(ctx, in, out)
}

func (h *ledscreenHandler) TimeCalibration(ctx context.Context, in *IDReq, out *Response) error {
	return h.LedscreenHandler.TimeCalibration(ctx, in, out)
}

func (h *ledscreenHandler) AddLedScreen(ctx context.Context, in *LedScreen, out *Response) error {
	return h.LedscreenHandler.AddLedScreen(ctx, in, out)
}

func (h *ledscreenHandler) DeleteLedScreen(ctx context.Context, in *IDReq, out *Response) error {
	return h.LedscreenHandler.DeleteLedScreen(ctx, in, out)
}

func (h *ledscreenHandler) UpdateLedScreen(ctx context.Context, in *LedScreen, out *Response) error {
	return h.LedscreenHandler.UpdateLedScreen(ctx, in, out)
}

func (h *ledscreenHandler) GetLedScreen(ctx context.Context, in *IDReq, out *LedScreen) error {
	return h.LedscreenHandler.GetLedScreen(ctx, in, out)
}

func (h *ledscreenHandler) GetLedScreens(ctx context.Context, in *Query, out *LedScreens) error {
	return h.LedscreenHandler.GetLedScreens(ctx, in, out)
}
