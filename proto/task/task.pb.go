// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: proto/task/task.proto

// import "google/protobuf/any.proto";
// import "google/protobuf/timestamp.proto";

package go_micro_srv_task

import (
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 无参数
type Nop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Nop) Reset() {
	*x = Nop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nop) ProtoMessage() {}

func (x *Nop) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nop.ProtoReflect.Descriptor instead.
func (*Nop) Descriptor() ([]byte, []int) {
	return file_proto_task_task_proto_rawDescGZIP(), []int{0}
}

type SystemGoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScriptIndex uint32 `protobuf:"varint,1,opt,name=scriptIndex,proto3" json:"scriptIndex,omitempty"`
}

func (x *SystemGoReq) Reset() {
	*x = SystemGoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_task_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemGoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemGoReq) ProtoMessage() {}

func (x *SystemGoReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_task_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemGoReq.ProtoReflect.Descriptor instead.
func (*SystemGoReq) Descriptor() ([]byte, []int) {
	return file_proto_task_task_proto_rawDescGZIP(), []int{1}
}

func (x *SystemGoReq) GetScriptIndex() uint32 {
	if x != nil {
		return x.ScriptIndex
	}
	return 0
}

type GPQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page    uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PerPage uint32 `protobuf:"varint,2,opt,name=perPage,proto3" json:"perPage,omitempty"`
}

func (x *GPQuery) Reset() {
	*x = GPQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_task_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPQuery) ProtoMessage() {}

func (x *GPQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_task_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPQuery.ProtoReflect.Descriptor instead.
func (*GPQuery) Descriptor() ([]byte, []int) {
	return file_proto_task_task_proto_rawDescGZIP(), []int{2}
}

func (x *GPQuery) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GPQuery) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type GPKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *GPKey) Reset() {
	*x = GPKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_task_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPKey) ProtoMessage() {}

func (x *GPKey) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_task_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPKey.ProtoReflect.Descriptor instead.
func (*GPKey) Descriptor() ([]byte, []int) {
	return file_proto_task_task_proto_rawDescGZIP(), []int{3}
}

func (x *GPKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type GpParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Key         string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value       string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *GpParameter) Reset() {
	*x = GpParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_task_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpParameter) ProtoMessage() {}

func (x *GpParameter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_task_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpParameter.ProtoReflect.Descriptor instead.
func (*GpParameter) Descriptor() ([]byte, []int) {
	return file_proto_task_task_proto_rawDescGZIP(), []int{4}
}

func (x *GpParameter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GpParameter) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GpParameter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *GpParameter) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type GpParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount uint32         `protobuf:"varint,1,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	Params     []*GpParameter `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *GpParameters) Reset() {
	*x = GpParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_task_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpParameters) ProtoMessage() {}

func (x *GpParameters) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_task_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpParameters.ProtoReflect.Descriptor instead.
func (*GpParameters) Descriptor() ([]byte, []int) {
	return file_proto_task_task_proto_rawDescGZIP(), []int{5}
}

func (x *GpParameters) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GpParameters) GetParams() []*GpParameter {
	if x != nil {
		return x.Params
	}
	return nil
}

type NewTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID      uint32       `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Priority    uint32       `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	ScriptIndex uint32       `protobuf:"varint,3,opt,name=scriptIndex,proto3" json:"scriptIndex,omitempty"`
	Parameters  []*Parameter `protobuf:"bytes,4,rep,name=parameters,proto3" json:"parameters,omitempty"`
	Description string       `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *NewTaskReq) Reset() {
	*x = NewTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_task_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTaskReq) ProtoMessage() {}

func (x *NewTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_task_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTaskReq.ProtoReflect.Descriptor instead.
func (*NewTaskReq) Descriptor() ([]byte, []int) {
	return file_proto_task_task_proto_rawDescGZIP(), []int{6}
}

func (x *NewTaskReq) GetTaskID() uint32 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *NewTaskReq) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *NewTaskReq) GetScriptIndex() uint32 {
	if x != nil {
		return x.ScriptIndex
	}
	return 0
}

func (x *NewTaskReq) GetParameters() []*Parameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *NewTaskReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type NewTasksReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*NewTaskReq `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *NewTasksReq) Reset() {
	*x = NewTasksReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_task_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewTasksReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTasksReq) ProtoMessage() {}

func (x *NewTasksReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_task_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTasksReq.ProtoReflect.Descriptor instead.
func (*NewTasksReq) Descriptor() ([]byte, []int) {
	return file_proto_task_task_proto_rawDescGZIP(), []int{7}
}

func (x *NewTasksReq) GetTasks() []*NewTaskReq {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_task_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_task_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_proto_task_task_proto_rawDescGZIP(), []int{8}
}

type TaskID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TaskID) Reset() {
	*x = TaskID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_task_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskID) ProtoMessage() {}

func (x *TaskID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_task_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskID.ProtoReflect.Descriptor instead.
func (*TaskID) Descriptor() ([]byte, []int) {
	return file_proto_task_task_proto_rawDescGZIP(), []int{9}
}

func (x *TaskID) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type TaskIDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []uint32 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *TaskIDs) Reset() {
	*x = TaskIDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_task_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskIDs) ProtoMessage() {}

func (x *TaskIDs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_task_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskIDs.ProtoReflect.Descriptor instead.
func (*TaskIDs) Descriptor() ([]byte, []int) {
	return file_proto_task_task_proto_rawDescGZIP(), []int{10}
}

func (x *TaskIDs) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type TaskParameterFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Type  string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *TaskParameterFilter) Reset() {
	*x = TaskParameterFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_task_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskParameterFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskParameterFilter) ProtoMessage() {}

func (x *TaskParameterFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_task_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskParameterFilter.ProtoReflect.Descriptor instead.
func (*TaskParameterFilter) Descriptor() ([]byte, []int) {
	return file_proto_task_task_proto_rawDescGZIP(), []int{11}
}

func (x *TaskParameterFilter) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TaskParameterFilter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TaskParameterFilter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type UpdateTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Task *UpdateTask `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *UpdateTaskReq) Reset() {
	*x = UpdateTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_task_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaskReq) ProtoMessage() {}

func (x *UpdateTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_task_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaskReq.ProtoReflect.Descriptor instead.
func (*UpdateTaskReq) Descriptor() ([]byte, []int) {
	return file_proto_task_task_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateTaskReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateTaskReq) GetTask() *UpdateTask {
	if x != nil {
		return x.Task
	}
	return nil
}

type UpdateTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderIndex    *wrappers.Int32Value  `protobuf:"bytes,1,opt,name=orderIndex,proto3" json:"orderIndex,omitempty"`
	Priority      *wrappers.Int32Value  `protobuf:"bytes,2,opt,name=priority,proto3" json:"priority,omitempty"`
	ScriptIndex   *wrappers.Int32Value  `protobuf:"bytes,3,opt,name=scriptIndex,proto3" json:"scriptIndex,omitempty"`
	Description   *wrappers.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	OriginStation *wrappers.Int32Value  `protobuf:"bytes,5,opt,name=originStation,proto3" json:"originStation,omitempty"`
	TargetStation *wrappers.Int32Value  `protobuf:"bytes,6,opt,name=targetStation,proto3" json:"targetStation,omitempty"`
	AgvID         *wrappers.Int32Value  `protobuf:"bytes,7,opt,name=agvID,proto3" json:"agvID,omitempty"`
	AgvInitPoint  *wrappers.Int32Value  `protobuf:"bytes,8,opt,name=agvInitPoint,proto3" json:"agvInitPoint,omitempty"`
	MaterialID    *wrappers.Int64Value  `protobuf:"bytes,9,opt,name=materialID,proto3" json:"materialID,omitempty"`
	ErrorCode     *wrappers.Int32Value  `protobuf:"bytes,10,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	Error         *wrappers.StringValue `protobuf:"bytes,11,opt,name=error,proto3" json:"error,omitempty"`
	Phase         *wrappers.Int32Value  `protobuf:"bytes,12,opt,name=phase,proto3" json:"phase,omitempty"`
	EntranceID    *wrappers.Int32Value  `protobuf:"bytes,13,opt,name=entranceID,proto3" json:"entranceID,omitempty"`
	OrderType     *wrappers.Int32Value  `protobuf:"bytes,14,opt,name=orderType,proto3" json:"orderType,omitempty"`
	RackID        *wrappers.Int32Value  `protobuf:"bytes,15,opt,name=rackID,proto3" json:"rackID,omitempty"`
}

func (x *UpdateTask) Reset() {
	*x = UpdateTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_task_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTask) ProtoMessage() {}

func (x *UpdateTask) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_task_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTask.ProtoReflect.Descriptor instead.
func (*UpdateTask) Descriptor() ([]byte, []int) {
	return file_proto_task_task_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateTask) GetOrderIndex() *wrappers.Int32Value {
	if x != nil {
		return x.OrderIndex
	}
	return nil
}

func (x *UpdateTask) GetPriority() *wrappers.Int32Value {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *UpdateTask) GetScriptIndex() *wrappers.Int32Value {
	if x != nil {
		return x.ScriptIndex
	}
	return nil
}

func (x *UpdateTask) GetDescription() *wrappers.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *UpdateTask) GetOriginStation() *wrappers.Int32Value {
	if x != nil {
		return x.OriginStation
	}
	return nil
}

func (x *UpdateTask) GetTargetStation() *wrappers.Int32Value {
	if x != nil {
		return x.TargetStation
	}
	return nil
}

func (x *UpdateTask) GetAgvID() *wrappers.Int32Value {
	if x != nil {
		return x.AgvID
	}
	return nil
}

func (x *UpdateTask) GetAgvInitPoint() *wrappers.Int32Value {
	if x != nil {
		return x.AgvInitPoint
	}
	return nil
}

func (x *UpdateTask) GetMaterialID() *wrappers.Int64Value {
	if x != nil {
		return x.MaterialID
	}
	return nil
}

func (x *UpdateTask) GetErrorCode() *wrappers.Int32Value {
	if x != nil {
		return x.ErrorCode
	}
	return nil
}

func (x *UpdateTask) GetError() *wrappers.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *UpdateTask) GetPhase() *wrappers.Int32Value {
	if x != nil {
		return x.Phase
	}
	return nil
}

func (x *UpdateTask) GetEntranceID() *wrappers.Int32Value {
	if x != nil {
		return x.EntranceID
	}
	return nil
}

func (x *UpdateTask) GetOrderType() *wrappers.Int32Value {
	if x != nil {
		return x.OrderType
	}
	return nil
}

func (x *UpdateTask) GetRackID() *wrappers.Int32Value {
	if x != nil {
		return x.RackID
	}
	return nil
}

type TaskFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	And              []*TaskFilter         `protobuf:"bytes,1,rep,name=and,proto3" json:"and,omitempty"`
	Or               []*TaskFilter         `protobuf:"bytes,2,rep,name=or,proto3" json:"or,omitempty"`
	Id               *wrappers.Int32Value  `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	IdIn             []int32               `protobuf:"varint,4,rep,packed,name=idIn,proto3" json:"idIn,omitempty"`
	Priority         *wrappers.Int32Value  `protobuf:"bytes,8,opt,name=priority,proto3" json:"priority,omitempty"`
	BeginLT          *wrappers.StringValue `protobuf:"bytes,10,opt,name=beginLT,proto3" json:"beginLT,omitempty"`
	BeginGT          *wrappers.StringValue `protobuf:"bytes,11,opt,name=beginGT,proto3" json:"beginGT,omitempty"`
	EndLT            *wrappers.StringValue `protobuf:"bytes,12,opt,name=endLT,proto3" json:"endLT,omitempty"`
	EndGT            *wrappers.StringValue `protobuf:"bytes,13,opt,name=endGT,proto3" json:"endGT,omitempty"`
	OrderIndex       *wrappers.Int32Value  `protobuf:"bytes,7,opt,name=orderIndex,proto3" json:"orderIndex,omitempty"`
	ScriptIndex      *wrappers.Int32Value  `protobuf:"bytes,9,opt,name=scriptIndex,proto3" json:"scriptIndex,omitempty"`
	Phase            *wrappers.Int32Value  `protobuf:"bytes,21,opt,name=phase,proto3" json:"phase,omitempty"`
	OriginStation    *wrappers.Int32Value  `protobuf:"bytes,14,opt,name=originStation,proto3" json:"originStation,omitempty"`
	TargetStation    *wrappers.Int32Value  `protobuf:"bytes,15,opt,name=targetStation,proto3" json:"targetStation,omitempty"`
	AgvID            *wrappers.Int32Value  `protobuf:"bytes,16,opt,name=agvID,proto3" json:"agvID,omitempty"`
	AgvInitPoint     *wrappers.Int32Value  `protobuf:"bytes,17,opt,name=agvInitPoint,proto3" json:"agvInitPoint,omitempty"`
	MaterialID       *wrappers.Int64Value  `protobuf:"bytes,18,opt,name=materialID,proto3" json:"materialID,omitempty"`
	Parameter        *TaskParameterFilter  `protobuf:"bytes,20,opt,name=parameter,proto3" json:"parameter,omitempty"`
	ErrorCode        *wrappers.Int32Value  `protobuf:"bytes,19,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	Error            *wrappers.StringValue `protobuf:"bytes,22,opt,name=error,proto3" json:"error,omitempty"`
	EntranceID       *wrappers.Int32Value  `protobuf:"bytes,23,opt,name=entranceID,proto3" json:"entranceID,omitempty"`
	OrderType        *wrappers.Int32Value  `protobuf:"bytes,24,opt,name=orderType,proto3" json:"orderType,omitempty"`
	RackID           *wrappers.Int32Value  `protobuf:"bytes,25,opt,name=rackID,proto3" json:"rackID,omitempty"`
	GreaterThenPhase *wrappers.Int32Value  `protobuf:"bytes,26,opt,name=greaterThenPhase,proto3" json:"greaterThenPhase,omitempty"`
	LessThenPhase    *wrappers.Int32Value  `protobuf:"bytes,27,opt,name=lessThenPhase,proto3" json:"lessThenPhase,omitempty"`
	OrderTypeIn      []int32               `protobuf:"varint,28,rep,packed,name=orderTypeIn,proto3" json:"orderTypeIn,omitempty"`
	PhaseIn          []int32               `protobuf:"varint,29,rep,packed,name=phaseIn,proto3" json:"phaseIn,omitempty"`
	OrderTypeNotIn   []int32               `protobuf:"varint,30,rep,packed,name=orderTypeNotIn,proto3" json:"orderTypeNotIn,omitempty"`
	PhaseNotIn       []int32               `protobuf:"varint,31,rep,packed,name=phaseNotIn,proto3" json:"phaseNotIn,omitempty"`
}

func (x *TaskFilter) Reset() {
	*x = TaskFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_task_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskFilter) ProtoMessage() {}

func (x *TaskFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_task_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskFilter.ProtoReflect.Descriptor instead.
func (*TaskFilter) Descriptor() ([]byte, []int) {
	return file_proto_task_task_proto_rawDescGZIP(), []int{14}
}

func (x *TaskFilter) GetAnd() []*TaskFilter {
	if x != nil {
		return x.And
	}
	return nil
}

func (x *TaskFilter) GetOr() []*TaskFilter {
	if x != nil {
		return x.Or
	}
	return nil
}

func (x *TaskFilter) GetId() *wrappers.Int32Value {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TaskFilter) GetIdIn() []int32 {
	if x != nil {
		return x.IdIn
	}
	return nil
}

func (x *TaskFilter) GetPriority() *wrappers.Int32Value {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *TaskFilter) GetBeginLT() *wrappers.StringValue {
	if x != nil {
		return x.BeginLT
	}
	return nil
}

func (x *TaskFilter) GetBeginGT() *wrappers.StringValue {
	if x != nil {
		return x.BeginGT
	}
	return nil
}

func (x *TaskFilter) GetEndLT() *wrappers.StringValue {
	if x != nil {
		return x.EndLT
	}
	return nil
}

func (x *TaskFilter) GetEndGT() *wrappers.StringValue {
	if x != nil {
		return x.EndGT
	}
	return nil
}

func (x *TaskFilter) GetOrderIndex() *wrappers.Int32Value {
	if x != nil {
		return x.OrderIndex
	}
	return nil
}

func (x *TaskFilter) GetScriptIndex() *wrappers.Int32Value {
	if x != nil {
		return x.ScriptIndex
	}
	return nil
}

func (x *TaskFilter) GetPhase() *wrappers.Int32Value {
	if x != nil {
		return x.Phase
	}
	return nil
}

func (x *TaskFilter) GetOriginStation() *wrappers.Int32Value {
	if x != nil {
		return x.OriginStation
	}
	return nil
}

func (x *TaskFilter) GetTargetStation() *wrappers.Int32Value {
	if x != nil {
		return x.TargetStation
	}
	return nil
}

func (x *TaskFilter) GetAgvID() *wrappers.Int32Value {
	if x != nil {
		return x.AgvID
	}
	return nil
}

func (x *TaskFilter) GetAgvInitPoint() *wrappers.Int32Value {
	if x != nil {
		return x.AgvInitPoint
	}
	return nil
}

func (x *TaskFilter) GetMaterialID() *wrappers.Int64Value {
	if x != nil {
		return x.MaterialID
	}
	return nil
}

func (x *TaskFilter) GetParameter() *TaskParameterFilter {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *TaskFilter) GetErrorCode() *wrappers.Int32Value {
	if x != nil {
		return x.ErrorCode
	}
	return nil
}

func (x *TaskFilter) GetError() *wrappers.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TaskFilter) GetEntranceID() *wrappers.Int32Value {
	if x != nil {
		return x.EntranceID
	}
	return nil
}

func (x *TaskFilter) GetOrderType() *wrappers.Int32Value {
	if x != nil {
		return x.OrderType
	}
	return nil
}

func (x *TaskFilter) GetRackID() *wrappers.Int32Value {
	if x != nil {
		return x.RackID
	}
	return nil
}

func (x *TaskFilter) GetGreaterThenPhase() *wrappers.Int32Value {
	if x != nil {
		return x.GreaterThenPhase
	}
	return nil
}

func (x *TaskFilter) GetLessThenPhase() *wrappers.Int32Value {
	if x != nil {
		return x.LessThenPhase
	}
	return nil
}

func (x *TaskFilter) GetOrderTypeIn() []int32 {
	if x != nil {
		return x.OrderTypeIn
	}
	return nil
}

func (x *TaskFilter) GetPhaseIn() []int32 {
	if x != nil {
		return x.PhaseIn
	}
	return nil
}

func (x *TaskFilter) GetOrderTypeNotIn() []int32 {
	if x != nil {
		return x.OrderTypeNotIn
	}
	return nil
}

func (x *TaskFilter) GetPhaseNotIn() []int32 {
	if x != nil {
		return x.PhaseNotIn
	}
	return nil
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   uint32      `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  uint32      `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Page    uint32      `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PerPage uint32      `protobuf:"varint,4,opt,name=perPage,proto3" json:"perPage,omitempty"`
	Filter  *TaskFilter `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_task_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_task_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_proto_task_task_proto_rawDescGZIP(), []int{15}
}

func (x *Query) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Query) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Query) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Query) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *Query) GetFilter() *TaskFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type Parameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//参数类型，支持string, int, float64，bool四种种类型，默认为string类型
	Type  string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Key   string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Parameter) Reset() {
	*x = Parameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_task_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Parameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parameter) ProtoMessage() {}

func (x *Parameter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_task_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parameter.ProtoReflect.Descriptor instead.
func (*Parameter) Descriptor() ([]byte, []int) {
	return file_proto_task_task_proto_rawDescGZIP(), []int{16}
}

func (x *Parameter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Parameter) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Parameter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ParameterKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ParameterKey) Reset() {
	*x = ParameterKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_task_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterKey) ProtoMessage() {}

func (x *ParameterKey) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_task_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterKey.ProtoReflect.Descriptor instead.
func (*ParameterKey) Descriptor() ([]byte, []int) {
	return file_proto_task_task_proto_rawDescGZIP(), []int{17}
}

func (x *ParameterKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// 局部参数需携带任务编号
type LpParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID    uint32     `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Parameter *Parameter `protobuf:"bytes,2,opt,name=parameter,proto3" json:"parameter,omitempty"`
}

func (x *LpParameter) Reset() {
	*x = LpParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_task_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LpParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LpParameter) ProtoMessage() {}

func (x *LpParameter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_task_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LpParameter.ProtoReflect.Descriptor instead.
func (*LpParameter) Descriptor() ([]byte, []int) {
	return file_proto_task_task_proto_rawDescGZIP(), []int{18}
}

func (x *LpParameter) GetTaskID() uint32 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *LpParameter) GetParameter() *Parameter {
	if x != nil {
		return x.Parameter
	}
	return nil
}

type LpParameterKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID uint32 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Key    string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *LpParameterKey) Reset() {
	*x = LpParameterKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_task_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LpParameterKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LpParameterKey) ProtoMessage() {}

func (x *LpParameterKey) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_task_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LpParameterKey.ProtoReflect.Descriptor instead.
func (*LpParameterKey) Descriptor() ([]byte, []int) {
	return file_proto_task_task_proto_rawDescGZIP(), []int{19}
}

func (x *LpParameterKey) GetTaskID() uint32 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *LpParameterKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type LpParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID     uint32 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Parameters string `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *LpParameters) Reset() {
	*x = LpParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_task_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LpParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LpParameters) ProtoMessage() {}

func (x *LpParameters) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_task_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LpParameters.ProtoReflect.Descriptor instead.
func (*LpParameters) Descriptor() ([]byte, []int) {
	return file_proto_task_task_proto_rawDescGZIP(), []int{20}
}

func (x *LpParameters) GetTaskID() uint32 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *LpParameters) GetParameters() string {
	if x != nil {
		return x.Parameters
	}
	return ""
}

type LpParameterKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID uint32   `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Keys   []string `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *LpParameterKeys) Reset() {
	*x = LpParameterKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_task_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LpParameterKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LpParameterKeys) ProtoMessage() {}

func (x *LpParameterKeys) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_task_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LpParameterKeys.ProtoReflect.Descriptor instead.
func (*LpParameterKeys) Descriptor() ([]byte, []int) {
	return file_proto_task_task_proto_rawDescGZIP(), []int{21}
}

func (x *LpParameterKeys) GetTaskID() uint32 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *LpParameterKeys) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID     uint32       `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Parameters []*Parameter `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *Parameters) Reset() {
	*x = Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_task_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parameters) ProtoMessage() {}

func (x *Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_task_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parameters.ProtoReflect.Descriptor instead.
func (*Parameters) Descriptor() ([]byte, []int) {
	return file_proto_task_task_proto_rawDescGZIP(), []int{22}
}

func (x *Parameters) GetTaskID() uint32 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *Parameters) GetParameters() []*Parameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type ParameterKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID uint32   `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Keys   []string `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *ParameterKeys) Reset() {
	*x = ParameterKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_task_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterKeys) ProtoMessage() {}

func (x *ParameterKeys) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_task_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterKeys.ProtoReflect.Descriptor instead.
func (*ParameterKeys) Descriptor() ([]byte, []int) {
	return file_proto_task_task_proto_rawDescGZIP(), []int{23}
}

func (x *ParameterKeys) GetTaskID() uint32 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *ParameterKeys) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type TaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID        uint32       `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Priority      uint32       `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	BeginTime     string       `protobuf:"bytes,3,opt,name=beginTime,proto3" json:"beginTime,omitempty"`
	EndTime       string       `protobuf:"bytes,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
	OrderIndex    uint32       `protobuf:"varint,5,opt,name=orderIndex,proto3" json:"orderIndex,omitempty"`
	ScriptIndex   uint32       `protobuf:"varint,6,opt,name=scriptIndex,proto3" json:"scriptIndex,omitempty"`
	Phase         int32        `protobuf:"varint,7,opt,name=phase,proto3" json:"phase,omitempty"`
	OriginStation uint32       `protobuf:"varint,8,opt,name=originStation,proto3" json:"originStation,omitempty"`
	TargetStation uint32       `protobuf:"varint,9,opt,name=targetStation,proto3" json:"targetStation,omitempty"`
	AgvID         uint32       `protobuf:"varint,10,opt,name=agvID,proto3" json:"agvID,omitempty"`
	AgvInitPoint  uint32       `protobuf:"varint,11,opt,name=agvInitPoint,proto3" json:"agvInitPoint,omitempty"`
	MaterialID    int64        `protobuf:"varint,12,opt,name=materialID,proto3" json:"materialID,omitempty"`
	Parameters    []*Parameter `protobuf:"bytes,13,rep,name=parameters,proto3" json:"parameters,omitempty"`
	ErrorCode     int32        `protobuf:"varint,14,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	Error         string       `protobuf:"bytes,15,opt,name=error,proto3" json:"error,omitempty"`
	Description   string       `protobuf:"bytes,16,opt,name=description,proto3" json:"description,omitempty"`
	EntranceID    uint32       `protobuf:"varint,17,opt,name=entranceID,proto3" json:"entranceID,omitempty"`
	OrderType     uint32       `protobuf:"varint,18,opt,name=orderType,proto3" json:"orderType,omitempty"`
	RackID        uint32       `protobuf:"varint,19,opt,name=rackID,proto3" json:"rackID,omitempty"`
}

func (x *TaskInfo) Reset() {
	*x = TaskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_task_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskInfo) ProtoMessage() {}

func (x *TaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_task_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskInfo.ProtoReflect.Descriptor instead.
func (*TaskInfo) Descriptor() ([]byte, []int) {
	return file_proto_task_task_proto_rawDescGZIP(), []int{24}
}

func (x *TaskInfo) GetTaskID() uint32 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *TaskInfo) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *TaskInfo) GetBeginTime() string {
	if x != nil {
		return x.BeginTime
	}
	return ""
}

func (x *TaskInfo) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *TaskInfo) GetOrderIndex() uint32 {
	if x != nil {
		return x.OrderIndex
	}
	return 0
}

func (x *TaskInfo) GetScriptIndex() uint32 {
	if x != nil {
		return x.ScriptIndex
	}
	return 0
}

func (x *TaskInfo) GetPhase() int32 {
	if x != nil {
		return x.Phase
	}
	return 0
}

func (x *TaskInfo) GetOriginStation() uint32 {
	if x != nil {
		return x.OriginStation
	}
	return 0
}

func (x *TaskInfo) GetTargetStation() uint32 {
	if x != nil {
		return x.TargetStation
	}
	return 0
}

func (x *TaskInfo) GetAgvID() uint32 {
	if x != nil {
		return x.AgvID
	}
	return 0
}

func (x *TaskInfo) GetAgvInitPoint() uint32 {
	if x != nil {
		return x.AgvInitPoint
	}
	return 0
}

func (x *TaskInfo) GetMaterialID() int64 {
	if x != nil {
		return x.MaterialID
	}
	return 0
}

func (x *TaskInfo) GetParameters() []*Parameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *TaskInfo) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *TaskInfo) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *TaskInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaskInfo) GetEntranceID() uint32 {
	if x != nil {
		return x.EntranceID
	}
	return 0
}

func (x *TaskInfo) GetOrderType() uint32 {
	if x != nil {
		return x.OrderType
	}
	return 0
}

func (x *TaskInfo) GetRackID() uint32 {
	if x != nil {
		return x.RackID
	}
	return 0
}

type TaskInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks      []*TaskInfo `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	Totalpages uint32      `protobuf:"varint,2,opt,name=totalpages,proto3" json:"totalpages,omitempty"`
	Currpages  uint32      `protobuf:"varint,3,opt,name=currpages,proto3" json:"currpages,omitempty"`
	Totals     uint32      `protobuf:"varint,4,opt,name=totals,proto3" json:"totals,omitempty"`
}

func (x *TaskInfos) Reset() {
	*x = TaskInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_task_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskInfos) ProtoMessage() {}

func (x *TaskInfos) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_task_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskInfos.ProtoReflect.Descriptor instead.
func (*TaskInfos) Descriptor() ([]byte, []int) {
	return file_proto_task_task_proto_rawDescGZIP(), []int{25}
}

func (x *TaskInfos) GetTasks() []*TaskInfo {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *TaskInfos) GetTotalpages() uint32 {
	if x != nil {
		return x.Totalpages
	}
	return 0
}

func (x *TaskInfos) GetCurrpages() uint32 {
	if x != nil {
		return x.Currpages
	}
	return 0
}

func (x *TaskInfos) GetTotals() uint32 {
	if x != nil {
		return x.Totals
	}
	return 0
}

type CallOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module     string       `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	Function   string       `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
	Parameters []*Parameter `protobuf:"bytes,3,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *CallOptions) Reset() {
	*x = CallOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_task_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallOptions) ProtoMessage() {}

func (x *CallOptions) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_task_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallOptions.ProtoReflect.Descriptor instead.
func (*CallOptions) Descriptor() ([]byte, []int) {
	return file_proto_task_task_proto_rawDescGZIP(), []int{26}
}

func (x *CallOptions) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *CallOptions) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *CallOptions) GetParameters() []*Parameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type CallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	// google.protobuf.Any result = 1;
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *CallResponse) Reset() {
	*x = CallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_task_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallResponse) ProtoMessage() {}

func (x *CallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_task_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallResponse.ProtoReflect.Descriptor instead.
func (*CallResponse) Descriptor() ([]byte, []int) {
	return file_proto_task_task_proto_rawDescGZIP(), []int{27}
}

func (x *CallResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *CallResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type ExecuteOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID      uint32       `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Priority    uint32       `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	ScriptIndex uint32       `protobuf:"varint,3,opt,name=scriptIndex,proto3" json:"scriptIndex,omitempty"`
	Parameters  []*Parameter `protobuf:"bytes,4,rep,name=parameters,proto3" json:"parameters,omitempty"`
	Description string       `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *ExecuteOptions) Reset() {
	*x = ExecuteOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_task_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteOptions) ProtoMessage() {}

func (x *ExecuteOptions) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_task_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteOptions.ProtoReflect.Descriptor instead.
func (*ExecuteOptions) Descriptor() ([]byte, []int) {
	return file_proto_task_task_proto_rawDescGZIP(), []int{28}
}

func (x *ExecuteOptions) GetTaskID() uint32 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *ExecuteOptions) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ExecuteOptions) GetScriptIndex() uint32 {
	if x != nil {
		return x.ScriptIndex
	}
	return 0
}

func (x *ExecuteOptions) GetParameters() []*Parameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *ExecuteOptions) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ExecuteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExecuteResponse) Reset() {
	*x = ExecuteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_task_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteResponse) ProtoMessage() {}

func (x *ExecuteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_task_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteResponse.ProtoReflect.Descriptor instead.
func (*ExecuteResponse) Descriptor() ([]byte, []int) {
	return file_proto_task_task_proto_rawDescGZIP(), []int{29}
}

type CancelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID uint32 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	// 是否强制取消任务，true为强制取消
	ForcedExit bool `protobuf:"varint,2,opt,name=forcedExit,proto3" json:"forcedExit,omitempty"`
}

func (x *CancelReq) Reset() {
	*x = CancelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_task_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelReq) ProtoMessage() {}

func (x *CancelReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_task_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelReq.ProtoReflect.Descriptor instead.
func (*CancelReq) Descriptor() ([]byte, []int) {
	return file_proto_task_task_proto_rawDescGZIP(), []int{30}
}

func (x *CancelReq) GetTaskID() uint32 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *CancelReq) GetForcedExit() bool {
	if x != nil {
		return x.ForcedExit
	}
	return false
}

var File_proto_task_task_proto protoreflect.FileDescriptor

var file_proto_task_task_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x05, 0x0a, 0x03, 0x4e, 0x6f,
	0x70, 0x22, 0x2f, 0x0a, 0x0b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x6f, 0x52, 0x65, 0x71,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x37, 0x0a, 0x07, 0x47, 0x50, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x19, 0x0a, 0x05, 0x47,
	0x50, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x6b, 0x0a, 0x0b, 0x47, 0x70, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x66, 0x0a, 0x0c, 0x47, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x47, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x0a,
	0x4e, 0x65, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x42, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x33, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x52, 0x05, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x22, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x18, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1b, 0x0a, 0x07, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x51, 0x0a, 0x13, 0x54, 0x61, 0x73, 0x6b, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x52, 0x0a, 0x0d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x74,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x87,
	0x07, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3b, 0x0a,
	0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x05, 0x61, 0x67, 0x76, 0x49,
	0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x61, 0x67, 0x76, 0x49, 0x44, 0x12, 0x3f, 0x0a, 0x0c, 0x61,
	0x67, 0x76, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x61, 0x67, 0x76, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0a,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x65, 0x6e,
	0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x22, 0x96, 0x0c, 0x0a, 0x0a, 0x54, 0x61, 0x73,
	0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x03, 0x61, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x03, 0x61, 0x6e, 0x64, 0x12, 0x2d, 0x0a, 0x02, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x02, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x64, 0x49, 0x6e, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x04, 0x69, 0x64, 0x49, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x36, 0x0a, 0x07, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x4c, 0x54, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x4c, 0x54, 0x12, 0x36, 0x0a, 0x07, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x47, 0x54, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x47,
	0x54, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x4c, 0x54, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x65, 0x6e, 0x64, 0x4c, 0x54, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x47, 0x54, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x47, 0x54, 0x12, 0x3b, 0x0a, 0x0a, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x31, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31,
	0x0a, 0x05, 0x61, 0x67, 0x76, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x61, 0x67, 0x76, 0x49,
	0x44, 0x12, 0x3f, 0x0a, 0x0c, 0x61, 0x67, 0x76, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x61, 0x67, 0x76, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x44,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x12,
	0x44, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72,
	0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x44, 0x12, 0x39, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x61, 0x63, 0x6b, 0x49,
	0x44, 0x12, 0x47, 0x0a, 0x10, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x65, 0x6e,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x54, 0x68, 0x65, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x6c, 0x65,
	0x73, 0x73, 0x54, 0x68, 0x65, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x6c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x65, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x18, 0x1c, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x18, 0x1e, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x74, 0x49,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x18,
	0x1f, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x74, 0x49,
	0x6e, 0x22, 0x9a, 0x01, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x47,
	0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x22, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x61, 0x0a, 0x0b, 0x4c,
	0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x12, 0x3a, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2e, 0x73, 0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0x3a,
	0x0a, 0x0e, 0x4c, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x46, 0x0a, 0x0c, 0x4c, 0x70,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x22, 0x3d, 0x0a, 0x0f, 0x4c, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x22, 0x62, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x3b, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x22, 0xde, 0x04, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x67, 0x76, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x61, 0x67, 0x76, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x67, 0x76, 0x49, 0x6e, 0x69, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x67, 0x76,
	0x49, 0x6e, 0x69, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x61, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x61, 0x63,
	0x6b, 0x49, 0x44, 0x22, 0x94, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x70, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x70,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x72, 0x70, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x70, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x22, 0x7f, 0x0a, 0x0b, 0x43, 0x61,
	0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x4a, 0x0a, 0x0c, 0x43,
	0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x11, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x43, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x64, 0x45, 0x78, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x64, 0x45, 0x78, 0x69, 0x74, 0x32, 0xb6, 0x0b, 0x0a, 0x0b, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x03, 0x4e, 0x65, 0x77, 0x12,
	0x1d, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1b,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x12, 0x19, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x1a,
	0x1b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x06,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x20, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47,
	0x0a, 0x08, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x65, 0x77, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4e,
	0x65, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x73, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72,
	0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4d, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4c, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53,
	0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72,
	0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4c, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x19,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x19, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x42, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x18, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x12, 0x49, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x18, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12,
	0x47, 0x0a, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1f, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x53, 0x65,
	0x74, 0x47, 0x50, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x47, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3e, 0x0a, 0x05, 0x44, 0x65, 0x6c, 0x47, 0x50, 0x12, 0x18, 0x2e, 0x67, 0x6f, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x47, 0x50,
	0x4b, 0x65, 0x79, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x05, 0x47, 0x65, 0x74, 0x47, 0x50, 0x12, 0x18, 0x2e, 0x67, 0x6f, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x47, 0x50,
	0x4b, 0x65, 0x79, 0x1a, 0x1e, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x47, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x47, 0x50, 0x73, 0x12, 0x1a, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x47, 0x50, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1f, 0x2e, 0x67, 0x6f, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x47, 0x70,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4d, 0x0a, 0x0e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x6f, 0x12, 0x1e, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x6f, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x4e, 0x6f, 0x70, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x1e, 0x5a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x3b,
	0x67, 0x6f, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5f, 0x73, 0x72, 0x76, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_task_task_proto_rawDescOnce sync.Once
	file_proto_task_task_proto_rawDescData = file_proto_task_task_proto_rawDesc
)

func file_proto_task_task_proto_rawDescGZIP() []byte {
	file_proto_task_task_proto_rawDescOnce.Do(func() {
		file_proto_task_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_task_task_proto_rawDescData)
	})
	return file_proto_task_task_proto_rawDescData
}

var file_proto_task_task_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_proto_task_task_proto_goTypes = []interface{}{
	(*Nop)(nil),                  // 0: go.micro.srv.task.Nop
	(*SystemGoReq)(nil),          // 1: go.micro.srv.task.SystemGoReq
	(*GPQuery)(nil),              // 2: go.micro.srv.task.GPQuery
	(*GPKey)(nil),                // 3: go.micro.srv.task.GPKey
	(*GpParameter)(nil),          // 4: go.micro.srv.task.GpParameter
	(*GpParameters)(nil),         // 5: go.micro.srv.task.GpParameters
	(*NewTaskReq)(nil),           // 6: go.micro.srv.task.NewTaskReq
	(*NewTasksReq)(nil),          // 7: go.micro.srv.task.NewTasksReq
	(*Response)(nil),             // 8: go.micro.srv.task.Response
	(*TaskID)(nil),               // 9: go.micro.srv.task.TaskID
	(*TaskIDs)(nil),              // 10: go.micro.srv.task.TaskIDs
	(*TaskParameterFilter)(nil),  // 11: go.micro.srv.task.TaskParameterFilter
	(*UpdateTaskReq)(nil),        // 12: go.micro.srv.task.UpdateTaskReq
	(*UpdateTask)(nil),           // 13: go.micro.srv.task.UpdateTask
	(*TaskFilter)(nil),           // 14: go.micro.srv.task.TaskFilter
	(*Query)(nil),                // 15: go.micro.srv.task.Query
	(*Parameter)(nil),            // 16: go.micro.srv.task.Parameter
	(*ParameterKey)(nil),         // 17: go.micro.srv.task.ParameterKey
	(*LpParameter)(nil),          // 18: go.micro.srv.task.LpParameter
	(*LpParameterKey)(nil),       // 19: go.micro.srv.task.LpParameterKey
	(*LpParameters)(nil),         // 20: go.micro.srv.task.LpParameters
	(*LpParameterKeys)(nil),      // 21: go.micro.srv.task.LpParameterKeys
	(*Parameters)(nil),           // 22: go.micro.srv.task.Parameters
	(*ParameterKeys)(nil),        // 23: go.micro.srv.task.ParameterKeys
	(*TaskInfo)(nil),             // 24: go.micro.srv.task.TaskInfo
	(*TaskInfos)(nil),            // 25: go.micro.srv.task.TaskInfos
	(*CallOptions)(nil),          // 26: go.micro.srv.task.CallOptions
	(*CallResponse)(nil),         // 27: go.micro.srv.task.CallResponse
	(*ExecuteOptions)(nil),       // 28: go.micro.srv.task.ExecuteOptions
	(*ExecuteResponse)(nil),      // 29: go.micro.srv.task.ExecuteResponse
	(*CancelReq)(nil),            // 30: go.micro.srv.task.CancelReq
	(*wrappers.Int32Value)(nil),  // 31: google.protobuf.Int32Value
	(*wrappers.StringValue)(nil), // 32: google.protobuf.StringValue
	(*wrappers.Int64Value)(nil),  // 33: google.protobuf.Int64Value
}
var file_proto_task_task_proto_depIdxs = []int32{
	4,  // 0: go.micro.srv.task.GpParameters.params:type_name -> go.micro.srv.task.GpParameter
	16, // 1: go.micro.srv.task.NewTaskReq.parameters:type_name -> go.micro.srv.task.Parameter
	6,  // 2: go.micro.srv.task.NewTasksReq.tasks:type_name -> go.micro.srv.task.NewTaskReq
	13, // 3: go.micro.srv.task.UpdateTaskReq.task:type_name -> go.micro.srv.task.UpdateTask
	31, // 4: go.micro.srv.task.UpdateTask.orderIndex:type_name -> google.protobuf.Int32Value
	31, // 5: go.micro.srv.task.UpdateTask.priority:type_name -> google.protobuf.Int32Value
	31, // 6: go.micro.srv.task.UpdateTask.scriptIndex:type_name -> google.protobuf.Int32Value
	32, // 7: go.micro.srv.task.UpdateTask.description:type_name -> google.protobuf.StringValue
	31, // 8: go.micro.srv.task.UpdateTask.originStation:type_name -> google.protobuf.Int32Value
	31, // 9: go.micro.srv.task.UpdateTask.targetStation:type_name -> google.protobuf.Int32Value
	31, // 10: go.micro.srv.task.UpdateTask.agvID:type_name -> google.protobuf.Int32Value
	31, // 11: go.micro.srv.task.UpdateTask.agvInitPoint:type_name -> google.protobuf.Int32Value
	33, // 12: go.micro.srv.task.UpdateTask.materialID:type_name -> google.protobuf.Int64Value
	31, // 13: go.micro.srv.task.UpdateTask.errorCode:type_name -> google.protobuf.Int32Value
	32, // 14: go.micro.srv.task.UpdateTask.error:type_name -> google.protobuf.StringValue
	31, // 15: go.micro.srv.task.UpdateTask.phase:type_name -> google.protobuf.Int32Value
	31, // 16: go.micro.srv.task.UpdateTask.entranceID:type_name -> google.protobuf.Int32Value
	31, // 17: go.micro.srv.task.UpdateTask.orderType:type_name -> google.protobuf.Int32Value
	31, // 18: go.micro.srv.task.UpdateTask.rackID:type_name -> google.protobuf.Int32Value
	14, // 19: go.micro.srv.task.TaskFilter.and:type_name -> go.micro.srv.task.TaskFilter
	14, // 20: go.micro.srv.task.TaskFilter.or:type_name -> go.micro.srv.task.TaskFilter
	31, // 21: go.micro.srv.task.TaskFilter.id:type_name -> google.protobuf.Int32Value
	31, // 22: go.micro.srv.task.TaskFilter.priority:type_name -> google.protobuf.Int32Value
	32, // 23: go.micro.srv.task.TaskFilter.beginLT:type_name -> google.protobuf.StringValue
	32, // 24: go.micro.srv.task.TaskFilter.beginGT:type_name -> google.protobuf.StringValue
	32, // 25: go.micro.srv.task.TaskFilter.endLT:type_name -> google.protobuf.StringValue
	32, // 26: go.micro.srv.task.TaskFilter.endGT:type_name -> google.protobuf.StringValue
	31, // 27: go.micro.srv.task.TaskFilter.orderIndex:type_name -> google.protobuf.Int32Value
	31, // 28: go.micro.srv.task.TaskFilter.scriptIndex:type_name -> google.protobuf.Int32Value
	31, // 29: go.micro.srv.task.TaskFilter.phase:type_name -> google.protobuf.Int32Value
	31, // 30: go.micro.srv.task.TaskFilter.originStation:type_name -> google.protobuf.Int32Value
	31, // 31: go.micro.srv.task.TaskFilter.targetStation:type_name -> google.protobuf.Int32Value
	31, // 32: go.micro.srv.task.TaskFilter.agvID:type_name -> google.protobuf.Int32Value
	31, // 33: go.micro.srv.task.TaskFilter.agvInitPoint:type_name -> google.protobuf.Int32Value
	33, // 34: go.micro.srv.task.TaskFilter.materialID:type_name -> google.protobuf.Int64Value
	11, // 35: go.micro.srv.task.TaskFilter.parameter:type_name -> go.micro.srv.task.TaskParameterFilter
	31, // 36: go.micro.srv.task.TaskFilter.errorCode:type_name -> google.protobuf.Int32Value
	32, // 37: go.micro.srv.task.TaskFilter.error:type_name -> google.protobuf.StringValue
	31, // 38: go.micro.srv.task.TaskFilter.entranceID:type_name -> google.protobuf.Int32Value
	31, // 39: go.micro.srv.task.TaskFilter.orderType:type_name -> google.protobuf.Int32Value
	31, // 40: go.micro.srv.task.TaskFilter.rackID:type_name -> google.protobuf.Int32Value
	31, // 41: go.micro.srv.task.TaskFilter.greaterThenPhase:type_name -> google.protobuf.Int32Value
	31, // 42: go.micro.srv.task.TaskFilter.lessThenPhase:type_name -> google.protobuf.Int32Value
	14, // 43: go.micro.srv.task.Query.filter:type_name -> go.micro.srv.task.TaskFilter
	16, // 44: go.micro.srv.task.LpParameter.parameter:type_name -> go.micro.srv.task.Parameter
	16, // 45: go.micro.srv.task.Parameters.parameters:type_name -> go.micro.srv.task.Parameter
	16, // 46: go.micro.srv.task.TaskInfo.parameters:type_name -> go.micro.srv.task.Parameter
	24, // 47: go.micro.srv.task.TaskInfos.tasks:type_name -> go.micro.srv.task.TaskInfo
	16, // 48: go.micro.srv.task.CallOptions.parameters:type_name -> go.micro.srv.task.Parameter
	16, // 49: go.micro.srv.task.ExecuteOptions.parameters:type_name -> go.micro.srv.task.Parameter
	6,  // 50: go.micro.srv.task.TaskService.New:input_type -> go.micro.srv.task.NewTaskReq
	9,  // 51: go.micro.srv.task.TaskService.Pause:input_type -> go.micro.srv.task.TaskID
	30, // 52: go.micro.srv.task.TaskService.Cancel:input_type -> go.micro.srv.task.CancelReq
	12, // 53: go.micro.srv.task.TaskService.UpdateTask:input_type -> go.micro.srv.task.UpdateTaskReq
	7,  // 54: go.micro.srv.task.TaskService.BatchNew:input_type -> go.micro.srv.task.NewTasksReq
	10, // 55: go.micro.srv.task.TaskService.BatchCancel:input_type -> go.micro.srv.task.TaskIDs
	20, // 56: go.micro.srv.task.TaskService.SetParameters:input_type -> go.micro.srv.task.LpParameters
	21, // 57: go.micro.srv.task.TaskService.DeleteParameters:input_type -> go.micro.srv.task.LpParameterKeys
	9,  // 58: go.micro.srv.task.TaskService.GetTask:input_type -> go.micro.srv.task.TaskID
	9,  // 59: go.micro.srv.task.TaskService.GetHistoryTask:input_type -> go.micro.srv.task.TaskID
	15, // 60: go.micro.srv.task.TaskService.GetTasks:input_type -> go.micro.srv.task.Query
	15, // 61: go.micro.srv.task.TaskService.GetHistoryTasks:input_type -> go.micro.srv.task.Query
	26, // 62: go.micro.srv.task.TaskService.Call:input_type -> go.micro.srv.task.CallOptions
	28, // 63: go.micro.srv.task.TaskService.Execute:input_type -> go.micro.srv.task.ExecuteOptions
	4,  // 64: go.micro.srv.task.TaskService.SetGP:input_type -> go.micro.srv.task.GpParameter
	3,  // 65: go.micro.srv.task.TaskService.DelGP:input_type -> go.micro.srv.task.GPKey
	3,  // 66: go.micro.srv.task.TaskService.GetGP:input_type -> go.micro.srv.task.GPKey
	2,  // 67: go.micro.srv.task.TaskService.GetGPs:input_type -> go.micro.srv.task.GPQuery
	1,  // 68: go.micro.srv.task.TaskService.ConfigSystemGo:input_type -> go.micro.srv.task.SystemGoReq
	0,  // 69: go.micro.srv.task.TaskService.RestartSystemGo:input_type -> go.micro.srv.task.Nop
	8,  // 70: go.micro.srv.task.TaskService.New:output_type -> go.micro.srv.task.Response
	8,  // 71: go.micro.srv.task.TaskService.Pause:output_type -> go.micro.srv.task.Response
	8,  // 72: go.micro.srv.task.TaskService.Cancel:output_type -> go.micro.srv.task.Response
	8,  // 73: go.micro.srv.task.TaskService.UpdateTask:output_type -> go.micro.srv.task.Response
	8,  // 74: go.micro.srv.task.TaskService.BatchNew:output_type -> go.micro.srv.task.Response
	8,  // 75: go.micro.srv.task.TaskService.BatchCancel:output_type -> go.micro.srv.task.Response
	8,  // 76: go.micro.srv.task.TaskService.SetParameters:output_type -> go.micro.srv.task.Response
	8,  // 77: go.micro.srv.task.TaskService.DeleteParameters:output_type -> go.micro.srv.task.Response
	24, // 78: go.micro.srv.task.TaskService.GetTask:output_type -> go.micro.srv.task.TaskInfo
	24, // 79: go.micro.srv.task.TaskService.GetHistoryTask:output_type -> go.micro.srv.task.TaskInfo
	25, // 80: go.micro.srv.task.TaskService.GetTasks:output_type -> go.micro.srv.task.TaskInfos
	25, // 81: go.micro.srv.task.TaskService.GetHistoryTasks:output_type -> go.micro.srv.task.TaskInfos
	27, // 82: go.micro.srv.task.TaskService.Call:output_type -> go.micro.srv.task.CallResponse
	29, // 83: go.micro.srv.task.TaskService.Execute:output_type -> go.micro.srv.task.ExecuteResponse
	8,  // 84: go.micro.srv.task.TaskService.SetGP:output_type -> go.micro.srv.task.Response
	8,  // 85: go.micro.srv.task.TaskService.DelGP:output_type -> go.micro.srv.task.Response
	4,  // 86: go.micro.srv.task.TaskService.GetGP:output_type -> go.micro.srv.task.GpParameter
	5,  // 87: go.micro.srv.task.TaskService.GetGPs:output_type -> go.micro.srv.task.GpParameters
	8,  // 88: go.micro.srv.task.TaskService.ConfigSystemGo:output_type -> go.micro.srv.task.Response
	8,  // 89: go.micro.srv.task.TaskService.RestartSystemGo:output_type -> go.micro.srv.task.Response
	70, // [70:90] is the sub-list for method output_type
	50, // [50:70] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_proto_task_task_proto_init() }
func file_proto_task_task_proto_init() {
	if File_proto_task_task_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_task_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_task_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemGoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_task_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GPQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_task_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GPKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_task_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_task_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_task_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_task_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewTasksReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_task_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_task_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_task_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskIDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_task_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskParameterFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_task_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_task_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_task_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_task_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_task_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Parameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_task_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_task_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LpParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_task_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LpParameterKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_task_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LpParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_task_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LpParameterKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_task_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_task_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_task_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_task_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_task_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_task_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_task_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_task_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_task_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_task_task_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_task_task_proto_goTypes,
		DependencyIndexes: file_proto_task_task_proto_depIdxs,
		MessageInfos:      file_proto_task_task_proto_msgTypes,
	}.Build()
	File_proto_task_task_proto = out.File
	file_proto_task_task_proto_rawDesc = nil
	file_proto_task_task_proto_goTypes = nil
	file_proto_task_task_proto_depIdxs = nil
}
