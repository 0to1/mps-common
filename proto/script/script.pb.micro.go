// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/script/script.proto

package go_micro_srv_task_script

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ScriptService service

func NewScriptServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ScriptService service

type ScriptService interface {
	AddScript(ctx context.Context, in *Script, opts ...client.CallOption) (*Response, error)
	DeleteScript(ctx context.Context, in *ScriptIndex, opts ...client.CallOption) (*Response, error)
	UpdateScript(ctx context.Context, in *UpdateScriptReq, opts ...client.CallOption) (*Response, error)
	GetScript(ctx context.Context, in *ScriptIndex, opts ...client.CallOption) (*Script, error)
	GetScripts(ctx context.Context, in *Query, opts ...client.CallOption) (*Scripts, error)
	// 获取下一个可用的脚本ID
	GetNextScriptID(ctx context.Context, in *Nop, opts ...client.CallOption) (*ScriptIndex, error)
}

type scriptService struct {
	c    client.Client
	name string
}

func NewScriptService(name string, c client.Client) ScriptService {
	return &scriptService{
		c:    c,
		name: name,
	}
}

func (c *scriptService) AddScript(ctx context.Context, in *Script, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ScriptService.AddScript", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptService) DeleteScript(ctx context.Context, in *ScriptIndex, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ScriptService.DeleteScript", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptService) UpdateScript(ctx context.Context, in *UpdateScriptReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ScriptService.UpdateScript", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptService) GetScript(ctx context.Context, in *ScriptIndex, opts ...client.CallOption) (*Script, error) {
	req := c.c.NewRequest(c.name, "ScriptService.GetScript", in)
	out := new(Script)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptService) GetScripts(ctx context.Context, in *Query, opts ...client.CallOption) (*Scripts, error) {
	req := c.c.NewRequest(c.name, "ScriptService.GetScripts", in)
	out := new(Scripts)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptService) GetNextScriptID(ctx context.Context, in *Nop, opts ...client.CallOption) (*ScriptIndex, error) {
	req := c.c.NewRequest(c.name, "ScriptService.GetNextScriptID", in)
	out := new(ScriptIndex)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ScriptService service

type ScriptServiceHandler interface {
	AddScript(context.Context, *Script, *Response) error
	DeleteScript(context.Context, *ScriptIndex, *Response) error
	UpdateScript(context.Context, *UpdateScriptReq, *Response) error
	GetScript(context.Context, *ScriptIndex, *Script) error
	GetScripts(context.Context, *Query, *Scripts) error
	// 获取下一个可用的脚本ID
	GetNextScriptID(context.Context, *Nop, *ScriptIndex) error
}

func RegisterScriptServiceHandler(s server.Server, hdlr ScriptServiceHandler, opts ...server.HandlerOption) error {
	type scriptService interface {
		AddScript(ctx context.Context, in *Script, out *Response) error
		DeleteScript(ctx context.Context, in *ScriptIndex, out *Response) error
		UpdateScript(ctx context.Context, in *UpdateScriptReq, out *Response) error
		GetScript(ctx context.Context, in *ScriptIndex, out *Script) error
		GetScripts(ctx context.Context, in *Query, out *Scripts) error
		GetNextScriptID(ctx context.Context, in *Nop, out *ScriptIndex) error
	}
	type ScriptService struct {
		scriptService
	}
	h := &scriptServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ScriptService{h}, opts...))
}

type scriptServiceHandler struct {
	ScriptServiceHandler
}

func (h *scriptServiceHandler) AddScript(ctx context.Context, in *Script, out *Response) error {
	return h.ScriptServiceHandler.AddScript(ctx, in, out)
}

func (h *scriptServiceHandler) DeleteScript(ctx context.Context, in *ScriptIndex, out *Response) error {
	return h.ScriptServiceHandler.DeleteScript(ctx, in, out)
}

func (h *scriptServiceHandler) UpdateScript(ctx context.Context, in *UpdateScriptReq, out *Response) error {
	return h.ScriptServiceHandler.UpdateScript(ctx, in, out)
}

func (h *scriptServiceHandler) GetScript(ctx context.Context, in *ScriptIndex, out *Script) error {
	return h.ScriptServiceHandler.GetScript(ctx, in, out)
}

func (h *scriptServiceHandler) GetScripts(ctx context.Context, in *Query, out *Scripts) error {
	return h.ScriptServiceHandler.GetScripts(ctx, in, out)
}

func (h *scriptServiceHandler) GetNextScriptID(ctx context.Context, in *Nop, out *ScriptIndex) error {
	return h.ScriptServiceHandler.GetNextScriptID(ctx, in, out)
}
