syntax = "proto3";

package go.micro.srv.area;

import "google/protobuf/wrappers.proto";


service AreaService {

    // 根据ID获取指定区域信息
    rpc GetArea(AreaIDReq) returns (Area);
    // 根据查询条件获取区域
    rpc GetAreas(AreaQuery) returns (Areas);


  // 添加区域
  rpc AddArea(Area) returns (Response);
  // 修改区域
  rpc UpdateArea(UpdateAreaReq) returns (Response);
  // 删除区域
  rpc DeleteArea(AreaIDReq) returns (Response);

    // 获取货位类型
   rpc GetAreaTypes(AreaTypeQuery) returns (AreaTypes);
   // 获取货位类型
   rpc GetAreaType(AreaType) returns (AreaType);

   // 添加货位类型
   rpc AddAreaType(AreaType) returns (Response);
   // 修改货位类型
   rpc UpdateAreaType(UpdateAreaTypeReq) returns (Response);
   // 删除货位类型
   rpc DeleteAreaType(AreaType) returns (Response);


  //对应区域设置货位组
  rpc AddRacklots(RacklotsReq) returns(Response);
  rpc DeleteRacklots(RacklotsReq) returns(Response);
  rpc AddChildAreas(ChildsReq) returns(Response);
    //增加属性
    rpc AddProperties(PropertiesReq) returns(Response);

  // 设置区域的任务容量
  rpc SetOrderCapacity(CapReq) returns (Response);
  // 设置是否允许存车
  rpc SetInbound(FlagReq) returns (Response);
  // 设置是否允许取车
  rpc SetOutbound(FlagReq) returns (Response);
  // 设置是否启用
  rpc SetValid(FlagReq) returns (Response);
  //设置父区域
  rpc SetParentArea(ParentReq) returns(Response);

}

message AreaType {
  uint32 id = 1;
  string name = 2;
  string description = 3;
  string properties = 4;
}

message UpdateAreaType {
  google.protobuf.UInt32Value id = 1;
  google.protobuf.StringValue name = 2;  
  google.protobuf.StringValue description= 3;  
  string properties = 4;
}

message AreaTypes {
  repeated AreaType areaTypes = 1;
  uint32 totalpages = 2;
  uint32 currpages = 3;
  uint32 totals = 4;
}

message Area {
  // 区域ID
  uint32 id = 20;
  // 父级区域ID
  uint32 parentAreaID = 21;
  // 区域类型
  AreaType type = 22;
  //区域的货位列表，待仔细考虑
  repeated uint32 racklots = 23;

  // 区域任务容量
  uint32 orderCapacity = 25;
  //是否允许入库
  bool isInbound = 28;
  //是否允许出库
  bool isOutbound = 29;
  bool isValid =  32;

   // 子级区域ID
   repeated uint32 childAreaIDs = 27;

   map<string,string> properties = 31;
}

message UpdateArea {
     // 区域任务容量
  google.protobuf.UInt32Value id = 1;
  // 区域任务容量
  google.protobuf.UInt32Value orderCapacity = 25;
  //是否有效
  google.protobuf.BoolValue isValid = 27;
  //是否允许入库
  google.protobuf.BoolValue isInbound = 28;
  //是否允许出库
  google.protobuf.BoolValue isOutbound = 29;
  // 父区域
  google.protobuf.UInt32Value parentAreaID = 2;

  //区域的货位列表，待仔细考虑
  repeated uint32 racklots = 23;

  map<string,string> properties = 31;
}

message UpdateAreaReq {
    int32 id = 1;
    UpdateArea area = 2;
}

message UpdateAreaTypeReq {
    int32 id = 1;
    UpdateAreaType area = 2;
}

message Response {}

message AreaIDReq { int32 id = 1; }

message AreaFilter {
  repeated AreaFilter and = 1;
  repeated AreaFilter or = 2;
  repeated uint32 idIn = 3;                                 
	repeated uint32 childAreaIDIn =4;                        
  repeated uint32 racklotIDIn = 5;          
  google.protobuf.BoolValue isInbound = 6;             
	google.protobuf.BoolValue isOutbound = 7;             
  google.protobuf.BoolValue isValid = 8;     
  google.protobuf.UInt32Value parentAreaID = 9;   
  AreaTypeFilter typeFilter  = 11;
  AreaPropertiesFilter  propertiesFilter = 12;     
}

message AreaTypeFilter {
  repeated AreaTypeFilter and = 1;
  repeated AreaTypeFilter or = 2;
  repeated uint32 idIn = 3;
  repeated string nameIn = 4;
  google.protobuf.UInt32Value id = 5;  
  google.protobuf.StringValue name = 6;  
}

message AreaPropertiesFilter {
  string key  = 1;
  string value = 2; 
}

message AreaQuery {
  uint32 limit = 1;
  uint32 offset = 2;
  uint32 page = 3;
  uint32 perPage = 4;
  AreaFilter filter = 7;
}

message AreaTypeQuery {
  uint32 limit = 1;
  uint32 offset = 2;
  uint32 page = 3;
  uint32 perPage = 4;
  AreaTypeFilter filter = 7;
}

message Areas { 
  repeated Area areas = 1;
  uint32 totalpages = 2;
  uint32 currpages = 3;
  uint32 totals = 4;
}

message TypeReq {
  uint32 id = 1;
  int32 type = 2;
  string name = 3;
}

message FlagReq {
  uint32 id = 1;
  bool flag = 2;
}

message CapReq {
  uint32 id = 1;
  uint32 cap = 2;
}

message RacklotsReq {
   uint32 id =1;
    repeated uint32 racklots =2;
}

message TaskReq {
    uint32 id = 1;
    uint32 taskID = 2;
}

message PropertiesReq {
  uint32 id = 1;
  repeated Property properties = 2;
}

message Property{
    string key = 1;
    string value = 2;
}

message ParentReq {
  uint32 id = 1;
  uint32 parentAreaID = 2;
}

message ChildsReq {
  uint32 id = 1;
  repeated uint32 childAreaIDs = 2;
}