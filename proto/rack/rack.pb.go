// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: proto/rack/rack.proto

package go_micro_srv_rack

import (
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CellReportReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CellReportReq) Reset() {
	*x = CellReportReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rack_rack_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellReportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellReportReq) ProtoMessage() {}

func (x *CellReportReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rack_rack_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellReportReq.ProtoReflect.Descriptor instead.
func (*CellReportReq) Descriptor() ([]byte, []int) {
	return file_proto_rack_rack_proto_rawDescGZIP(), []int{0}
}

type CellReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total           uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	MaterialTotal   uint32 `protobuf:"varint,2,opt,name=materialTotal,proto3" json:"materialTotal,omitempty"`
	NoMaterialTotal uint32 `protobuf:"varint,3,opt,name=noMaterialTotal,proto3" json:"noMaterialTotal,omitempty"`
	ValidTotal      uint32 `protobuf:"varint,4,opt,name=validTotal,proto3" json:"validTotal,omitempty"`
	InvalidTotal    uint32 `protobuf:"varint,5,opt,name=invalidTotal,proto3" json:"invalidTotal,omitempty"`
}

func (x *CellReport) Reset() {
	*x = CellReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rack_rack_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellReport) ProtoMessage() {}

func (x *CellReport) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rack_rack_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellReport.ProtoReflect.Descriptor instead.
func (*CellReport) Descriptor() ([]byte, []int) {
	return file_proto_rack_rack_proto_rawDescGZIP(), []int{1}
}

func (x *CellReport) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CellReport) GetMaterialTotal() uint32 {
	if x != nil {
		return x.MaterialTotal
	}
	return 0
}

func (x *CellReport) GetNoMaterialTotal() uint32 {
	if x != nil {
		return x.NoMaterialTotal
	}
	return 0
}

func (x *CellReport) GetValidTotal() uint32 {
	if x != nil {
		return x.ValidTotal
	}
	return 0
}

func (x *CellReport) GetInvalidTotal() uint32 {
	if x != nil {
		return x.InvalidTotal
	}
	return 0
}

type RackReportReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RackReportReq) Reset() {
	*x = RackReportReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rack_rack_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RackReportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RackReportReq) ProtoMessage() {}

func (x *RackReportReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rack_rack_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RackReportReq.ProtoReflect.Descriptor instead.
func (*RackReportReq) Descriptor() ([]byte, []int) {
	return file_proto_rack_rack_proto_rawDescGZIP(), []int{2}
}

type RackReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *RackReport) Reset() {
	*x = RackReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rack_rack_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RackReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RackReport) ProtoMessage() {}

func (x *RackReport) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rack_rack_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RackReport.ProtoReflect.Descriptor instead.
func (*RackReport) Descriptor() ([]byte, []int) {
	return file_proto_rack_rack_proto_rawDescGZIP(), []int{3}
}

func (x *RackReport) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type RackType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RackType) Reset() {
	*x = RackType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rack_rack_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RackType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RackType) ProtoMessage() {}

func (x *RackType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rack_rack_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RackType.ProtoReflect.Descriptor instead.
func (*RackType) Descriptor() ([]byte, []int) {
	return file_proto_rack_rack_proto_rawDescGZIP(), []int{4}
}

func (x *RackType) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RackType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CellType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Length      uint32 `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`
	Width       uint32 `protobuf:"varint,5,opt,name=width,proto3" json:"width,omitempty"`
	Height      uint32 `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
	Description string `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	IsValid     bool   `protobuf:"varint,9,opt,name=isValid,proto3" json:"isValid,omitempty"`
	Properties  string `protobuf:"bytes,10,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *CellType) Reset() {
	*x = CellType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rack_rack_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellType) ProtoMessage() {}

func (x *CellType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rack_rack_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellType.ProtoReflect.Descriptor instead.
func (*CellType) Descriptor() ([]byte, []int) {
	return file_proto_rack_rack_proto_rawDescGZIP(), []int{5}
}

func (x *CellType) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CellType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CellType) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *CellType) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *CellType) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *CellType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CellType) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CellType) GetProperties() string {
	if x != nil {
		return x.Properties
	}
	return ""
}

type IDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IDReq) Reset() {
	*x = IDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rack_rack_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDReq) ProtoMessage() {}

func (x *IDReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rack_rack_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDReq.ProtoReflect.Descriptor instead.
func (*IDReq) Descriptor() ([]byte, []int) {
	return file_proto_rack_rack_proto_rawDescGZIP(), []int{6}
}

func (x *IDReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type IDsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []uint32 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *IDsReq) Reset() {
	*x = IDsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rack_rack_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDsReq) ProtoMessage() {}

func (x *IDsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rack_rack_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDsReq.ProtoReflect.Descriptor instead.
func (*IDsReq) Descriptor() ([]byte, []int) {
	return file_proto_rack_rack_proto_rawDescGZIP(), []int{7}
}

func (x *IDsReq) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// Cell 储位
type Cell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 储位ID
	Id uint32 `protobuf:"varint,21,opt,name=id,proto3" json:"id,omitempty"`
	// 储位编码
	Tag string `protobuf:"bytes,22,opt,name=tag,proto3" json:"tag,omitempty"`
	// 储位名称
	Name string `protobuf:"bytes,23,opt,name=name,proto3" json:"name,omitempty"`
	// 储位所在货架
	RackID uint32 `protobuf:"varint,24,opt,name=rackID,proto3" json:"rackID,omitempty"`
	Length uint32 `protobuf:"varint,25,opt,name=length,proto3" json:"length,omitempty"`
	Width  uint32 `protobuf:"varint,26,opt,name=width,proto3" json:"width,omitempty"`
	Height uint32 `protobuf:"varint,27,opt,name=height,proto3" json:"height,omitempty"`
	// 储位在货架的哪一层
	Row uint32 `protobuf:"varint,34,opt,name=row,proto3" json:"row,omitempty"`
	// 储位在货架上的编号
	Column uint32 `protobuf:"varint,35,opt,name=column,proto3" json:"column,omitempty"`
	// 是否禁用
	IsValid bool `protobuf:"varint,30,opt,name=isValid,proto3" json:"isValid,omitempty"`
	// 存放的物料对于的编号
	MaterialID int64 `protobuf:"varint,31,opt,name=materialID,proto3" json:"materialID,omitempty"`
	// cell类型id
	Type *CellType `protobuf:"bytes,32,opt,name=type,proto3" json:"type,omitempty"`
	//是否被占用
	IsOccupied bool `protobuf:"varint,33,opt,name=isOccupied,proto3" json:"isOccupied,omitempty"`
	//储位状态
	Status     int32  `protobuf:"varint,36,opt,name=status,proto3" json:"status,omitempty"`
	Properties string `protobuf:"bytes,37,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *Cell) Reset() {
	*x = Cell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rack_rack_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cell) ProtoMessage() {}

func (x *Cell) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rack_rack_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cell.ProtoReflect.Descriptor instead.
func (*Cell) Descriptor() ([]byte, []int) {
	return file_proto_rack_rack_proto_rawDescGZIP(), []int{8}
}

func (x *Cell) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Cell) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *Cell) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cell) GetRackID() uint32 {
	if x != nil {
		return x.RackID
	}
	return 0
}

func (x *Cell) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Cell) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Cell) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Cell) GetRow() uint32 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *Cell) GetColumn() uint32 {
	if x != nil {
		return x.Column
	}
	return 0
}

func (x *Cell) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *Cell) GetMaterialID() int64 {
	if x != nil {
		return x.MaterialID
	}
	return 0
}

func (x *Cell) GetType() *CellType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Cell) GetIsOccupied() bool {
	if x != nil {
		return x.IsOccupied
	}
	return false
}

func (x *Cell) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Cell) GetProperties() string {
	if x != nil {
		return x.Properties
	}
	return ""
}

type Rack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 货架编码
	Id   uint32 `protobuf:"varint,20,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,30,opt,name=name,proto3" json:"name,omitempty"`
	// 货架类型
	Type   *RackType `protobuf:"bytes,21,opt,name=type,proto3" json:"type,omitempty"`
	Length uint32    `protobuf:"varint,23,opt,name=length,proto3" json:"length,omitempty"`
	Width  uint32    `protobuf:"varint,24,opt,name=width,proto3" json:"width,omitempty"`
	Height uint32    `protobuf:"varint,25,opt,name=height,proto3" json:"height,omitempty"`
	// 所在货位
	RacklotID uint32 `protobuf:"varint,26,opt,name=racklotID,proto3" json:"racklotID,omitempty"`
	// 货架层数
	Layers uint32 `protobuf:"varint,27,opt,name=layers,proto3" json:"layers,omitempty"`
	// 货架状态(空、可用、被占用、满等)
	Status uint32 `protobuf:"varint,31,opt,name=status,proto3" json:"status,omitempty"`
	// 拣货面(A、B两面或者只有一面)
	PickingSurface uint32 `protobuf:"varint,32,opt,name=pickingSurface,proto3" json:"pickingSurface,omitempty"`
	Description    string `protobuf:"bytes,28,opt,name=description,proto3" json:"description,omitempty"`
	// 货架储位
	Cells []*Cell `protobuf:"bytes,29,rep,name=cells,proto3" json:"cells,omitempty"`
	// 是否禁用
	IsValid bool `protobuf:"varint,22,opt,name=isValid,proto3" json:"isValid,omitempty"`
	//是否被占用
	IsOccupied bool `protobuf:"varint,33,opt,name=isOccupied,proto3" json:"isOccupied,omitempty"`
}

func (x *Rack) Reset() {
	*x = Rack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rack_rack_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rack) ProtoMessage() {}

func (x *Rack) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rack_rack_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rack.ProtoReflect.Descriptor instead.
func (*Rack) Descriptor() ([]byte, []int) {
	return file_proto_rack_rack_proto_rawDescGZIP(), []int{9}
}

func (x *Rack) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Rack) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Rack) GetType() *RackType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Rack) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Rack) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Rack) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Rack) GetRacklotID() uint32 {
	if x != nil {
		return x.RacklotID
	}
	return 0
}

func (x *Rack) GetLayers() uint32 {
	if x != nil {
		return x.Layers
	}
	return 0
}

func (x *Rack) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Rack) GetPickingSurface() uint32 {
	if x != nil {
		return x.PickingSurface
	}
	return 0
}

func (x *Rack) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Rack) GetCells() []*Cell {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *Rack) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *Rack) GetIsOccupied() bool {
	if x != nil {
		return x.IsOccupied
	}
	return false
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rack_rack_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rack_rack_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_proto_rack_rack_proto_rawDescGZIP(), []int{10}
}

type UpdateRackReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Rack *UpdateRack `protobuf:"bytes,2,opt,name=rack,proto3" json:"rack,omitempty"`
}

func (x *UpdateRackReq) Reset() {
	*x = UpdateRackReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rack_rack_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRackReq) ProtoMessage() {}

func (x *UpdateRackReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rack_rack_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRackReq.ProtoReflect.Descriptor instead.
func (*UpdateRackReq) Descriptor() ([]byte, []int) {
	return file_proto_rack_rack_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateRackReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateRackReq) GetRack() *UpdateRack {
	if x != nil {
		return x.Rack
	}
	return nil
}

type UpdateRack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *wrappers.UInt32Value `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           *wrappers.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RackType       *wrappers.UInt32Value `protobuf:"bytes,3,opt,name=rackType,proto3" json:"rackType,omitempty"`
	Length         *wrappers.UInt32Value `protobuf:"bytes,4,opt,name=length,proto3" json:"length,omitempty"`
	Width          *wrappers.UInt32Value `protobuf:"bytes,5,opt,name=width,proto3" json:"width,omitempty"`
	Height         *wrappers.UInt32Value `protobuf:"bytes,6,opt,name=height,proto3" json:"height,omitempty"`
	Layers         *wrappers.UInt32Value `protobuf:"bytes,7,opt,name=layers,proto3" json:"layers,omitempty"`
	PickingSurface *wrappers.UInt32Value `protobuf:"bytes,8,opt,name=pickingSurface,proto3" json:"pickingSurface,omitempty"`
	Description    *wrappers.StringValue `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	IsValid        *wrappers.BoolValue   `protobuf:"bytes,10,opt,name=isValid,proto3" json:"isValid,omitempty"`
}

func (x *UpdateRack) Reset() {
	*x = UpdateRack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rack_rack_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRack) ProtoMessage() {}

func (x *UpdateRack) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rack_rack_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRack.ProtoReflect.Descriptor instead.
func (*UpdateRack) Descriptor() ([]byte, []int) {
	return file_proto_rack_rack_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateRack) GetId() *wrappers.UInt32Value {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UpdateRack) GetName() *wrappers.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *UpdateRack) GetRackType() *wrappers.UInt32Value {
	if x != nil {
		return x.RackType
	}
	return nil
}

func (x *UpdateRack) GetLength() *wrappers.UInt32Value {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *UpdateRack) GetWidth() *wrappers.UInt32Value {
	if x != nil {
		return x.Width
	}
	return nil
}

func (x *UpdateRack) GetHeight() *wrappers.UInt32Value {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *UpdateRack) GetLayers() *wrappers.UInt32Value {
	if x != nil {
		return x.Layers
	}
	return nil
}

func (x *UpdateRack) GetPickingSurface() *wrappers.UInt32Value {
	if x != nil {
		return x.PickingSurface
	}
	return nil
}

func (x *UpdateRack) GetDescription() *wrappers.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *UpdateRack) GetIsValid() *wrappers.BoolValue {
	if x != nil {
		return x.IsValid
	}
	return nil
}

type UpdateCellReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Cell *UpdateCell `protobuf:"bytes,2,opt,name=cell,proto3" json:"cell,omitempty"`
}

func (x *UpdateCellReq) Reset() {
	*x = UpdateCellReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rack_rack_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCellReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCellReq) ProtoMessage() {}

func (x *UpdateCellReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rack_rack_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCellReq.ProtoReflect.Descriptor instead.
func (*UpdateCellReq) Descriptor() ([]byte, []int) {
	return file_proto_rack_rack_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateCellReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateCellReq) GetCell() *UpdateCell {
	if x != nil {
		return x.Cell
	}
	return nil
}

type UpdateCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *wrappers.UInt32Value `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     *wrappers.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tag      *wrappers.StringValue `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	Length   *wrappers.UInt32Value `protobuf:"bytes,4,opt,name=length,proto3" json:"length,omitempty"`
	Width    *wrappers.UInt32Value `protobuf:"bytes,5,opt,name=width,proto3" json:"width,omitempty"`
	Height   *wrappers.UInt32Value `protobuf:"bytes,6,opt,name=height,proto3" json:"height,omitempty"`
	Layer    *wrappers.UInt32Value `protobuf:"bytes,7,opt,name=layer,proto3" json:"layer,omitempty"`
	CellCode *wrappers.UInt32Value `protobuf:"bytes,10,opt,name=cellCode,proto3" json:"cellCode,omitempty"`
	RackID   *wrappers.UInt32Value `protobuf:"bytes,11,opt,name=rackID,proto3" json:"rackID,omitempty"`
	//是否禁用
	IsValid *wrappers.BoolValue `protobuf:"bytes,12,opt,name=isValid,proto3" json:"isValid,omitempty"`
	//存放的物料对于的编号
	MaterialID *wrappers.Int64Value `protobuf:"bytes,13,opt,name=materialID,proto3" json:"materialID,omitempty"`
	//物料类型
	MaterialType *wrappers.StringValue `protobuf:"bytes,14,opt,name=materialType,proto3" json:"materialType,omitempty"`
	// cell类型id
	CellType *wrappers.UInt32Value `protobuf:"bytes,15,opt,name=cellType,proto3" json:"cellType,omitempty"`
	//是否被占用
	IsOccupied *wrappers.BoolValue `protobuf:"bytes,16,opt,name=isOccupied,proto3" json:"isOccupied,omitempty"`
	//储位状态
	Status     *wrappers.UInt32Value `protobuf:"bytes,17,opt,name=status,proto3" json:"status,omitempty"`
	Properties string                `protobuf:"bytes,18,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *UpdateCell) Reset() {
	*x = UpdateCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rack_rack_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCell) ProtoMessage() {}

func (x *UpdateCell) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rack_rack_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCell.ProtoReflect.Descriptor instead.
func (*UpdateCell) Descriptor() ([]byte, []int) {
	return file_proto_rack_rack_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateCell) GetId() *wrappers.UInt32Value {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UpdateCell) GetName() *wrappers.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *UpdateCell) GetTag() *wrappers.StringValue {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *UpdateCell) GetLength() *wrappers.UInt32Value {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *UpdateCell) GetWidth() *wrappers.UInt32Value {
	if x != nil {
		return x.Width
	}
	return nil
}

func (x *UpdateCell) GetHeight() *wrappers.UInt32Value {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *UpdateCell) GetLayer() *wrappers.UInt32Value {
	if x != nil {
		return x.Layer
	}
	return nil
}

func (x *UpdateCell) GetCellCode() *wrappers.UInt32Value {
	if x != nil {
		return x.CellCode
	}
	return nil
}

func (x *UpdateCell) GetRackID() *wrappers.UInt32Value {
	if x != nil {
		return x.RackID
	}
	return nil
}

func (x *UpdateCell) GetIsValid() *wrappers.BoolValue {
	if x != nil {
		return x.IsValid
	}
	return nil
}

func (x *UpdateCell) GetMaterialID() *wrappers.Int64Value {
	if x != nil {
		return x.MaterialID
	}
	return nil
}

func (x *UpdateCell) GetMaterialType() *wrappers.StringValue {
	if x != nil {
		return x.MaterialType
	}
	return nil
}

func (x *UpdateCell) GetCellType() *wrappers.UInt32Value {
	if x != nil {
		return x.CellType
	}
	return nil
}

func (x *UpdateCell) GetIsOccupied() *wrappers.BoolValue {
	if x != nil {
		return x.IsOccupied
	}
	return nil
}

func (x *UpdateCell) GetStatus() *wrappers.UInt32Value {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UpdateCell) GetProperties() string {
	if x != nil {
		return x.Properties
	}
	return ""
}

type CellStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status int32  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CellStatusReq) Reset() {
	*x = CellStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rack_rack_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellStatusReq) ProtoMessage() {}

func (x *CellStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rack_rack_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellStatusReq.ProtoReflect.Descriptor instead.
func (*CellStatusReq) Descriptor() ([]byte, []int) {
	return file_proto_rack_rack_proto_rawDescGZIP(), []int{15}
}

func (x *CellStatusReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CellStatusReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type Racks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Racks      []*Rack `protobuf:"bytes,1,rep,name=racks,proto3" json:"racks,omitempty"`
	Totals     uint32  `protobuf:"varint,4,opt,name=totals,proto3" json:"totals,omitempty"`
	Totalpages uint32  `protobuf:"varint,2,opt,name=totalpages,proto3" json:"totalpages,omitempty"`
	Currpages  uint32  `protobuf:"varint,3,opt,name=currpages,proto3" json:"currpages,omitempty"`
}

func (x *Racks) Reset() {
	*x = Racks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rack_rack_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Racks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Racks) ProtoMessage() {}

func (x *Racks) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rack_rack_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Racks.ProtoReflect.Descriptor instead.
func (*Racks) Descriptor() ([]byte, []int) {
	return file_proto_rack_rack_proto_rawDescGZIP(), []int{16}
}

func (x *Racks) GetRacks() []*Rack {
	if x != nil {
		return x.Racks
	}
	return nil
}

func (x *Racks) GetTotals() uint32 {
	if x != nil {
		return x.Totals
	}
	return 0
}

func (x *Racks) GetTotalpages() uint32 {
	if x != nil {
		return x.Totalpages
	}
	return 0
}

func (x *Racks) GetCurrpages() uint32 {
	if x != nil {
		return x.Currpages
	}
	return 0
}

type CellsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RackID uint32  `protobuf:"varint,1,opt,name=rackID,proto3" json:"rackID,omitempty"`
	Cells  []*Cell `protobuf:"bytes,2,rep,name=cells,proto3" json:"cells,omitempty"`
}

func (x *CellsReq) Reset() {
	*x = CellsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rack_rack_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellsReq) ProtoMessage() {}

func (x *CellsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rack_rack_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellsReq.ProtoReflect.Descriptor instead.
func (*CellsReq) Descriptor() ([]byte, []int) {
	return file_proto_rack_rack_proto_rawDescGZIP(), []int{17}
}

func (x *CellsReq) GetRackID() uint32 {
	if x != nil {
		return x.RackID
	}
	return 0
}

func (x *CellsReq) GetCells() []*Cell {
	if x != nil {
		return x.Cells
	}
	return nil
}

type Cells struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cells      []*Cell `protobuf:"bytes,1,rep,name=cells,proto3" json:"cells,omitempty"`
	Totals     uint32  `protobuf:"varint,4,opt,name=totals,proto3" json:"totals,omitempty"`
	Totalpages uint32  `protobuf:"varint,2,opt,name=totalpages,proto3" json:"totalpages,omitempty"`
	Currpages  uint32  `protobuf:"varint,3,opt,name=currpages,proto3" json:"currpages,omitempty"`
}

func (x *Cells) Reset() {
	*x = Cells{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rack_rack_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cells) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cells) ProtoMessage() {}

func (x *Cells) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rack_rack_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cells.ProtoReflect.Descriptor instead.
func (*Cells) Descriptor() ([]byte, []int) {
	return file_proto_rack_rack_proto_rawDescGZIP(), []int{18}
}

func (x *Cells) GetCells() []*Cell {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *Cells) GetTotals() uint32 {
	if x != nil {
		return x.Totals
	}
	return 0
}

func (x *Cells) GetTotalpages() uint32 {
	if x != nil {
		return x.Totalpages
	}
	return 0
}

func (x *Cells) GetCurrpages() uint32 {
	if x != nil {
		return x.Currpages
	}
	return 0
}

type MaterialReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RackID       uint32 `protobuf:"varint,1,opt,name=rackID,proto3" json:"rackID,omitempty"`
	CellID       uint32 `protobuf:"varint,2,opt,name=cellID,proto3" json:"cellID,omitempty"` //或者使用Cell的tag字段
	MaterialID   int64  `protobuf:"varint,3,opt,name=materialID,proto3" json:"materialID,omitempty"`
	MaterialType string `protobuf:"bytes,4,opt,name=materialType,proto3" json:"materialType,omitempty"`
}

func (x *MaterialReq) Reset() {
	*x = MaterialReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rack_rack_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterialReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterialReq) ProtoMessage() {}

func (x *MaterialReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rack_rack_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterialReq.ProtoReflect.Descriptor instead.
func (*MaterialReq) Descriptor() ([]byte, []int) {
	return file_proto_rack_rack_proto_rawDescGZIP(), []int{19}
}

func (x *MaterialReq) GetRackID() uint32 {
	if x != nil {
		return x.RackID
	}
	return 0
}

func (x *MaterialReq) GetCellID() uint32 {
	if x != nil {
		return x.CellID
	}
	return 0
}

func (x *MaterialReq) GetMaterialID() int64 {
	if x != nil {
		return x.MaterialID
	}
	return 0
}

func (x *MaterialReq) GetMaterialType() string {
	if x != nil {
		return x.MaterialType
	}
	return ""
}

type RackQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   uint32      `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  uint32      `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Page    uint32      `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PerPage uint32      `protobuf:"varint,4,opt,name=perPage,proto3" json:"perPage,omitempty"`
	Filter  *RackFilter `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *RackQuery) Reset() {
	*x = RackQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rack_rack_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RackQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RackQuery) ProtoMessage() {}

func (x *RackQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rack_rack_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RackQuery.ProtoReflect.Descriptor instead.
func (*RackQuery) Descriptor() ([]byte, []int) {
	return file_proto_rack_rack_proto_rawDescGZIP(), []int{20}
}

func (x *RackQuery) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RackQuery) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *RackQuery) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RackQuery) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *RackQuery) GetFilter() *RackFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type CellQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   uint32      `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  uint32      `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Page    uint32      `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PerPage uint32      `protobuf:"varint,4,opt,name=perPage,proto3" json:"perPage,omitempty"`
	Filter  *CellFilter `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *CellQuery) Reset() {
	*x = CellQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rack_rack_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellQuery) ProtoMessage() {}

func (x *CellQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rack_rack_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellQuery.ProtoReflect.Descriptor instead.
func (*CellQuery) Descriptor() ([]byte, []int) {
	return file_proto_rack_rack_proto_rawDescGZIP(), []int{21}
}

func (x *CellQuery) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *CellQuery) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *CellQuery) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CellQuery) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *CellQuery) GetFilter() *CellFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type RackTypeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   uint32          `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  uint32          `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Page    uint32          `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PerPage uint32          `protobuf:"varint,4,opt,name=perPage,proto3" json:"perPage,omitempty"`
	Filter  *RackTypeFilter `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *RackTypeQuery) Reset() {
	*x = RackTypeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rack_rack_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RackTypeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RackTypeQuery) ProtoMessage() {}

func (x *RackTypeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rack_rack_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RackTypeQuery.ProtoReflect.Descriptor instead.
func (*RackTypeQuery) Descriptor() ([]byte, []int) {
	return file_proto_rack_rack_proto_rawDescGZIP(), []int{22}
}

func (x *RackTypeQuery) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RackTypeQuery) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *RackTypeQuery) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RackTypeQuery) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *RackTypeQuery) GetFilter() *RackTypeFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type RackFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	And            []*RackFilter         `protobuf:"bytes,1,rep,name=and,proto3" json:"and,omitempty"`
	Or             []*RackFilter         `protobuf:"bytes,2,rep,name=or,proto3" json:"or,omitempty"`
	IdIn           []uint32              `protobuf:"varint,3,rep,packed,name=idIn,proto3" json:"idIn,omitempty"`
	RacklotIdIn    []uint32              `protobuf:"varint,14,rep,packed,name=racklotIdIn,proto3" json:"racklotIdIn,omitempty"`
	RacklotID      *wrappers.UInt32Value `protobuf:"bytes,5,opt,name=racklotID,proto3" json:"racklotID,omitempty"`
	HasBindRacklot *wrappers.BoolValue   `protobuf:"bytes,15,opt,name=hasBindRacklot,proto3" json:"hasBindRacklot,omitempty"`
	IsValid        *wrappers.BoolValue   `protobuf:"bytes,8,opt,name=isValid,proto3" json:"isValid,omitempty"`
	IsOccupied     *wrappers.BoolValue   `protobuf:"bytes,9,opt,name=isOccupied,proto3" json:"isOccupied,omitempty"`
	Type           *RackTypeFilter       `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty"`
	Cell           *CellFilter           `protobuf:"bytes,13,opt,name=cell,proto3" json:"cell,omitempty"`
}

func (x *RackFilter) Reset() {
	*x = RackFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rack_rack_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RackFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RackFilter) ProtoMessage() {}

func (x *RackFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rack_rack_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RackFilter.ProtoReflect.Descriptor instead.
func (*RackFilter) Descriptor() ([]byte, []int) {
	return file_proto_rack_rack_proto_rawDescGZIP(), []int{23}
}

func (x *RackFilter) GetAnd() []*RackFilter {
	if x != nil {
		return x.And
	}
	return nil
}

func (x *RackFilter) GetOr() []*RackFilter {
	if x != nil {
		return x.Or
	}
	return nil
}

func (x *RackFilter) GetIdIn() []uint32 {
	if x != nil {
		return x.IdIn
	}
	return nil
}

func (x *RackFilter) GetRacklotIdIn() []uint32 {
	if x != nil {
		return x.RacklotIdIn
	}
	return nil
}

func (x *RackFilter) GetRacklotID() *wrappers.UInt32Value {
	if x != nil {
		return x.RacklotID
	}
	return nil
}

func (x *RackFilter) GetHasBindRacklot() *wrappers.BoolValue {
	if x != nil {
		return x.HasBindRacklot
	}
	return nil
}

func (x *RackFilter) GetIsValid() *wrappers.BoolValue {
	if x != nil {
		return x.IsValid
	}
	return nil
}

func (x *RackFilter) GetIsOccupied() *wrappers.BoolValue {
	if x != nil {
		return x.IsOccupied
	}
	return nil
}

func (x *RackFilter) GetType() *RackTypeFilter {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *RackFilter) GetCell() *CellFilter {
	if x != nil {
		return x.Cell
	}
	return nil
}

type CellFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	And           []*CellFilter         `protobuf:"bytes,1,rep,name=and,proto3" json:"and,omitempty"`
	Or            []*CellFilter         `protobuf:"bytes,2,rep,name=or,proto3" json:"or,omitempty"`
	Type          *CellTypeFilter       `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty"`
	Id            *wrappers.UInt32Value `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	IdIn          []uint32              `protobuf:"varint,3,rep,packed,name=idIn,proto3" json:"idIn,omitempty"`
	Name          *wrappers.StringValue `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	NameIn        []string              `protobuf:"bytes,4,rep,name=nameIn,proto3" json:"nameIn,omitempty"`
	MaterialIDIn  []int64               `protobuf:"varint,10,rep,packed,name=materialIDIn,proto3" json:"materialIDIn,omitempty"`
	MaterialID    *wrappers.Int64Value  `protobuf:"bytes,13,opt,name=materialID,proto3" json:"materialID,omitempty"`
	RackID        *wrappers.UInt32Value `protobuf:"bytes,7,opt,name=rackID,proto3" json:"rackID,omitempty"`
	IsValid       *wrappers.BoolValue   `protobuf:"bytes,8,opt,name=isValid,proto3" json:"isValid,omitempty"`
	IsOccupied    *wrappers.BoolValue   `protobuf:"bytes,9,opt,name=isOccupied,proto3" json:"isOccupied,omitempty"`
	Properties    []*PropertyFilter     `protobuf:"bytes,14,rep,name=properties,proto3" json:"properties,omitempty"`
	IsHasMaterial *wrappers.BoolValue   `protobuf:"bytes,15,opt,name=isHasMaterial,proto3" json:"isHasMaterial,omitempty"`
}

func (x *CellFilter) Reset() {
	*x = CellFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rack_rack_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellFilter) ProtoMessage() {}

func (x *CellFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rack_rack_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellFilter.ProtoReflect.Descriptor instead.
func (*CellFilter) Descriptor() ([]byte, []int) {
	return file_proto_rack_rack_proto_rawDescGZIP(), []int{24}
}

func (x *CellFilter) GetAnd() []*CellFilter {
	if x != nil {
		return x.And
	}
	return nil
}

func (x *CellFilter) GetOr() []*CellFilter {
	if x != nil {
		return x.Or
	}
	return nil
}

func (x *CellFilter) GetType() *CellTypeFilter {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *CellFilter) GetId() *wrappers.UInt32Value {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CellFilter) GetIdIn() []uint32 {
	if x != nil {
		return x.IdIn
	}
	return nil
}

func (x *CellFilter) GetName() *wrappers.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CellFilter) GetNameIn() []string {
	if x != nil {
		return x.NameIn
	}
	return nil
}

func (x *CellFilter) GetMaterialIDIn() []int64 {
	if x != nil {
		return x.MaterialIDIn
	}
	return nil
}

func (x *CellFilter) GetMaterialID() *wrappers.Int64Value {
	if x != nil {
		return x.MaterialID
	}
	return nil
}

func (x *CellFilter) GetRackID() *wrappers.UInt32Value {
	if x != nil {
		return x.RackID
	}
	return nil
}

func (x *CellFilter) GetIsValid() *wrappers.BoolValue {
	if x != nil {
		return x.IsValid
	}
	return nil
}

func (x *CellFilter) GetIsOccupied() *wrappers.BoolValue {
	if x != nil {
		return x.IsOccupied
	}
	return nil
}

func (x *CellFilter) GetProperties() []*PropertyFilter {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *CellFilter) GetIsHasMaterial() *wrappers.BoolValue {
	if x != nil {
		return x.IsHasMaterial
	}
	return nil
}

type RackTypeFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	And    []*RackTypeFilter     `protobuf:"bytes,1,rep,name=and,proto3" json:"and,omitempty"`
	Or     []*RackTypeFilter     `protobuf:"bytes,2,rep,name=or,proto3" json:"or,omitempty"`
	IdIn   []uint32              `protobuf:"varint,3,rep,packed,name=idIn,proto3" json:"idIn,omitempty"`
	NameIn []string              `protobuf:"bytes,4,rep,name=nameIn,proto3" json:"nameIn,omitempty"`
	Id     *wrappers.UInt32Value `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	Name   *wrappers.StringValue `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RackTypeFilter) Reset() {
	*x = RackTypeFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rack_rack_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RackTypeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RackTypeFilter) ProtoMessage() {}

func (x *RackTypeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rack_rack_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RackTypeFilter.ProtoReflect.Descriptor instead.
func (*RackTypeFilter) Descriptor() ([]byte, []int) {
	return file_proto_rack_rack_proto_rawDescGZIP(), []int{25}
}

func (x *RackTypeFilter) GetAnd() []*RackTypeFilter {
	if x != nil {
		return x.And
	}
	return nil
}

func (x *RackTypeFilter) GetOr() []*RackTypeFilter {
	if x != nil {
		return x.Or
	}
	return nil
}

func (x *RackTypeFilter) GetIdIn() []uint32 {
	if x != nil {
		return x.IdIn
	}
	return nil
}

func (x *RackTypeFilter) GetNameIn() []string {
	if x != nil {
		return x.NameIn
	}
	return nil
}

func (x *RackTypeFilter) GetId() *wrappers.UInt32Value {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RackTypeFilter) GetName() *wrappers.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type CellTypeFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	And    []*CellTypeFilter     `protobuf:"bytes,1,rep,name=and,proto3" json:"and,omitempty"`
	Or     []*CellTypeFilter     `protobuf:"bytes,2,rep,name=or,proto3" json:"or,omitempty"`
	IdIn   []uint32              `protobuf:"varint,3,rep,packed,name=idIn,proto3" json:"idIn,omitempty"`
	NameIn []string              `protobuf:"bytes,4,rep,name=nameIn,proto3" json:"nameIn,omitempty"`
	Id     *wrappers.UInt32Value `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	Name   *wrappers.StringValue `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CellTypeFilter) Reset() {
	*x = CellTypeFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rack_rack_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellTypeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellTypeFilter) ProtoMessage() {}

func (x *CellTypeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rack_rack_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellTypeFilter.ProtoReflect.Descriptor instead.
func (*CellTypeFilter) Descriptor() ([]byte, []int) {
	return file_proto_rack_rack_proto_rawDescGZIP(), []int{26}
}

func (x *CellTypeFilter) GetAnd() []*CellTypeFilter {
	if x != nil {
		return x.And
	}
	return nil
}

func (x *CellTypeFilter) GetOr() []*CellTypeFilter {
	if x != nil {
		return x.Or
	}
	return nil
}

func (x *CellTypeFilter) GetIdIn() []uint32 {
	if x != nil {
		return x.IdIn
	}
	return nil
}

func (x *CellTypeFilter) GetNameIn() []string {
	if x != nil {
		return x.NameIn
	}
	return nil
}

func (x *CellTypeFilter) GetId() *wrappers.UInt32Value {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CellTypeFilter) GetName() *wrappers.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type PropertyFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Type  string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *PropertyFilter) Reset() {
	*x = PropertyFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rack_rack_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyFilter) ProtoMessage() {}

func (x *PropertyFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rack_rack_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyFilter.ProtoReflect.Descriptor instead.
func (*PropertyFilter) Descriptor() ([]byte, []int) {
	return file_proto_rack_rack_proto_rawDescGZIP(), []int{27}
}

func (x *PropertyFilter) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PropertyFilter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *PropertyFilter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type FlagReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Flag bool   `protobuf:"varint,2,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (x *FlagReq) Reset() {
	*x = FlagReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rack_rack_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagReq) ProtoMessage() {}

func (x *FlagReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rack_rack_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagReq.ProtoReflect.Descriptor instead.
func (*FlagReq) Descriptor() ([]byte, []int) {
	return file_proto_rack_rack_proto_rawDescGZIP(), []int{28}
}

func (x *FlagReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FlagReq) GetFlag() bool {
	if x != nil {
		return x.Flag
	}
	return false
}

type RacklotReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RackID    uint32 `protobuf:"varint,1,opt,name=rackID,proto3" json:"rackID,omitempty"`
	RacklotID uint32 `protobuf:"varint,2,opt,name=racklotID,proto3" json:"racklotID,omitempty"`
}

func (x *RacklotReq) Reset() {
	*x = RacklotReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rack_rack_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RacklotReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RacklotReq) ProtoMessage() {}

func (x *RacklotReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rack_rack_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RacklotReq.ProtoReflect.Descriptor instead.
func (*RacklotReq) Descriptor() ([]byte, []int) {
	return file_proto_rack_rack_proto_rawDescGZIP(), []int{29}
}

func (x *RacklotReq) GetRackID() uint32 {
	if x != nil {
		return x.RackID
	}
	return 0
}

func (x *RacklotReq) GetRacklotID() uint32 {
	if x != nil {
		return x.RacklotID
	}
	return 0
}

type TypeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type uint32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TypeReq) Reset() {
	*x = TypeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rack_rack_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeReq) ProtoMessage() {}

func (x *TypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rack_rack_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeReq.ProtoReflect.Descriptor instead.
func (*TypeReq) Descriptor() ([]byte, []int) {
	return file_proto_rack_rack_proto_rawDescGZIP(), []int{30}
}

func (x *TypeReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TypeReq) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *TypeReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Property) Reset() {
	*x = Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rack_rack_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Property) ProtoMessage() {}

func (x *Property) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rack_rack_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Property.ProtoReflect.Descriptor instead.
func (*Property) Descriptor() ([]byte, []int) {
	return file_proto_rack_rack_proto_rawDescGZIP(), []int{31}
}

func (x *Property) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Property) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type PropertiesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Properties string `protobuf:"bytes,2,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *PropertiesReq) Reset() {
	*x = PropertiesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rack_rack_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertiesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertiesReq) ProtoMessage() {}

func (x *PropertiesReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rack_rack_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertiesReq.ProtoReflect.Descriptor instead.
func (*PropertiesReq) Descriptor() ([]byte, []int) {
	return file_proto_rack_rack_proto_rawDescGZIP(), []int{32}
}

func (x *PropertiesReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PropertiesReq) GetProperties() string {
	if x != nil {
		return x.Properties
	}
	return ""
}

var File_proto_rack_rack_proto protoreflect.FileDescriptor

var file_proto_rack_rack_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x61, 0x63, 0x6b, 0x2f, 0x72, 0x61, 0x63,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0f, 0x0a, 0x0d, 0x43, 0x65,
	0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x22, 0xb6, 0x01, 0x0a, 0x0a,
	0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x6f, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x6e, 0x6f, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0x0f, 0x0a, 0x0d, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x22, 0x22, 0x0a, 0x0a, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x2e, 0x0a, 0x08, 0x52, 0x61, 0x63,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x08, 0x43, 0x65,
	0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x17, 0x0a, 0x05,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x06, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x22, 0x87, 0x03, 0x0a, 0x04, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61,
	0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x72, 0x6f, 0x77,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x44,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x49, 0x44, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e,
	0x72, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65,
	0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x63, 0x63, 0x75, 0x70,
	0x69, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0xa2, 0x03, 0x0a, 0x04,
	0x52, 0x61, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x49, 0x44, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73,
	0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52,
	0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64,
	0x22, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x52, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a,
	0x04, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x04, 0x72, 0x61, 0x63, 0x6b,
	0x22, 0xb8, 0x04, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x12,
	0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x08, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x32, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12,
	0x44, 0x0a, 0x0e, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x0d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04,
	0x63, 0x65, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x22,
	0xe1, 0x06, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x2c,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x34,
	0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x32,
	0x0a, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x06,
	0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x61, 0x63, 0x6b,
	0x49, 0x44, 0x12, 0x34, 0x0a, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x69, 0x73, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x12, 0x34, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x22, 0x37, 0x0a, 0x0d, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8c, 0x01, 0x0a,
	0x05, 0x52, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x05,
	0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x75, 0x72, 0x72, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x70, 0x61, 0x67, 0x65, 0x73, 0x22, 0x51, 0x0a, 0x08, 0x43,
	0x65, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x63, 0x6b, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x12,
	0x2d, 0x0a, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61,
	0x63, 0x6b, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x22, 0x8c,
	0x01, 0x0a, 0x05, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x65, 0x6c, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x65, 0x6c, 0x6c,
	0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x72, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x70, 0x61, 0x67, 0x65, 0x73, 0x22, 0x81, 0x01,
	0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72,
	0x61, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x9e, 0x01, 0x0a, 0x09, 0x52, 0x61, 0x63, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e,
	0x52, 0x61, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0x9e, 0x01, 0x0a, 0x09, 0x43, 0x65, 0x6c, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0xa6, 0x01, 0x0a, 0x0d, 0x52, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x39, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xfe, 0x03, 0x0a,
	0x0a, 0x52, 0x61, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x03, 0x61,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x61, 0x63,
	0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x03, 0x61, 0x6e, 0x64, 0x12, 0x2d, 0x0a, 0x02,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x61, 0x63,
	0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x02, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x64, 0x49, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x69, 0x64, 0x49, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x49, 0x6e, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x49,
	0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x49, 0x44, 0x12, 0x42, 0x0a,
	0x0e, 0x68, 0x61, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f,
	0x74, 0x12, 0x34, 0x0a, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x69, 0x73, 0x4f, 0x63, 0x63,
	0x75, 0x70, 0x69, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x63, 0x63, 0x75, 0x70,
	0x69, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x65,
	0x6c, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x65, 0x6c,
	0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x22, 0xbd, 0x05,
	0x0a, 0x0a, 0x43, 0x65, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x03,
	0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x65,
	0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x03, 0x61, 0x6e, 0x64, 0x12, 0x2d, 0x0a,
	0x02, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x65,
	0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x02, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x43,
	0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x64, 0x49, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x04, 0x69, 0x64, 0x49, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x49, 0x6e, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49,
	0x44, 0x49, 0x6e, 0x12, 0x3b, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49,
	0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x44,
	0x12, 0x34, 0x0a, 0x06, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x0a,
	0x69, 0x73, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x73,
	0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x69,
	0x73, 0x48, 0x61, 0x73, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x69, 0x73, 0x48, 0x61, 0x73, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0x84, 0x02,
	0x0a, 0x0e, 0x52, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x33, 0x0a, 0x03, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63,
	0x6b, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x03, 0x61, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x02, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x02, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x64, 0x49, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x69, 0x64, 0x49, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61,
	0x6d, 0x65, 0x49, 0x6e, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x84, 0x02, 0x0a, 0x0e, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x03, 0x61, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x03, 0x61, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x02,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x65, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x02, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x64, 0x49, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x69,
	0x64, 0x49, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x12, 0x2c, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x0e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x2d, 0x0a, 0x07, 0x46, 0x6c, 0x61,
	0x67, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x22, 0x42, 0x0a, 0x0a, 0x52, 0x61, 0x63, 0x6b,
	0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x72, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74, 0x49, 0x44, 0x22, 0x41, 0x0a, 0x07,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x32, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x3f, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x32, 0x84, 0x11, 0x0a, 0x0b, 0x52, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x12,
	0x18, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72,
	0x61, 0x63, 0x6b, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x61,
	0x63, 0x6b, 0x12, 0x42, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x1c,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61,
	0x63, 0x6b, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x18, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b,
	0x2e, 0x52, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x43, 0x65, 0x6c,
	0x6c, 0x12, 0x18, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x12, 0x42, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x73,
	0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e,
	0x72, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x18,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61,
	0x63, 0x6b, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x52,
	0x61, 0x63, 0x6b, 0x12, 0x17, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x1a, 0x1b, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x41, 0x64, 0x64, 0x52, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x18, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x52,
	0x61, 0x63, 0x6b, 0x73, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x43, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x12,
	0x18, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72,
	0x61, 0x63, 0x6b, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x19, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x49,
	0x44, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b,
	0x12, 0x20, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e,
	0x72, 0x61, 0x63, 0x6b, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72,
	0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3f, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x17, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x43,
	0x65, 0x6c, 0x6c, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x43, 0x65, 0x6c, 0x6c,
	0x73, 0x12, 0x18, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x1a, 0x1b, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x18, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e,
	0x72, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a,
	0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c,
	0x73, 0x12, 0x19, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x20, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x19, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e,
	0x72, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x0c, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x19, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63,
	0x6b, 0x2e, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x61, 0x63,
	0x6b, 0x6c, 0x6f, 0x74, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x0d, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x52, 0x61, 0x63, 0x6b, 0x6c, 0x6f,
	0x74, 0x12, 0x18, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x4f, 0x63, 0x63, 0x75,
	0x70, 0x79, 0x52, 0x61, 0x63, 0x6b, 0x12, 0x18, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e,
	0x72, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a,
	0x0b, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x12, 0x18, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b,
	0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x65, 0x6c,
	0x6c, 0x73, 0x12, 0x19, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72,
	0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63,
	0x6b, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x19, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x49,
	0x44, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x42, 0x69, 0x6e, 0x64, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72,
	0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72,
	0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x47, 0x0a, 0x0e, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x12, 0x18, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x4f, 0x63, 0x63, 0x75,
	0x70, 0x79, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x18, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e,
	0x72, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a,
	0x0b, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x18, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b,
	0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x43, 0x65,
	0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x65, 0x6c,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x52,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x50, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x43,
	0x65, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x1e, 0x5a, 0x1c, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x61, 0x63, 0x6b, 0x3b, 0x67, 0x6f, 0x5f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x5f, 0x73, 0x72, 0x76, 0x5f, 0x72, 0x61, 0x63, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_rack_rack_proto_rawDescOnce sync.Once
	file_proto_rack_rack_proto_rawDescData = file_proto_rack_rack_proto_rawDesc
)

func file_proto_rack_rack_proto_rawDescGZIP() []byte {
	file_proto_rack_rack_proto_rawDescOnce.Do(func() {
		file_proto_rack_rack_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_rack_rack_proto_rawDescData)
	})
	return file_proto_rack_rack_proto_rawDescData
}

var file_proto_rack_rack_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_proto_rack_rack_proto_goTypes = []interface{}{
	(*CellReportReq)(nil),        // 0: go.micro.srv.rack.CellReportReq
	(*CellReport)(nil),           // 1: go.micro.srv.rack.CellReport
	(*RackReportReq)(nil),        // 2: go.micro.srv.rack.RackReportReq
	(*RackReport)(nil),           // 3: go.micro.srv.rack.RackReport
	(*RackType)(nil),             // 4: go.micro.srv.rack.RackType
	(*CellType)(nil),             // 5: go.micro.srv.rack.CellType
	(*IDReq)(nil),                // 6: go.micro.srv.rack.IDReq
	(*IDsReq)(nil),               // 7: go.micro.srv.rack.IDsReq
	(*Cell)(nil),                 // 8: go.micro.srv.rack.Cell
	(*Rack)(nil),                 // 9: go.micro.srv.rack.Rack
	(*Response)(nil),             // 10: go.micro.srv.rack.Response
	(*UpdateRackReq)(nil),        // 11: go.micro.srv.rack.UpdateRackReq
	(*UpdateRack)(nil),           // 12: go.micro.srv.rack.UpdateRack
	(*UpdateCellReq)(nil),        // 13: go.micro.srv.rack.UpdateCellReq
	(*UpdateCell)(nil),           // 14: go.micro.srv.rack.UpdateCell
	(*CellStatusReq)(nil),        // 15: go.micro.srv.rack.CellStatusReq
	(*Racks)(nil),                // 16: go.micro.srv.rack.Racks
	(*CellsReq)(nil),             // 17: go.micro.srv.rack.CellsReq
	(*Cells)(nil),                // 18: go.micro.srv.rack.Cells
	(*MaterialReq)(nil),          // 19: go.micro.srv.rack.MaterialReq
	(*RackQuery)(nil),            // 20: go.micro.srv.rack.RackQuery
	(*CellQuery)(nil),            // 21: go.micro.srv.rack.CellQuery
	(*RackTypeQuery)(nil),        // 22: go.micro.srv.rack.RackTypeQuery
	(*RackFilter)(nil),           // 23: go.micro.srv.rack.RackFilter
	(*CellFilter)(nil),           // 24: go.micro.srv.rack.CellFilter
	(*RackTypeFilter)(nil),       // 25: go.micro.srv.rack.RackTypeFilter
	(*CellTypeFilter)(nil),       // 26: go.micro.srv.rack.CellTypeFilter
	(*PropertyFilter)(nil),       // 27: go.micro.srv.rack.PropertyFilter
	(*FlagReq)(nil),              // 28: go.micro.srv.rack.FlagReq
	(*RacklotReq)(nil),           // 29: go.micro.srv.rack.RacklotReq
	(*TypeReq)(nil),              // 30: go.micro.srv.rack.TypeReq
	(*Property)(nil),             // 31: go.micro.srv.rack.Property
	(*PropertiesReq)(nil),        // 32: go.micro.srv.rack.PropertiesReq
	(*wrappers.UInt32Value)(nil), // 33: google.protobuf.UInt32Value
	(*wrappers.StringValue)(nil), // 34: google.protobuf.StringValue
	(*wrappers.BoolValue)(nil),   // 35: google.protobuf.BoolValue
	(*wrappers.Int64Value)(nil),  // 36: google.protobuf.Int64Value
}
var file_proto_rack_rack_proto_depIdxs = []int32{
	5,  // 0: go.micro.srv.rack.Cell.type:type_name -> go.micro.srv.rack.CellType
	4,  // 1: go.micro.srv.rack.Rack.type:type_name -> go.micro.srv.rack.RackType
	8,  // 2: go.micro.srv.rack.Rack.cells:type_name -> go.micro.srv.rack.Cell
	12, // 3: go.micro.srv.rack.UpdateRackReq.rack:type_name -> go.micro.srv.rack.UpdateRack
	33, // 4: go.micro.srv.rack.UpdateRack.id:type_name -> google.protobuf.UInt32Value
	34, // 5: go.micro.srv.rack.UpdateRack.name:type_name -> google.protobuf.StringValue
	33, // 6: go.micro.srv.rack.UpdateRack.rackType:type_name -> google.protobuf.UInt32Value
	33, // 7: go.micro.srv.rack.UpdateRack.length:type_name -> google.protobuf.UInt32Value
	33, // 8: go.micro.srv.rack.UpdateRack.width:type_name -> google.protobuf.UInt32Value
	33, // 9: go.micro.srv.rack.UpdateRack.height:type_name -> google.protobuf.UInt32Value
	33, // 10: go.micro.srv.rack.UpdateRack.layers:type_name -> google.protobuf.UInt32Value
	33, // 11: go.micro.srv.rack.UpdateRack.pickingSurface:type_name -> google.protobuf.UInt32Value
	34, // 12: go.micro.srv.rack.UpdateRack.description:type_name -> google.protobuf.StringValue
	35, // 13: go.micro.srv.rack.UpdateRack.isValid:type_name -> google.protobuf.BoolValue
	14, // 14: go.micro.srv.rack.UpdateCellReq.cell:type_name -> go.micro.srv.rack.UpdateCell
	33, // 15: go.micro.srv.rack.UpdateCell.id:type_name -> google.protobuf.UInt32Value
	34, // 16: go.micro.srv.rack.UpdateCell.name:type_name -> google.protobuf.StringValue
	34, // 17: go.micro.srv.rack.UpdateCell.tag:type_name -> google.protobuf.StringValue
	33, // 18: go.micro.srv.rack.UpdateCell.length:type_name -> google.protobuf.UInt32Value
	33, // 19: go.micro.srv.rack.UpdateCell.width:type_name -> google.protobuf.UInt32Value
	33, // 20: go.micro.srv.rack.UpdateCell.height:type_name -> google.protobuf.UInt32Value
	33, // 21: go.micro.srv.rack.UpdateCell.layer:type_name -> google.protobuf.UInt32Value
	33, // 22: go.micro.srv.rack.UpdateCell.cellCode:type_name -> google.protobuf.UInt32Value
	33, // 23: go.micro.srv.rack.UpdateCell.rackID:type_name -> google.protobuf.UInt32Value
	35, // 24: go.micro.srv.rack.UpdateCell.isValid:type_name -> google.protobuf.BoolValue
	36, // 25: go.micro.srv.rack.UpdateCell.materialID:type_name -> google.protobuf.Int64Value
	34, // 26: go.micro.srv.rack.UpdateCell.materialType:type_name -> google.protobuf.StringValue
	33, // 27: go.micro.srv.rack.UpdateCell.cellType:type_name -> google.protobuf.UInt32Value
	35, // 28: go.micro.srv.rack.UpdateCell.isOccupied:type_name -> google.protobuf.BoolValue
	33, // 29: go.micro.srv.rack.UpdateCell.status:type_name -> google.protobuf.UInt32Value
	9,  // 30: go.micro.srv.rack.Racks.racks:type_name -> go.micro.srv.rack.Rack
	8,  // 31: go.micro.srv.rack.CellsReq.cells:type_name -> go.micro.srv.rack.Cell
	8,  // 32: go.micro.srv.rack.Cells.cells:type_name -> go.micro.srv.rack.Cell
	23, // 33: go.micro.srv.rack.RackQuery.filter:type_name -> go.micro.srv.rack.RackFilter
	24, // 34: go.micro.srv.rack.CellQuery.filter:type_name -> go.micro.srv.rack.CellFilter
	25, // 35: go.micro.srv.rack.RackTypeQuery.filter:type_name -> go.micro.srv.rack.RackTypeFilter
	23, // 36: go.micro.srv.rack.RackFilter.and:type_name -> go.micro.srv.rack.RackFilter
	23, // 37: go.micro.srv.rack.RackFilter.or:type_name -> go.micro.srv.rack.RackFilter
	33, // 38: go.micro.srv.rack.RackFilter.racklotID:type_name -> google.protobuf.UInt32Value
	35, // 39: go.micro.srv.rack.RackFilter.hasBindRacklot:type_name -> google.protobuf.BoolValue
	35, // 40: go.micro.srv.rack.RackFilter.isValid:type_name -> google.protobuf.BoolValue
	35, // 41: go.micro.srv.rack.RackFilter.isOccupied:type_name -> google.protobuf.BoolValue
	25, // 42: go.micro.srv.rack.RackFilter.type:type_name -> go.micro.srv.rack.RackTypeFilter
	24, // 43: go.micro.srv.rack.RackFilter.cell:type_name -> go.micro.srv.rack.CellFilter
	24, // 44: go.micro.srv.rack.CellFilter.and:type_name -> go.micro.srv.rack.CellFilter
	24, // 45: go.micro.srv.rack.CellFilter.or:type_name -> go.micro.srv.rack.CellFilter
	26, // 46: go.micro.srv.rack.CellFilter.type:type_name -> go.micro.srv.rack.CellTypeFilter
	33, // 47: go.micro.srv.rack.CellFilter.id:type_name -> google.protobuf.UInt32Value
	34, // 48: go.micro.srv.rack.CellFilter.name:type_name -> google.protobuf.StringValue
	36, // 49: go.micro.srv.rack.CellFilter.materialID:type_name -> google.protobuf.Int64Value
	33, // 50: go.micro.srv.rack.CellFilter.rackID:type_name -> google.protobuf.UInt32Value
	35, // 51: go.micro.srv.rack.CellFilter.isValid:type_name -> google.protobuf.BoolValue
	35, // 52: go.micro.srv.rack.CellFilter.isOccupied:type_name -> google.protobuf.BoolValue
	27, // 53: go.micro.srv.rack.CellFilter.properties:type_name -> go.micro.srv.rack.PropertyFilter
	35, // 54: go.micro.srv.rack.CellFilter.isHasMaterial:type_name -> google.protobuf.BoolValue
	25, // 55: go.micro.srv.rack.RackTypeFilter.and:type_name -> go.micro.srv.rack.RackTypeFilter
	25, // 56: go.micro.srv.rack.RackTypeFilter.or:type_name -> go.micro.srv.rack.RackTypeFilter
	33, // 57: go.micro.srv.rack.RackTypeFilter.id:type_name -> google.protobuf.UInt32Value
	34, // 58: go.micro.srv.rack.RackTypeFilter.name:type_name -> google.protobuf.StringValue
	26, // 59: go.micro.srv.rack.CellTypeFilter.and:type_name -> go.micro.srv.rack.CellTypeFilter
	26, // 60: go.micro.srv.rack.CellTypeFilter.or:type_name -> go.micro.srv.rack.CellTypeFilter
	33, // 61: go.micro.srv.rack.CellTypeFilter.id:type_name -> google.protobuf.UInt32Value
	34, // 62: go.micro.srv.rack.CellTypeFilter.name:type_name -> google.protobuf.StringValue
	6,  // 63: go.micro.srv.rack.RackService.GetRack:input_type -> go.micro.srv.rack.IDReq
	20, // 64: go.micro.srv.rack.RackService.GetRacks:input_type -> go.micro.srv.rack.RackQuery
	6,  // 65: go.micro.srv.rack.RackService.GetCell:input_type -> go.micro.srv.rack.IDReq
	21, // 66: go.micro.srv.rack.RackService.GetCells:input_type -> go.micro.srv.rack.CellQuery
	9,  // 67: go.micro.srv.rack.RackService.AddRack:input_type -> go.micro.srv.rack.Rack
	16, // 68: go.micro.srv.rack.RackService.BatchAddRacks:input_type -> go.micro.srv.rack.Racks
	6,  // 69: go.micro.srv.rack.RackService.DeleteRack:input_type -> go.micro.srv.rack.IDReq
	7,  // 70: go.micro.srv.rack.RackService.BatchDeleteRacks:input_type -> go.micro.srv.rack.IDsReq
	11, // 71: go.micro.srv.rack.RackService.UpdateRack:input_type -> go.micro.srv.rack.UpdateRackReq
	8,  // 72: go.micro.srv.rack.RackService.AddCell:input_type -> go.micro.srv.rack.Cell
	18, // 73: go.micro.srv.rack.RackService.BatchAddCells:input_type -> go.micro.srv.rack.Cells
	6,  // 74: go.micro.srv.rack.RackService.DeleteCell:input_type -> go.micro.srv.rack.IDReq
	7,  // 75: go.micro.srv.rack.RackService.BatchDeleteCells:input_type -> go.micro.srv.rack.IDsReq
	13, // 76: go.micro.srv.rack.RackService.UpdateCell:input_type -> go.micro.srv.rack.UpdateCellReq
	7,  // 77: go.micro.srv.rack.RackService.EnableRacks:input_type -> go.micro.srv.rack.IDsReq
	7,  // 78: go.micro.srv.rack.RackService.DisableRacks:input_type -> go.micro.srv.rack.IDsReq
	29, // 79: go.micro.srv.rack.RackService.BindRacklot:input_type -> go.micro.srv.rack.RacklotReq
	6,  // 80: go.micro.srv.rack.RackService.UnbindRacklot:input_type -> go.micro.srv.rack.IDReq
	6,  // 81: go.micro.srv.rack.RackService.OccupyRack:input_type -> go.micro.srv.rack.IDReq
	6,  // 82: go.micro.srv.rack.RackService.ReleaseRack:input_type -> go.micro.srv.rack.IDReq
	7,  // 83: go.micro.srv.rack.RackService.EnableCells:input_type -> go.micro.srv.rack.IDsReq
	7,  // 84: go.micro.srv.rack.RackService.DisableCells:input_type -> go.micro.srv.rack.IDsReq
	19, // 85: go.micro.srv.rack.RackService.BindMaterial:input_type -> go.micro.srv.rack.MaterialReq
	6,  // 86: go.micro.srv.rack.RackService.UnbindMaterial:input_type -> go.micro.srv.rack.IDReq
	6,  // 87: go.micro.srv.rack.RackService.OccupyCell:input_type -> go.micro.srv.rack.IDReq
	6,  // 88: go.micro.srv.rack.RackService.ReleaseCell:input_type -> go.micro.srv.rack.IDReq
	32, // 89: go.micro.srv.rack.RackService.AddCellProperties:input_type -> go.micro.srv.rack.PropertiesReq
	15, // 90: go.micro.srv.rack.RackService.SetCellStatus:input_type -> go.micro.srv.rack.CellStatusReq
	2,  // 91: go.micro.srv.rack.RackService.GetRackReport:input_type -> go.micro.srv.rack.RackReportReq
	0,  // 92: go.micro.srv.rack.RackService.GetCellReport:input_type -> go.micro.srv.rack.CellReportReq
	9,  // 93: go.micro.srv.rack.RackService.GetRack:output_type -> go.micro.srv.rack.Rack
	16, // 94: go.micro.srv.rack.RackService.GetRacks:output_type -> go.micro.srv.rack.Racks
	8,  // 95: go.micro.srv.rack.RackService.GetCell:output_type -> go.micro.srv.rack.Cell
	18, // 96: go.micro.srv.rack.RackService.GetCells:output_type -> go.micro.srv.rack.Cells
	10, // 97: go.micro.srv.rack.RackService.AddRack:output_type -> go.micro.srv.rack.Response
	10, // 98: go.micro.srv.rack.RackService.BatchAddRacks:output_type -> go.micro.srv.rack.Response
	10, // 99: go.micro.srv.rack.RackService.DeleteRack:output_type -> go.micro.srv.rack.Response
	10, // 100: go.micro.srv.rack.RackService.BatchDeleteRacks:output_type -> go.micro.srv.rack.Response
	10, // 101: go.micro.srv.rack.RackService.UpdateRack:output_type -> go.micro.srv.rack.Response
	10, // 102: go.micro.srv.rack.RackService.AddCell:output_type -> go.micro.srv.rack.Response
	10, // 103: go.micro.srv.rack.RackService.BatchAddCells:output_type -> go.micro.srv.rack.Response
	10, // 104: go.micro.srv.rack.RackService.DeleteCell:output_type -> go.micro.srv.rack.Response
	10, // 105: go.micro.srv.rack.RackService.BatchDeleteCells:output_type -> go.micro.srv.rack.Response
	10, // 106: go.micro.srv.rack.RackService.UpdateCell:output_type -> go.micro.srv.rack.Response
	10, // 107: go.micro.srv.rack.RackService.EnableRacks:output_type -> go.micro.srv.rack.Response
	10, // 108: go.micro.srv.rack.RackService.DisableRacks:output_type -> go.micro.srv.rack.Response
	10, // 109: go.micro.srv.rack.RackService.BindRacklot:output_type -> go.micro.srv.rack.Response
	10, // 110: go.micro.srv.rack.RackService.UnbindRacklot:output_type -> go.micro.srv.rack.Response
	10, // 111: go.micro.srv.rack.RackService.OccupyRack:output_type -> go.micro.srv.rack.Response
	10, // 112: go.micro.srv.rack.RackService.ReleaseRack:output_type -> go.micro.srv.rack.Response
	10, // 113: go.micro.srv.rack.RackService.EnableCells:output_type -> go.micro.srv.rack.Response
	10, // 114: go.micro.srv.rack.RackService.DisableCells:output_type -> go.micro.srv.rack.Response
	10, // 115: go.micro.srv.rack.RackService.BindMaterial:output_type -> go.micro.srv.rack.Response
	10, // 116: go.micro.srv.rack.RackService.UnbindMaterial:output_type -> go.micro.srv.rack.Response
	10, // 117: go.micro.srv.rack.RackService.OccupyCell:output_type -> go.micro.srv.rack.Response
	10, // 118: go.micro.srv.rack.RackService.ReleaseCell:output_type -> go.micro.srv.rack.Response
	10, // 119: go.micro.srv.rack.RackService.AddCellProperties:output_type -> go.micro.srv.rack.Response
	10, // 120: go.micro.srv.rack.RackService.SetCellStatus:output_type -> go.micro.srv.rack.Response
	3,  // 121: go.micro.srv.rack.RackService.GetRackReport:output_type -> go.micro.srv.rack.RackReport
	1,  // 122: go.micro.srv.rack.RackService.GetCellReport:output_type -> go.micro.srv.rack.CellReport
	93, // [93:123] is the sub-list for method output_type
	63, // [63:93] is the sub-list for method input_type
	63, // [63:63] is the sub-list for extension type_name
	63, // [63:63] is the sub-list for extension extendee
	0,  // [0:63] is the sub-list for field type_name
}

func init() { file_proto_rack_rack_proto_init() }
func file_proto_rack_rack_proto_init() {
	if File_proto_rack_rack_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_rack_rack_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellReportReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rack_rack_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rack_rack_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RackReportReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rack_rack_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RackReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rack_rack_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RackType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rack_rack_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rack_rack_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rack_rack_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rack_rack_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rack_rack_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rack_rack_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rack_rack_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRackReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rack_rack_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rack_rack_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCellReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rack_rack_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rack_rack_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rack_rack_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Racks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rack_rack_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rack_rack_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cells); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rack_rack_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterialReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rack_rack_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RackQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rack_rack_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rack_rack_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RackTypeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rack_rack_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RackFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rack_rack_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rack_rack_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RackTypeFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rack_rack_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellTypeFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rack_rack_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rack_rack_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rack_rack_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RacklotReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rack_rack_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rack_rack_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rack_rack_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertiesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_rack_rack_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_rack_rack_proto_goTypes,
		DependencyIndexes: file_proto_rack_rack_proto_depIdxs,
		MessageInfos:      file_proto_rack_rack_proto_msgTypes,
	}.Build()
	File_proto_rack_rack_proto = out.File
	file_proto_rack_rack_proto_rawDesc = nil
	file_proto_rack_rack_proto_goTypes = nil
	file_proto_rack_rack_proto_depIdxs = nil
}
