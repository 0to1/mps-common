// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/rack/rack.proto

package go_micro_srv_rack

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for RackService service

type RackService interface {
	AddRack(ctx context.Context, in *Rack, opts ...client.CallOption) (*Response, error)
	BatchAddRacks(ctx context.Context, in *Racks, opts ...client.CallOption) (*Response, error)
	DeleteRack(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error)
	BatchDeleteRacks(ctx context.Context, in *IDsReq, opts ...client.CallOption) (*Response, error)
	// 更新货架信息
	UpdateRack(ctx context.Context, in *UpdateRackReq, opts ...client.CallOption) (*Response, error)
	// 根据货架ID获取货架信息
	GetOneRack(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Rack, error)
	// 根据查询条件获取满足条件的货架
	GetRacks(ctx context.Context, in *RackQuery, opts ...client.CallOption) (*Racks, error)
	// 启用一组货架
	EnableRacks(ctx context.Context, in *IDsReq, opts ...client.CallOption) (*Response, error)
	// 禁用一组货架
	DisableRacks(ctx context.Context, in *IDsReq, opts ...client.CallOption) (*Response, error)
	// 启用某个货架
	//   rpc EnableRack(IDReq) returns (Response);
	//   // 禁用某个货架
	//   rpc DisableRack(IDReq) returns (Response);
	// 绑定货位
	BindRacklot(ctx context.Context, in *RacklotReq, opts ...client.CallOption) (*Response, error)
	// 解绑货位
	UnbindRacklot(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error)
	// 添加储位
	AddCells(ctx context.Context, in *CellsReq, opts ...client.CallOption) (*Response, error)
	// 移除储位
	RemoveCells(ctx context.Context, in *IDsReq, opts ...client.CallOption) (*Response, error)
	// 启用储位
	EnableCells(ctx context.Context, in *IDsReq, opts ...client.CallOption) (*Response, error)
	// 禁用储位
	DisableCells(ctx context.Context, in *IDsReq, opts ...client.CallOption) (*Response, error)
	// 绑定物料
	BindMaterial(ctx context.Context, in *MaterialReq, opts ...client.CallOption) (*Response, error)
	// 解绑物料
	UnbindMaterial(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error)
	OccupyRack(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error)
	ReleaseRack(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error)
	OccupyCell(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error)
	ReleaseCell(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error)
	// 设置类型
	SetRacklotType(ctx context.Context, in *TypeReq, opts ...client.CallOption) (*Response, error)
}

type rackService struct {
	c    client.Client
	name string
}

func NewRackService(name string, c client.Client) RackService {
	return &rackService{
		c:    c,
		name: name,
	}
}

func (c *rackService) AddRack(ctx context.Context, in *Rack, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RackService.AddRack", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rackService) BatchAddRacks(ctx context.Context, in *Racks, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RackService.BatchAddRacks", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rackService) DeleteRack(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RackService.DeleteRack", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rackService) BatchDeleteRacks(ctx context.Context, in *IDsReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RackService.BatchDeleteRacks", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rackService) UpdateRack(ctx context.Context, in *UpdateRackReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RackService.UpdateRack", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rackService) GetOneRack(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Rack, error) {
	req := c.c.NewRequest(c.name, "RackService.GetOneRack", in)
	out := new(Rack)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rackService) GetRacks(ctx context.Context, in *RackQuery, opts ...client.CallOption) (*Racks, error) {
	req := c.c.NewRequest(c.name, "RackService.GetRacks", in)
	out := new(Racks)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rackService) EnableRacks(ctx context.Context, in *IDsReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RackService.EnableRacks", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rackService) DisableRacks(ctx context.Context, in *IDsReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RackService.DisableRacks", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rackService) BindRacklot(ctx context.Context, in *RacklotReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RackService.BindRacklot", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rackService) UnbindRacklot(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RackService.UnbindRacklot", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rackService) AddCells(ctx context.Context, in *CellsReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RackService.AddCells", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rackService) RemoveCells(ctx context.Context, in *IDsReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RackService.RemoveCells", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rackService) EnableCells(ctx context.Context, in *IDsReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RackService.EnableCells", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rackService) DisableCells(ctx context.Context, in *IDsReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RackService.DisableCells", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rackService) BindMaterial(ctx context.Context, in *MaterialReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RackService.BindMaterial", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rackService) UnbindMaterial(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RackService.UnbindMaterial", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rackService) OccupyRack(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RackService.OccupyRack", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rackService) ReleaseRack(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RackService.ReleaseRack", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rackService) OccupyCell(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RackService.OccupyCell", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rackService) ReleaseCell(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RackService.ReleaseCell", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rackService) SetRacklotType(ctx context.Context, in *TypeReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RackService.SetRacklotType", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RackService service

type RackServiceHandler interface {
	AddRack(context.Context, *Rack, *Response) error
	BatchAddRacks(context.Context, *Racks, *Response) error
	DeleteRack(context.Context, *IDReq, *Response) error
	BatchDeleteRacks(context.Context, *IDsReq, *Response) error
	// 更新货架信息
	UpdateRack(context.Context, *UpdateRackReq, *Response) error
	// 根据货架ID获取货架信息
	GetOneRack(context.Context, *IDReq, *Rack) error
	// 根据查询条件获取满足条件的货架
	GetRacks(context.Context, *RackQuery, *Racks) error
	// 启用一组货架
	EnableRacks(context.Context, *IDsReq, *Response) error
	// 禁用一组货架
	DisableRacks(context.Context, *IDsReq, *Response) error
	// 启用某个货架
	//   rpc EnableRack(IDReq) returns (Response);
	//   // 禁用某个货架
	//   rpc DisableRack(IDReq) returns (Response);
	// 绑定货位
	BindRacklot(context.Context, *RacklotReq, *Response) error
	// 解绑货位
	UnbindRacklot(context.Context, *IDReq, *Response) error
	// 添加储位
	AddCells(context.Context, *CellsReq, *Response) error
	// 移除储位
	RemoveCells(context.Context, *IDsReq, *Response) error
	// 启用储位
	EnableCells(context.Context, *IDsReq, *Response) error
	// 禁用储位
	DisableCells(context.Context, *IDsReq, *Response) error
	// 绑定物料
	BindMaterial(context.Context, *MaterialReq, *Response) error
	// 解绑物料
	UnbindMaterial(context.Context, *IDReq, *Response) error
	OccupyRack(context.Context, *IDReq, *Response) error
	ReleaseRack(context.Context, *IDReq, *Response) error
	OccupyCell(context.Context, *IDReq, *Response) error
	ReleaseCell(context.Context, *IDReq, *Response) error
	// 设置类型
	SetRacklotType(context.Context, *TypeReq, *Response) error
}

func RegisterRackServiceHandler(s server.Server, hdlr RackServiceHandler, opts ...server.HandlerOption) error {
	type rackService interface {
		AddRack(ctx context.Context, in *Rack, out *Response) error
		BatchAddRacks(ctx context.Context, in *Racks, out *Response) error
		DeleteRack(ctx context.Context, in *IDReq, out *Response) error
		BatchDeleteRacks(ctx context.Context, in *IDsReq, out *Response) error
		UpdateRack(ctx context.Context, in *UpdateRackReq, out *Response) error
		GetOneRack(ctx context.Context, in *IDReq, out *Rack) error
		GetRacks(ctx context.Context, in *RackQuery, out *Racks) error
		EnableRacks(ctx context.Context, in *IDsReq, out *Response) error
		DisableRacks(ctx context.Context, in *IDsReq, out *Response) error
		BindRacklot(ctx context.Context, in *RacklotReq, out *Response) error
		UnbindRacklot(ctx context.Context, in *IDReq, out *Response) error
		AddCells(ctx context.Context, in *CellsReq, out *Response) error
		RemoveCells(ctx context.Context, in *IDsReq, out *Response) error
		EnableCells(ctx context.Context, in *IDsReq, out *Response) error
		DisableCells(ctx context.Context, in *IDsReq, out *Response) error
		BindMaterial(ctx context.Context, in *MaterialReq, out *Response) error
		UnbindMaterial(ctx context.Context, in *IDReq, out *Response) error
		OccupyRack(ctx context.Context, in *IDReq, out *Response) error
		ReleaseRack(ctx context.Context, in *IDReq, out *Response) error
		OccupyCell(ctx context.Context, in *IDReq, out *Response) error
		ReleaseCell(ctx context.Context, in *IDReq, out *Response) error
		SetRacklotType(ctx context.Context, in *TypeReq, out *Response) error
	}
	type RackService struct {
		rackService
	}
	h := &rackServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&RackService{h}, opts...))
}

type rackServiceHandler struct {
	RackServiceHandler
}

func (h *rackServiceHandler) AddRack(ctx context.Context, in *Rack, out *Response) error {
	return h.RackServiceHandler.AddRack(ctx, in, out)
}

func (h *rackServiceHandler) BatchAddRacks(ctx context.Context, in *Racks, out *Response) error {
	return h.RackServiceHandler.BatchAddRacks(ctx, in, out)
}

func (h *rackServiceHandler) DeleteRack(ctx context.Context, in *IDReq, out *Response) error {
	return h.RackServiceHandler.DeleteRack(ctx, in, out)
}

func (h *rackServiceHandler) BatchDeleteRacks(ctx context.Context, in *IDsReq, out *Response) error {
	return h.RackServiceHandler.BatchDeleteRacks(ctx, in, out)
}

func (h *rackServiceHandler) UpdateRack(ctx context.Context, in *UpdateRackReq, out *Response) error {
	return h.RackServiceHandler.UpdateRack(ctx, in, out)
}

func (h *rackServiceHandler) GetOneRack(ctx context.Context, in *IDReq, out *Rack) error {
	return h.RackServiceHandler.GetOneRack(ctx, in, out)
}

func (h *rackServiceHandler) GetRacks(ctx context.Context, in *RackQuery, out *Racks) error {
	return h.RackServiceHandler.GetRacks(ctx, in, out)
}

func (h *rackServiceHandler) EnableRacks(ctx context.Context, in *IDsReq, out *Response) error {
	return h.RackServiceHandler.EnableRacks(ctx, in, out)
}

func (h *rackServiceHandler) DisableRacks(ctx context.Context, in *IDsReq, out *Response) error {
	return h.RackServiceHandler.DisableRacks(ctx, in, out)
}

func (h *rackServiceHandler) BindRacklot(ctx context.Context, in *RacklotReq, out *Response) error {
	return h.RackServiceHandler.BindRacklot(ctx, in, out)
}

func (h *rackServiceHandler) UnbindRacklot(ctx context.Context, in *IDReq, out *Response) error {
	return h.RackServiceHandler.UnbindRacklot(ctx, in, out)
}

func (h *rackServiceHandler) AddCells(ctx context.Context, in *CellsReq, out *Response) error {
	return h.RackServiceHandler.AddCells(ctx, in, out)
}

func (h *rackServiceHandler) RemoveCells(ctx context.Context, in *IDsReq, out *Response) error {
	return h.RackServiceHandler.RemoveCells(ctx, in, out)
}

func (h *rackServiceHandler) EnableCells(ctx context.Context, in *IDsReq, out *Response) error {
	return h.RackServiceHandler.EnableCells(ctx, in, out)
}

func (h *rackServiceHandler) DisableCells(ctx context.Context, in *IDsReq, out *Response) error {
	return h.RackServiceHandler.DisableCells(ctx, in, out)
}

func (h *rackServiceHandler) BindMaterial(ctx context.Context, in *MaterialReq, out *Response) error {
	return h.RackServiceHandler.BindMaterial(ctx, in, out)
}

func (h *rackServiceHandler) UnbindMaterial(ctx context.Context, in *IDReq, out *Response) error {
	return h.RackServiceHandler.UnbindMaterial(ctx, in, out)
}

func (h *rackServiceHandler) OccupyRack(ctx context.Context, in *IDReq, out *Response) error {
	return h.RackServiceHandler.OccupyRack(ctx, in, out)
}

func (h *rackServiceHandler) ReleaseRack(ctx context.Context, in *IDReq, out *Response) error {
	return h.RackServiceHandler.ReleaseRack(ctx, in, out)
}

func (h *rackServiceHandler) OccupyCell(ctx context.Context, in *IDReq, out *Response) error {
	return h.RackServiceHandler.OccupyCell(ctx, in, out)
}

func (h *rackServiceHandler) ReleaseCell(ctx context.Context, in *IDReq, out *Response) error {
	return h.RackServiceHandler.ReleaseCell(ctx, in, out)
}

func (h *rackServiceHandler) SetRacklotType(ctx context.Context, in *TypeReq, out *Response) error {
	return h.RackServiceHandler.SetRacklotType(ctx, in, out)
}
