// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/lpr/lpr.proto

package go_micro_srv_lpr

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Lpr service

type LprService interface {
	//
	Stream(ctx context.Context, opts ...client.CallOption) (Lpr_StreamService, error)
	//返回所有视频流数据
	ServerStream(ctx context.Context, in *Request, opts ...client.CallOption) (Lpr_ServerStreamService, error)
	//根据出入口编号 关闭视频
	CloseStream(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	//根据出入口编号 返回车牌识别结果
	GetLpr(ctx context.Context, in *Request, opts ...client.CallOption) (*LprResp, error)
	//根据出入口编号 开启视频
	StartStream(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	//返回所有出入口数据
	GetLprs(ctx context.Context, in *Query, opts ...client.CallOption) (*LprResps, error)
	//设置出入口配置信息
	SetLpr(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	//设置所有出入口配置信息
	SetLprs(ctx context.Context, in *Requests, opts ...client.CallOption) (*Response, error)
}

type lprService struct {
	c    client.Client
	name string
}

func NewLprService(name string, c client.Client) LprService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.lpr"
	}
	return &lprService{
		c:    c,
		name: name,
	}
}

func (c *lprService) Stream(ctx context.Context, opts ...client.CallOption) (Lpr_StreamService, error) {
	req := c.c.NewRequest(c.name, "Lpr.Stream", &Request{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &lprServiceStream{stream}, nil
}

type Lpr_StreamService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Request) error
	Recv() (*Response, error)
}

type lprServiceStream struct {
	stream client.Stream
}

func (x *lprServiceStream) Close() error {
	return x.stream.Close()
}

func (x *lprServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *lprServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *lprServiceStream) Send(m *Request) error {
	return x.stream.Send(m)
}

func (x *lprServiceStream) Recv() (*Response, error) {
	m := new(Response)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lprService) ServerStream(ctx context.Context, in *Request, opts ...client.CallOption) (Lpr_ServerStreamService, error) {
	req := c.c.NewRequest(c.name, "Lpr.ServerStream", &Request{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &lprServiceServerStream{stream}, nil
}

type Lpr_ServerStreamService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamResponse, error)
}

type lprServiceServerStream struct {
	stream client.Stream
}

func (x *lprServiceServerStream) Close() error {
	return x.stream.Close()
}

func (x *lprServiceServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *lprServiceServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *lprServiceServerStream) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lprService) CloseStream(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Lpr.CloseStream", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lprService) GetLpr(ctx context.Context, in *Request, opts ...client.CallOption) (*LprResp, error) {
	req := c.c.NewRequest(c.name, "Lpr.GetLpr", in)
	out := new(LprResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lprService) StartStream(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Lpr.StartStream", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lprService) GetLprs(ctx context.Context, in *Query, opts ...client.CallOption) (*LprResps, error) {
	req := c.c.NewRequest(c.name, "Lpr.GetLprs", in)
	out := new(LprResps)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lprService) SetLpr(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Lpr.SetLpr", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lprService) SetLprs(ctx context.Context, in *Requests, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Lpr.SetLprs", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Lpr service

type LprHandler interface {
	//
	Stream(context.Context, Lpr_StreamStream) error
	//返回所有视频流数据
	ServerStream(context.Context, *Request, Lpr_ServerStreamStream) error
	//根据出入口编号 关闭视频
	CloseStream(context.Context, *Request, *Response) error
	//根据出入口编号 返回车牌识别结果
	GetLpr(context.Context, *Request, *LprResp) error
	//根据出入口编号 开启视频
	StartStream(context.Context, *Request, *Response) error
	//返回所有出入口数据
	GetLprs(context.Context, *Query, *LprResps) error
	//设置出入口配置信息
	SetLpr(context.Context, *Request, *Response) error
	//设置所有出入口配置信息
	SetLprs(context.Context, *Requests, *Response) error
}

func RegisterLprHandler(s server.Server, hdlr LprHandler, opts ...server.HandlerOption) error {
	type lpr interface {
		Stream(ctx context.Context, stream server.Stream) error
		ServerStream(ctx context.Context, stream server.Stream) error
		CloseStream(ctx context.Context, in *Request, out *Response) error
		GetLpr(ctx context.Context, in *Request, out *LprResp) error
		StartStream(ctx context.Context, in *Request, out *Response) error
		GetLprs(ctx context.Context, in *Query, out *LprResps) error
		SetLpr(ctx context.Context, in *Request, out *Response) error
		SetLprs(ctx context.Context, in *Requests, out *Response) error
	}
	type Lpr struct {
		lpr
	}
	h := &lprHandler{hdlr}
	return s.Handle(s.NewHandler(&Lpr{h}, opts...))
}

type lprHandler struct {
	LprHandler
}

func (h *lprHandler) Stream(ctx context.Context, stream server.Stream) error {
	return h.LprHandler.Stream(ctx, &lprStreamStream{stream})
}

type Lpr_StreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Response) error
	Recv() (*Request, error)
}

type lprStreamStream struct {
	stream server.Stream
}

func (x *lprStreamStream) Close() error {
	return x.stream.Close()
}

func (x *lprStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *lprStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *lprStreamStream) Send(m *Response) error {
	return x.stream.Send(m)
}

func (x *lprStreamStream) Recv() (*Request, error) {
	m := new(Request)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *lprHandler) ServerStream(ctx context.Context, stream server.Stream) error {
	m := new(Request)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.LprHandler.ServerStream(ctx, m, &lprServerStreamStream{stream})
}

type Lpr_ServerStreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamResponse) error
}

type lprServerStreamStream struct {
	stream server.Stream
}

func (x *lprServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *lprServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *lprServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *lprServerStreamStream) Send(m *StreamResponse) error {
	return x.stream.Send(m)
}

func (h *lprHandler) CloseStream(ctx context.Context, in *Request, out *Response) error {
	return h.LprHandler.CloseStream(ctx, in, out)
}

func (h *lprHandler) GetLpr(ctx context.Context, in *Request, out *LprResp) error {
	return h.LprHandler.GetLpr(ctx, in, out)
}

func (h *lprHandler) StartStream(ctx context.Context, in *Request, out *Response) error {
	return h.LprHandler.StartStream(ctx, in, out)
}

func (h *lprHandler) GetLprs(ctx context.Context, in *Query, out *LprResps) error {
	return h.LprHandler.GetLprs(ctx, in, out)
}

func (h *lprHandler) SetLpr(ctx context.Context, in *Request, out *Response) error {
	return h.LprHandler.SetLpr(ctx, in, out)
}

func (h *lprHandler) SetLprs(ctx context.Context, in *Requests, out *Response) error {
	return h.LprHandler.SetLprs(ctx, in, out)
}
