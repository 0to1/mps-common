// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/lpr/lpr.proto

package go_micro_srv_lpr

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for LprService service

func NewLprServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for LprService service

type LprService interface {
	//设置车牌识别摄像头
	AddLpr(ctx context.Context, in *LprRequest, opts ...client.CallOption) (*Response, error)
	//批量添加
	AddLprs(ctx context.Context, in *LprRequests, opts ...client.CallOption) (*Response, error)
	DeleteLpr(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error)
	ConfigLpr(ctx context.Context, in *LprRequest, opts ...client.CallOption) (*Response, error)
	GetLprs(ctx context.Context, in *Query, opts ...client.CallOption) (*Lprs, error)
	//返回单个摄像头的图片流数据
	LprStream(ctx context.Context, opts ...client.CallOption) (LprService_LprStreamService, error)
	//返回所有图片流数据
	LprsStream(ctx context.Context, in *LprRequest, opts ...client.CallOption) (LprService_LprsStreamService, error)
	//根据出入口id编号 开启视频
	Start(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error)
	//根据出入口id编号 关闭视频
	Close(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error)
	//根据出入口id编号 返回车牌识别结果
	GetLicense(ctx context.Context, in *IDReq, opts ...client.CallOption) (*License, error)
	//根据出入口id编号 清除车牌识别结果
	ClearLicense(ctx context.Context, in *IDReq, opts ...client.CallOption) (*License, error)
	//根据条件查询车牌识别结果
	GetLicenses(ctx context.Context, in *Query, opts ...client.CallOption) (*Licenses, error)
	//获取服务日志等级
	GetLogLevel(ctx context.Context, in *LogLevelRequest, opts ...client.CallOption) (*Loglevel, error)
	//设置服务日志等级
	SetLogLevel(ctx context.Context, in *Loglevel, opts ...client.CallOption) (*LogResponse, error)
}

type lprService struct {
	c    client.Client
	name string
}

func NewLprService(name string, c client.Client) LprService {
	return &lprService{
		c:    c,
		name: name,
	}
}

func (c *lprService) AddLpr(ctx context.Context, in *LprRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "LprService.AddLpr", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lprService) AddLprs(ctx context.Context, in *LprRequests, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "LprService.AddLprs", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lprService) DeleteLpr(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "LprService.DeleteLpr", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lprService) ConfigLpr(ctx context.Context, in *LprRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "LprService.ConfigLpr", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lprService) GetLprs(ctx context.Context, in *Query, opts ...client.CallOption) (*Lprs, error) {
	req := c.c.NewRequest(c.name, "LprService.GetLprs", in)
	out := new(Lprs)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lprService) LprStream(ctx context.Context, opts ...client.CallOption) (LprService_LprStreamService, error) {
	req := c.c.NewRequest(c.name, "LprService.LprStream", &LprRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &lprServiceLprStream{stream}, nil
}

type LprService_LprStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*LprRequest) error
	Recv() (*LprStreamResponse, error)
}

type lprServiceLprStream struct {
	stream client.Stream
}

func (x *lprServiceLprStream) Close() error {
	return x.stream.Close()
}

func (x *lprServiceLprStream) Context() context.Context {
	return x.stream.Context()
}

func (x *lprServiceLprStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *lprServiceLprStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *lprServiceLprStream) Send(m *LprRequest) error {
	return x.stream.Send(m)
}

func (x *lprServiceLprStream) Recv() (*LprStreamResponse, error) {
	m := new(LprStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lprService) LprsStream(ctx context.Context, in *LprRequest, opts ...client.CallOption) (LprService_LprsStreamService, error) {
	req := c.c.NewRequest(c.name, "LprService.LprsStream", &LprRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &lprServiceLprsStream{stream}, nil
}

type LprService_LprsStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*LprStreamResponse, error)
}

type lprServiceLprsStream struct {
	stream client.Stream
}

func (x *lprServiceLprsStream) Close() error {
	return x.stream.Close()
}

func (x *lprServiceLprsStream) Context() context.Context {
	return x.stream.Context()
}

func (x *lprServiceLprsStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *lprServiceLprsStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *lprServiceLprsStream) Recv() (*LprStreamResponse, error) {
	m := new(LprStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lprService) Start(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "LprService.Start", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lprService) Close(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "LprService.Close", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lprService) GetLicense(ctx context.Context, in *IDReq, opts ...client.CallOption) (*License, error) {
	req := c.c.NewRequest(c.name, "LprService.GetLicense", in)
	out := new(License)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lprService) ClearLicense(ctx context.Context, in *IDReq, opts ...client.CallOption) (*License, error) {
	req := c.c.NewRequest(c.name, "LprService.ClearLicense", in)
	out := new(License)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lprService) GetLicenses(ctx context.Context, in *Query, opts ...client.CallOption) (*Licenses, error) {
	req := c.c.NewRequest(c.name, "LprService.GetLicenses", in)
	out := new(Licenses)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lprService) GetLogLevel(ctx context.Context, in *LogLevelRequest, opts ...client.CallOption) (*Loglevel, error) {
	req := c.c.NewRequest(c.name, "LprService.GetLogLevel", in)
	out := new(Loglevel)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lprService) SetLogLevel(ctx context.Context, in *Loglevel, opts ...client.CallOption) (*LogResponse, error) {
	req := c.c.NewRequest(c.name, "LprService.SetLogLevel", in)
	out := new(LogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LprService service

type LprServiceHandler interface {
	//设置车牌识别摄像头
	AddLpr(context.Context, *LprRequest, *Response) error
	//批量添加
	AddLprs(context.Context, *LprRequests, *Response) error
	DeleteLpr(context.Context, *IDReq, *Response) error
	ConfigLpr(context.Context, *LprRequest, *Response) error
	GetLprs(context.Context, *Query, *Lprs) error
	//返回单个摄像头的图片流数据
	LprStream(context.Context, LprService_LprStreamStream) error
	//返回所有图片流数据
	LprsStream(context.Context, *LprRequest, LprService_LprsStreamStream) error
	//根据出入口id编号 开启视频
	Start(context.Context, *IDReq, *Response) error
	//根据出入口id编号 关闭视频
	Close(context.Context, *IDReq, *Response) error
	//根据出入口id编号 返回车牌识别结果
	GetLicense(context.Context, *IDReq, *License) error
	//根据出入口id编号 清除车牌识别结果
	ClearLicense(context.Context, *IDReq, *License) error
	//根据条件查询车牌识别结果
	GetLicenses(context.Context, *Query, *Licenses) error
	//获取服务日志等级
	GetLogLevel(context.Context, *LogLevelRequest, *Loglevel) error
	//设置服务日志等级
	SetLogLevel(context.Context, *Loglevel, *LogResponse) error
}

func RegisterLprServiceHandler(s server.Server, hdlr LprServiceHandler, opts ...server.HandlerOption) error {
	type lprService interface {
		AddLpr(ctx context.Context, in *LprRequest, out *Response) error
		AddLprs(ctx context.Context, in *LprRequests, out *Response) error
		DeleteLpr(ctx context.Context, in *IDReq, out *Response) error
		ConfigLpr(ctx context.Context, in *LprRequest, out *Response) error
		GetLprs(ctx context.Context, in *Query, out *Lprs) error
		LprStream(ctx context.Context, stream server.Stream) error
		LprsStream(ctx context.Context, stream server.Stream) error
		Start(ctx context.Context, in *IDReq, out *Response) error
		Close(ctx context.Context, in *IDReq, out *Response) error
		GetLicense(ctx context.Context, in *IDReq, out *License) error
		ClearLicense(ctx context.Context, in *IDReq, out *License) error
		GetLicenses(ctx context.Context, in *Query, out *Licenses) error
		GetLogLevel(ctx context.Context, in *LogLevelRequest, out *Loglevel) error
		SetLogLevel(ctx context.Context, in *Loglevel, out *LogResponse) error
	}
	type LprService struct {
		lprService
	}
	h := &lprServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&LprService{h}, opts...))
}

type lprServiceHandler struct {
	LprServiceHandler
}

func (h *lprServiceHandler) AddLpr(ctx context.Context, in *LprRequest, out *Response) error {
	return h.LprServiceHandler.AddLpr(ctx, in, out)
}

func (h *lprServiceHandler) AddLprs(ctx context.Context, in *LprRequests, out *Response) error {
	return h.LprServiceHandler.AddLprs(ctx, in, out)
}

func (h *lprServiceHandler) DeleteLpr(ctx context.Context, in *IDReq, out *Response) error {
	return h.LprServiceHandler.DeleteLpr(ctx, in, out)
}

func (h *lprServiceHandler) ConfigLpr(ctx context.Context, in *LprRequest, out *Response) error {
	return h.LprServiceHandler.ConfigLpr(ctx, in, out)
}

func (h *lprServiceHandler) GetLprs(ctx context.Context, in *Query, out *Lprs) error {
	return h.LprServiceHandler.GetLprs(ctx, in, out)
}

func (h *lprServiceHandler) LprStream(ctx context.Context, stream server.Stream) error {
	return h.LprServiceHandler.LprStream(ctx, &lprServiceLprStreamStream{stream})
}

type LprService_LprStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*LprStreamResponse) error
	Recv() (*LprRequest, error)
}

type lprServiceLprStreamStream struct {
	stream server.Stream
}

func (x *lprServiceLprStreamStream) Close() error {
	return x.stream.Close()
}

func (x *lprServiceLprStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *lprServiceLprStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *lprServiceLprStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *lprServiceLprStreamStream) Send(m *LprStreamResponse) error {
	return x.stream.Send(m)
}

func (x *lprServiceLprStreamStream) Recv() (*LprRequest, error) {
	m := new(LprRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *lprServiceHandler) LprsStream(ctx context.Context, stream server.Stream) error {
	m := new(LprRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.LprServiceHandler.LprsStream(ctx, m, &lprServiceLprsStreamStream{stream})
}

type LprService_LprsStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*LprStreamResponse) error
}

type lprServiceLprsStreamStream struct {
	stream server.Stream
}

func (x *lprServiceLprsStreamStream) Close() error {
	return x.stream.Close()
}

func (x *lprServiceLprsStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *lprServiceLprsStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *lprServiceLprsStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *lprServiceLprsStreamStream) Send(m *LprStreamResponse) error {
	return x.stream.Send(m)
}

func (h *lprServiceHandler) Start(ctx context.Context, in *IDReq, out *Response) error {
	return h.LprServiceHandler.Start(ctx, in, out)
}

func (h *lprServiceHandler) Close(ctx context.Context, in *IDReq, out *Response) error {
	return h.LprServiceHandler.Close(ctx, in, out)
}

func (h *lprServiceHandler) GetLicense(ctx context.Context, in *IDReq, out *License) error {
	return h.LprServiceHandler.GetLicense(ctx, in, out)
}

func (h *lprServiceHandler) ClearLicense(ctx context.Context, in *IDReq, out *License) error {
	return h.LprServiceHandler.ClearLicense(ctx, in, out)
}

func (h *lprServiceHandler) GetLicenses(ctx context.Context, in *Query, out *Licenses) error {
	return h.LprServiceHandler.GetLicenses(ctx, in, out)
}

func (h *lprServiceHandler) GetLogLevel(ctx context.Context, in *LogLevelRequest, out *Loglevel) error {
	return h.LprServiceHandler.GetLogLevel(ctx, in, out)
}

func (h *lprServiceHandler) SetLogLevel(ctx context.Context, in *Loglevel, out *LogResponse) error {
	return h.LprServiceHandler.SetLogLevel(ctx, in, out)
}
