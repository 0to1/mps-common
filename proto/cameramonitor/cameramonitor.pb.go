// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: proto/cameramonitor/cameramonitor.proto

// import "google/protobuf/wrappers.proto";

package go_micro_srv_cameramonitor

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type IDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IDReq) Reset() {
	*x = IDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cameramonitor_cameramonitor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDReq) ProtoMessage() {}

func (x *IDReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cameramonitor_cameramonitor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDReq.ProtoReflect.Descriptor instead.
func (*IDReq) Descriptor() ([]byte, []int) {
	return file_proto_cameramonitor_cameramonitor_proto_rawDescGZIP(), []int{0}
}

func (x *IDReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CameraFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	And    []*CameraFilter `protobuf:"bytes,1,rep,name=and,proto3" json:"and,omitempty"`
	Or     []*CameraFilter `protobuf:"bytes,2,rep,name=or,proto3" json:"or,omitempty"`
	IdIn   []uint32        `protobuf:"varint,3,rep,packed,name=idIn,proto3" json:"idIn,omitempty"`
	IpIn   []string        `protobuf:"bytes,4,rep,name=ipIn,proto3" json:"ipIn,omitempty"`
	PortIn []uint32        `protobuf:"varint,5,rep,packed,name=portIn,proto3" json:"portIn,omitempty"`
}

func (x *CameraFilter) Reset() {
	*x = CameraFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cameramonitor_cameramonitor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CameraFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraFilter) ProtoMessage() {}

func (x *CameraFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cameramonitor_cameramonitor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraFilter.ProtoReflect.Descriptor instead.
func (*CameraFilter) Descriptor() ([]byte, []int) {
	return file_proto_cameramonitor_cameramonitor_proto_rawDescGZIP(), []int{1}
}

func (x *CameraFilter) GetAnd() []*CameraFilter {
	if x != nil {
		return x.And
	}
	return nil
}

func (x *CameraFilter) GetOr() []*CameraFilter {
	if x != nil {
		return x.Or
	}
	return nil
}

func (x *CameraFilter) GetIdIn() []uint32 {
	if x != nil {
		return x.IdIn
	}
	return nil
}

func (x *CameraFilter) GetIpIn() []string {
	if x != nil {
		return x.IpIn
	}
	return nil
}

func (x *CameraFilter) GetPortIn() []uint32 {
	if x != nil {
		return x.PortIn
	}
	return nil
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   uint32        `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  uint32        `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Page    uint32        `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PerPage uint32        `protobuf:"varint,4,opt,name=perPage,proto3" json:"perPage,omitempty"`
	Filter  *CameraFilter `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cameramonitor_cameramonitor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cameramonitor_cameramonitor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_proto_cameramonitor_cameramonitor_proto_rawDescGZIP(), []int{2}
}

func (x *Query) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Query) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Query) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Query) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *Query) GetFilter() *CameraFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type CameraReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 摄像头编号
	Id          uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ip          string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Port        uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CameraReq) Reset() {
	*x = CameraReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cameramonitor_cameramonitor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CameraReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraReq) ProtoMessage() {}

func (x *CameraReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cameramonitor_cameramonitor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraReq.ProtoReflect.Descriptor instead.
func (*CameraReq) Descriptor() ([]byte, []int) {
	return file_proto_cameramonitor_cameramonitor_proto_rawDescGZIP(), []int{3}
}

func (x *CameraReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CameraReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *CameraReq) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *CameraReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type Cameras struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cameras []*Camera `protobuf:"bytes,1,rep,name=cameras,proto3" json:"cameras,omitempty"`
}

func (x *Cameras) Reset() {
	*x = Cameras{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cameramonitor_cameramonitor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cameras) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cameras) ProtoMessage() {}

func (x *Cameras) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cameramonitor_cameramonitor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cameras.ProtoReflect.Descriptor instead.
func (*Cameras) Descriptor() ([]byte, []int) {
	return file_proto_cameramonitor_cameramonitor_proto_rawDescGZIP(), []int{4}
}

func (x *Cameras) GetCameras() []*Camera {
	if x != nil {
		return x.Cameras
	}
	return nil
}

type Camera struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 摄像头编号
	Id          uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ip          string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Port        uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Connected   bool   `protobuf:"varint,4,opt,name=connected,proto3" json:"connected,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Camera) Reset() {
	*x = Camera{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cameramonitor_cameramonitor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Camera) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Camera) ProtoMessage() {}

func (x *Camera) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cameramonitor_cameramonitor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Camera.ProtoReflect.Descriptor instead.
func (*Camera) Descriptor() ([]byte, []int) {
	return file_proto_cameramonitor_cameramonitor_proto_rawDescGZIP(), []int{5}
}

func (x *Camera) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Camera) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Camera) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Camera) GetConnected() bool {
	if x != nil {
		return x.Connected
	}
	return false
}

func (x *Camera) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cameramonitor_cameramonitor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cameramonitor_cameramonitor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_proto_cameramonitor_cameramonitor_proto_rawDescGZIP(), []int{6}
}

var File_proto_cameramonitor_cameramonitor_proto protoreflect.FileDescriptor

var file_proto_cameramonitor_cameramonitor_proto_rawDesc = []byte{
	0x0a, 0x27, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x22, 0x17, 0x0a, 0x05, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc4,
	0x01, 0x0a, 0x0c, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x3a, 0x0a, 0x03, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x03, 0x61, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x02, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x02, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x64, 0x49, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x04, 0x69, 0x64, 0x49, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70, 0x49,
	0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x69, 0x70, 0x49, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x6e, 0x22, 0xa5, 0x01, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x61, 0x0a,
	0x09, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x47, 0x0a, 0x07, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x52, 0x07, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x22, 0x7c, 0x0a, 0x06, 0x43, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0xa8, 0x04, 0x0a, 0x14, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x0b,
	0x53, 0x6e, 0x61, 0x70, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x21, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x24,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x12, 0x25, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x43,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57,
	0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x12, 0x21,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x12, 0x25, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x24,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x72, 0x76, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x12, 0x54, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x23, 0x2e, 0x67, 0x6f, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x42, 0x30,
	0x5a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x3b, 0x67, 0x6f, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5f, 0x73,
	0x72, 0x76, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_cameramonitor_cameramonitor_proto_rawDescOnce sync.Once
	file_proto_cameramonitor_cameramonitor_proto_rawDescData = file_proto_cameramonitor_cameramonitor_proto_rawDesc
)

func file_proto_cameramonitor_cameramonitor_proto_rawDescGZIP() []byte {
	file_proto_cameramonitor_cameramonitor_proto_rawDescOnce.Do(func() {
		file_proto_cameramonitor_cameramonitor_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_cameramonitor_cameramonitor_proto_rawDescData)
	})
	return file_proto_cameramonitor_cameramonitor_proto_rawDescData
}

var file_proto_cameramonitor_cameramonitor_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_cameramonitor_cameramonitor_proto_goTypes = []interface{}{
	(*IDReq)(nil),        // 0: go.micro.srv.cameramonitor.IDReq
	(*CameraFilter)(nil), // 1: go.micro.srv.cameramonitor.CameraFilter
	(*Query)(nil),        // 2: go.micro.srv.cameramonitor.Query
	(*CameraReq)(nil),    // 3: go.micro.srv.cameramonitor.CameraReq
	(*Cameras)(nil),      // 4: go.micro.srv.cameramonitor.Cameras
	(*Camera)(nil),       // 5: go.micro.srv.cameramonitor.Camera
	(*Response)(nil),     // 6: go.micro.srv.cameramonitor.Response
}
var file_proto_cameramonitor_cameramonitor_proto_depIdxs = []int32{
	1,  // 0: go.micro.srv.cameramonitor.CameraFilter.and:type_name -> go.micro.srv.cameramonitor.CameraFilter
	1,  // 1: go.micro.srv.cameramonitor.CameraFilter.or:type_name -> go.micro.srv.cameramonitor.CameraFilter
	1,  // 2: go.micro.srv.cameramonitor.Query.filter:type_name -> go.micro.srv.cameramonitor.CameraFilter
	5,  // 3: go.micro.srv.cameramonitor.Cameras.cameras:type_name -> go.micro.srv.cameramonitor.Camera
	0,  // 4: go.micro.srv.cameramonitor.CameramonitorService.SnapPicture:input_type -> go.micro.srv.cameramonitor.IDReq
	3,  // 5: go.micro.srv.cameramonitor.CameramonitorService.AddCamera:input_type -> go.micro.srv.cameramonitor.CameraReq
	0,  // 6: go.micro.srv.cameramonitor.CameramonitorService.DeleteCamera:input_type -> go.micro.srv.cameramonitor.IDReq
	3,  // 7: go.micro.srv.cameramonitor.CameramonitorService.ConfigCamera:input_type -> go.micro.srv.cameramonitor.CameraReq
	0,  // 8: go.micro.srv.cameramonitor.CameramonitorService.GetCamera:input_type -> go.micro.srv.cameramonitor.IDReq
	2,  // 9: go.micro.srv.cameramonitor.CameramonitorService.GetCameras:input_type -> go.micro.srv.cameramonitor.Query
	6,  // 10: go.micro.srv.cameramonitor.CameramonitorService.SnapPicture:output_type -> go.micro.srv.cameramonitor.Response
	6,  // 11: go.micro.srv.cameramonitor.CameramonitorService.AddCamera:output_type -> go.micro.srv.cameramonitor.Response
	6,  // 12: go.micro.srv.cameramonitor.CameramonitorService.DeleteCamera:output_type -> go.micro.srv.cameramonitor.Response
	6,  // 13: go.micro.srv.cameramonitor.CameramonitorService.ConfigCamera:output_type -> go.micro.srv.cameramonitor.Response
	5,  // 14: go.micro.srv.cameramonitor.CameramonitorService.GetCamera:output_type -> go.micro.srv.cameramonitor.Camera
	4,  // 15: go.micro.srv.cameramonitor.CameramonitorService.GetCameras:output_type -> go.micro.srv.cameramonitor.Cameras
	10, // [10:16] is the sub-list for method output_type
	4,  // [4:10] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_proto_cameramonitor_cameramonitor_proto_init() }
func file_proto_cameramonitor_cameramonitor_proto_init() {
	if File_proto_cameramonitor_cameramonitor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_cameramonitor_cameramonitor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cameramonitor_cameramonitor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CameraFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cameramonitor_cameramonitor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cameramonitor_cameramonitor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CameraReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cameramonitor_cameramonitor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cameras); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cameramonitor_cameramonitor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Camera); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cameramonitor_cameramonitor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_cameramonitor_cameramonitor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_cameramonitor_cameramonitor_proto_goTypes,
		DependencyIndexes: file_proto_cameramonitor_cameramonitor_proto_depIdxs,
		MessageInfos:      file_proto_cameramonitor_cameramonitor_proto_msgTypes,
	}.Build()
	File_proto_cameramonitor_cameramonitor_proto = out.File
	file_proto_cameramonitor_cameramonitor_proto_rawDesc = nil
	file_proto_cameramonitor_cameramonitor_proto_goTypes = nil
	file_proto_cameramonitor_cameramonitor_proto_depIdxs = nil
}
