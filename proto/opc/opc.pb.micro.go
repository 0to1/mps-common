// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/opc/opc.proto

package go_micro_srv_opc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for OpcService service

type OpcService interface {
	//read all of signal value for imexport id number
	ReadOpcValueById(ctx context.Context, in *ReadGroupReq, opts ...client.CallOption) (*ReadGroupResp, error)
	//read signal value by some signal item name
	ReadOpcValueByItems(ctx context.Context, in *ReadItemsReq, opts ...client.CallOption) (*ReadItemsResp, error)
	//read signal value by one sigal item name
	ReadOpcValueByItem(ctx context.Context, in *ReadItemReq, opts ...client.CallOption) (*ReadItemResp, error)
	//write  signal value by signal item name
	WriteOpcValueByItem(ctx context.Context, in *WriteItemReq, opts ...client.CallOption) (*WriteItemResp, error)
	//Update Xml by xml import
	UpdateXml(ctx context.Context, in *XmlReq, opts ...client.CallOption) (*XmlResp, error)
	//
	SetOpcConfig(ctx context.Context, in *OpcConfigReq, opts ...client.CallOption) (*OpcConfigResp, error)
	//Read Group Item Value
	ReadItemValue(ctx context.Context, in *ItemReq, opts ...client.CallOption) (*ItemResp, error)
	//Write Group Item Value
	WriteItemValue(ctx context.Context, in *ItemReq, opts ...client.CallOption) (*ItemResp, error)
}

type opcService struct {
	c    client.Client
	name string
}

func NewOpcService(name string, c client.Client) OpcService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.opc"
	}
	return &opcService{
		c:    c,
		name: name,
	}
}

func (c *opcService) ReadOpcValueById(ctx context.Context, in *ReadGroupReq, opts ...client.CallOption) (*ReadGroupResp, error) {
	req := c.c.NewRequest(c.name, "OpcService.ReadOpcValueById", in)
	out := new(ReadGroupResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opcService) ReadOpcValueByItems(ctx context.Context, in *ReadItemsReq, opts ...client.CallOption) (*ReadItemsResp, error) {
	req := c.c.NewRequest(c.name, "OpcService.ReadOpcValueByItems", in)
	out := new(ReadItemsResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opcService) ReadOpcValueByItem(ctx context.Context, in *ReadItemReq, opts ...client.CallOption) (*ReadItemResp, error) {
	req := c.c.NewRequest(c.name, "OpcService.ReadOpcValueByItem", in)
	out := new(ReadItemResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opcService) WriteOpcValueByItem(ctx context.Context, in *WriteItemReq, opts ...client.CallOption) (*WriteItemResp, error) {
	req := c.c.NewRequest(c.name, "OpcService.WriteOpcValueByItem", in)
	out := new(WriteItemResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opcService) UpdateXml(ctx context.Context, in *XmlReq, opts ...client.CallOption) (*XmlResp, error) {
	req := c.c.NewRequest(c.name, "OpcService.UpdateXml", in)
	out := new(XmlResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opcService) SetOpcConfig(ctx context.Context, in *OpcConfigReq, opts ...client.CallOption) (*OpcConfigResp, error) {
	req := c.c.NewRequest(c.name, "OpcService.SetOpcConfig", in)
	out := new(OpcConfigResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opcService) ReadItemValue(ctx context.Context, in *ItemReq, opts ...client.CallOption) (*ItemResp, error) {
	req := c.c.NewRequest(c.name, "OpcService.ReadItemValue", in)
	out := new(ItemResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opcService) WriteItemValue(ctx context.Context, in *ItemReq, opts ...client.CallOption) (*ItemResp, error) {
	req := c.c.NewRequest(c.name, "OpcService.WriteItemValue", in)
	out := new(ItemResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OpcService service

type OpcServiceHandler interface {
	//read all of signal value for imexport id number
	ReadOpcValueById(context.Context, *ReadGroupReq, *ReadGroupResp) error
	//read signal value by some signal item name
	ReadOpcValueByItems(context.Context, *ReadItemsReq, *ReadItemsResp) error
	//read signal value by one sigal item name
	ReadOpcValueByItem(context.Context, *ReadItemReq, *ReadItemResp) error
	//write  signal value by signal item name
	WriteOpcValueByItem(context.Context, *WriteItemReq, *WriteItemResp) error
	//Update Xml by xml import
	UpdateXml(context.Context, *XmlReq, *XmlResp) error
	//
	SetOpcConfig(context.Context, *OpcConfigReq, *OpcConfigResp) error
	//Read Group Item Value
	ReadItemValue(context.Context, *ItemReq, *ItemResp) error
	//Write Group Item Value
	WriteItemValue(context.Context, *ItemReq, *ItemResp) error
}

func RegisterOpcServiceHandler(s server.Server, hdlr OpcServiceHandler, opts ...server.HandlerOption) error {
	type opcService interface {
		ReadOpcValueById(ctx context.Context, in *ReadGroupReq, out *ReadGroupResp) error
		ReadOpcValueByItems(ctx context.Context, in *ReadItemsReq, out *ReadItemsResp) error
		ReadOpcValueByItem(ctx context.Context, in *ReadItemReq, out *ReadItemResp) error
		WriteOpcValueByItem(ctx context.Context, in *WriteItemReq, out *WriteItemResp) error
		UpdateXml(ctx context.Context, in *XmlReq, out *XmlResp) error
		SetOpcConfig(ctx context.Context, in *OpcConfigReq, out *OpcConfigResp) error
		ReadItemValue(ctx context.Context, in *ItemReq, out *ItemResp) error
		WriteItemValue(ctx context.Context, in *ItemReq, out *ItemResp) error
	}
	type OpcService struct {
		opcService
	}
	h := &opcServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&OpcService{h}, opts...))
}

type opcServiceHandler struct {
	OpcServiceHandler
}

func (h *opcServiceHandler) ReadOpcValueById(ctx context.Context, in *ReadGroupReq, out *ReadGroupResp) error {
	return h.OpcServiceHandler.ReadOpcValueById(ctx, in, out)
}

func (h *opcServiceHandler) ReadOpcValueByItems(ctx context.Context, in *ReadItemsReq, out *ReadItemsResp) error {
	return h.OpcServiceHandler.ReadOpcValueByItems(ctx, in, out)
}

func (h *opcServiceHandler) ReadOpcValueByItem(ctx context.Context, in *ReadItemReq, out *ReadItemResp) error {
	return h.OpcServiceHandler.ReadOpcValueByItem(ctx, in, out)
}

func (h *opcServiceHandler) WriteOpcValueByItem(ctx context.Context, in *WriteItemReq, out *WriteItemResp) error {
	return h.OpcServiceHandler.WriteOpcValueByItem(ctx, in, out)
}

func (h *opcServiceHandler) UpdateXml(ctx context.Context, in *XmlReq, out *XmlResp) error {
	return h.OpcServiceHandler.UpdateXml(ctx, in, out)
}

func (h *opcServiceHandler) SetOpcConfig(ctx context.Context, in *OpcConfigReq, out *OpcConfigResp) error {
	return h.OpcServiceHandler.SetOpcConfig(ctx, in, out)
}

func (h *opcServiceHandler) ReadItemValue(ctx context.Context, in *ItemReq, out *ItemResp) error {
	return h.OpcServiceHandler.ReadItemValue(ctx, in, out)
}

func (h *opcServiceHandler) WriteItemValue(ctx context.Context, in *ItemReq, out *ItemResp) error {
	return h.OpcServiceHandler.WriteItemValue(ctx, in, out)
}
