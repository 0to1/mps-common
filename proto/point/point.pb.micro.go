// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/point/point.proto

package go_micro_srv_point

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Point service

type PointService interface {
	//Get point message according to point id
	GetPointByID(ctx context.Context, in *IdRequest, opts ...client.CallOption) (*PointResponse, error)
	//Get all points message
	GetPoints(ctx context.Context, in *Query, opts ...client.CallOption) (*PointsResponse, error)
	//Get points by graphql
	GetPointsByGraphql(ctx context.Context, in *GraphqlQuery, opts ...client.CallOption) (*GraphqlPoints, error)
}

type pointService struct {
	c    client.Client
	name string
}

func NewPointService(name string, c client.Client) PointService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.point"
	}
	return &pointService{
		c:    c,
		name: name,
	}
}

func (c *pointService) GetPointByID(ctx context.Context, in *IdRequest, opts ...client.CallOption) (*PointResponse, error) {
	req := c.c.NewRequest(c.name, "Point.GetPointByID", in)
	out := new(PointResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointService) GetPoints(ctx context.Context, in *Query, opts ...client.CallOption) (*PointsResponse, error) {
	req := c.c.NewRequest(c.name, "Point.GetPoints", in)
	out := new(PointsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointService) GetPointsByGraphql(ctx context.Context, in *GraphqlQuery, opts ...client.CallOption) (*GraphqlPoints, error) {
	req := c.c.NewRequest(c.name, "Point.GetPointsByGraphql", in)
	out := new(GraphqlPoints)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Point service

type PointHandler interface {
	//Get point message according to point id
	GetPointByID(context.Context, *IdRequest, *PointResponse) error
	//Get all points message
	GetPoints(context.Context, *Query, *PointsResponse) error
	//Get points by graphql
	GetPointsByGraphql(context.Context, *GraphqlQuery, *GraphqlPoints) error
}

func RegisterPointHandler(s server.Server, hdlr PointHandler, opts ...server.HandlerOption) error {
	type point interface {
		GetPointByID(ctx context.Context, in *IdRequest, out *PointResponse) error
		GetPoints(ctx context.Context, in *Query, out *PointsResponse) error
		GetPointsByGraphql(ctx context.Context, in *GraphqlQuery, out *GraphqlPoints) error
	}
	type Point struct {
		point
	}
	h := &pointHandler{hdlr}
	return s.Handle(s.NewHandler(&Point{h}, opts...))
}

type pointHandler struct {
	PointHandler
}

func (h *pointHandler) GetPointByID(ctx context.Context, in *IdRequest, out *PointResponse) error {
	return h.PointHandler.GetPointByID(ctx, in, out)
}

func (h *pointHandler) GetPoints(ctx context.Context, in *Query, out *PointsResponse) error {
	return h.PointHandler.GetPoints(ctx, in, out)
}

func (h *pointHandler) GetPointsByGraphql(ctx context.Context, in *GraphqlQuery, out *GraphqlPoints) error {
	return h.PointHandler.GetPointsByGraphql(ctx, in, out)
}
