// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/segment/segment.proto

package go_micro_srv_segment

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Segment service

type SegmentService interface {
	//Get segment message according to segment id
	GetSegmentByID(ctx context.Context, in *IdRequest, opts ...client.CallOption) (*SegmentResponse, error)
	//Get all segments message
	GetSegments(ctx context.Context, in *Query, opts ...client.CallOption) (*SegmentsResponse, error)
	//Get segments by graphql
	GetSegmentsByGraphql(ctx context.Context, in *GraphqlQuery, opts ...client.CallOption) (*GraphqlSegments, error)
}

type segmentService struct {
	c    client.Client
	name string
}

func NewSegmentService(name string, c client.Client) SegmentService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.segment"
	}
	return &segmentService{
		c:    c,
		name: name,
	}
}

func (c *segmentService) GetSegmentByID(ctx context.Context, in *IdRequest, opts ...client.CallOption) (*SegmentResponse, error) {
	req := c.c.NewRequest(c.name, "Segment.GetSegmentByID", in)
	out := new(SegmentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentService) GetSegments(ctx context.Context, in *Query, opts ...client.CallOption) (*SegmentsResponse, error) {
	req := c.c.NewRequest(c.name, "Segment.GetSegments", in)
	out := new(SegmentsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentService) GetSegmentsByGraphql(ctx context.Context, in *GraphqlQuery, opts ...client.CallOption) (*GraphqlSegments, error) {
	req := c.c.NewRequest(c.name, "Segment.GetSegmentsByGraphql", in)
	out := new(GraphqlSegments)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Segment service

type SegmentHandler interface {
	//Get segment message according to segment id
	GetSegmentByID(context.Context, *IdRequest, *SegmentResponse) error
	//Get all segments message
	GetSegments(context.Context, *Query, *SegmentsResponse) error
	//Get segments by graphql
	GetSegmentsByGraphql(context.Context, *GraphqlQuery, *GraphqlSegments) error
}

func RegisterSegmentHandler(s server.Server, hdlr SegmentHandler, opts ...server.HandlerOption) error {
	type segment interface {
		GetSegmentByID(ctx context.Context, in *IdRequest, out *SegmentResponse) error
		GetSegments(ctx context.Context, in *Query, out *SegmentsResponse) error
		GetSegmentsByGraphql(ctx context.Context, in *GraphqlQuery, out *GraphqlSegments) error
	}
	type Segment struct {
		segment
	}
	h := &segmentHandler{hdlr}
	return s.Handle(s.NewHandler(&Segment{h}, opts...))
}

type segmentHandler struct {
	SegmentHandler
}

func (h *segmentHandler) GetSegmentByID(ctx context.Context, in *IdRequest, out *SegmentResponse) error {
	return h.SegmentHandler.GetSegmentByID(ctx, in, out)
}

func (h *segmentHandler) GetSegments(ctx context.Context, in *Query, out *SegmentsResponse) error {
	return h.SegmentHandler.GetSegments(ctx, in, out)
}

func (h *segmentHandler) GetSegmentsByGraphql(ctx context.Context, in *GraphqlQuery, out *GraphqlSegments) error {
	return h.SegmentHandler.GetSegmentsByGraphql(ctx, in, out)
}
