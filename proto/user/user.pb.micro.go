// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/user/user.proto

package go_micro_srv_user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for User service

func NewUserEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for User service

type UserService interface {
	// 注册用户
	Signup(ctx context.Context, in *SignupReq, opts ...client.CallOption) (*SignupResp, error)
	// 用户登陆
	Signin(ctx context.Context, in *SigninReq, opts ...client.CallOption) (*UserResp, error)
	// 用户退出登陆
	Signout(ctx context.Context, in *SignoutReq, opts ...client.CallOption) (*SignoutResp, error)
	// 密码重置
	Reset(ctx context.Context, in *ResetReq, opts ...client.CallOption) (*ResetResp, error)
	// 修改用户信息
	Update(ctx context.Context, in *UpdateReq, opts ...client.CallOption) (*UserResp, error)
	// 根据token获取用户信息
	GetUserByToken(ctx context.Context, in *TokenReq, opts ...client.CallOption) (*UserResp, error)
	// 根据用户ID删除指定用户
	DeleteUser(ctx context.Context, in *IdReq, opts ...client.CallOption) (*DeleteResp, error)
	// 根据用户ID获取用户信息
	GetUser(ctx context.Context, in *IdReq, opts ...client.CallOption) (*UserResp, error)
	// 根据分页，条件查询等返回用户列表
	GetUsers(ctx context.Context, in *Query, opts ...client.CallOption) (*UsersResp, error)
	SaveConfig(ctx context.Context, in *ConfigReq, opts ...client.CallOption) (*ConfigResp, error)
	DeleteConfig(ctx context.Context, in *ConfigReq, opts ...client.CallOption) (*ConfigResp, error)
	GetConfig(ctx context.Context, in *ConfigReq, opts ...client.CallOption) (*ConfigResp, error)
	Initialized(ctx context.Context, in *Nop, opts ...client.CallOption) (*InitializedResp, error)
	Initialize(ctx context.Context, in *InitializeReq, opts ...client.CallOption) (*InitializeResp, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) Signup(ctx context.Context, in *SignupReq, opts ...client.CallOption) (*SignupResp, error) {
	req := c.c.NewRequest(c.name, "User.Signup", in)
	out := new(SignupResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Signin(ctx context.Context, in *SigninReq, opts ...client.CallOption) (*UserResp, error) {
	req := c.c.NewRequest(c.name, "User.Signin", in)
	out := new(UserResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Signout(ctx context.Context, in *SignoutReq, opts ...client.CallOption) (*SignoutResp, error) {
	req := c.c.NewRequest(c.name, "User.Signout", in)
	out := new(SignoutResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Reset(ctx context.Context, in *ResetReq, opts ...client.CallOption) (*ResetResp, error) {
	req := c.c.NewRequest(c.name, "User.Reset", in)
	out := new(ResetResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Update(ctx context.Context, in *UpdateReq, opts ...client.CallOption) (*UserResp, error) {
	req := c.c.NewRequest(c.name, "User.Update", in)
	out := new(UserResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUserByToken(ctx context.Context, in *TokenReq, opts ...client.CallOption) (*UserResp, error) {
	req := c.c.NewRequest(c.name, "User.GetUserByToken", in)
	out := new(UserResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) DeleteUser(ctx context.Context, in *IdReq, opts ...client.CallOption) (*DeleteResp, error) {
	req := c.c.NewRequest(c.name, "User.DeleteUser", in)
	out := new(DeleteResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUser(ctx context.Context, in *IdReq, opts ...client.CallOption) (*UserResp, error) {
	req := c.c.NewRequest(c.name, "User.GetUser", in)
	out := new(UserResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUsers(ctx context.Context, in *Query, opts ...client.CallOption) (*UsersResp, error) {
	req := c.c.NewRequest(c.name, "User.GetUsers", in)
	out := new(UsersResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) SaveConfig(ctx context.Context, in *ConfigReq, opts ...client.CallOption) (*ConfigResp, error) {
	req := c.c.NewRequest(c.name, "User.SaveConfig", in)
	out := new(ConfigResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) DeleteConfig(ctx context.Context, in *ConfigReq, opts ...client.CallOption) (*ConfigResp, error) {
	req := c.c.NewRequest(c.name, "User.DeleteConfig", in)
	out := new(ConfigResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetConfig(ctx context.Context, in *ConfigReq, opts ...client.CallOption) (*ConfigResp, error) {
	req := c.c.NewRequest(c.name, "User.GetConfig", in)
	out := new(ConfigResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Initialized(ctx context.Context, in *Nop, opts ...client.CallOption) (*InitializedResp, error) {
	req := c.c.NewRequest(c.name, "User.Initialized", in)
	out := new(InitializedResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Initialize(ctx context.Context, in *InitializeReq, opts ...client.CallOption) (*InitializeResp, error) {
	req := c.c.NewRequest(c.name, "User.Initialize", in)
	out := new(InitializeResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserHandler interface {
	// 注册用户
	Signup(context.Context, *SignupReq, *SignupResp) error
	// 用户登陆
	Signin(context.Context, *SigninReq, *UserResp) error
	// 用户退出登陆
	Signout(context.Context, *SignoutReq, *SignoutResp) error
	// 密码重置
	Reset(context.Context, *ResetReq, *ResetResp) error
	// 修改用户信息
	Update(context.Context, *UpdateReq, *UserResp) error
	// 根据token获取用户信息
	GetUserByToken(context.Context, *TokenReq, *UserResp) error
	// 根据用户ID删除指定用户
	DeleteUser(context.Context, *IdReq, *DeleteResp) error
	// 根据用户ID获取用户信息
	GetUser(context.Context, *IdReq, *UserResp) error
	// 根据分页，条件查询等返回用户列表
	GetUsers(context.Context, *Query, *UsersResp) error
	SaveConfig(context.Context, *ConfigReq, *ConfigResp) error
	DeleteConfig(context.Context, *ConfigReq, *ConfigResp) error
	GetConfig(context.Context, *ConfigReq, *ConfigResp) error
	Initialized(context.Context, *Nop, *InitializedResp) error
	Initialize(context.Context, *InitializeReq, *InitializeResp) error
}

func RegisterUserHandler(s server.Server, hdlr UserHandler, opts ...server.HandlerOption) error {
	type user interface {
		Signup(ctx context.Context, in *SignupReq, out *SignupResp) error
		Signin(ctx context.Context, in *SigninReq, out *UserResp) error
		Signout(ctx context.Context, in *SignoutReq, out *SignoutResp) error
		Reset(ctx context.Context, in *ResetReq, out *ResetResp) error
		Update(ctx context.Context, in *UpdateReq, out *UserResp) error
		GetUserByToken(ctx context.Context, in *TokenReq, out *UserResp) error
		DeleteUser(ctx context.Context, in *IdReq, out *DeleteResp) error
		GetUser(ctx context.Context, in *IdReq, out *UserResp) error
		GetUsers(ctx context.Context, in *Query, out *UsersResp) error
		SaveConfig(ctx context.Context, in *ConfigReq, out *ConfigResp) error
		DeleteConfig(ctx context.Context, in *ConfigReq, out *ConfigResp) error
		GetConfig(ctx context.Context, in *ConfigReq, out *ConfigResp) error
		Initialized(ctx context.Context, in *Nop, out *InitializedResp) error
		Initialize(ctx context.Context, in *InitializeReq, out *InitializeResp) error
	}
	type User struct {
		user
	}
	h := &userHandler{hdlr}
	return s.Handle(s.NewHandler(&User{h}, opts...))
}

type userHandler struct {
	UserHandler
}

func (h *userHandler) Signup(ctx context.Context, in *SignupReq, out *SignupResp) error {
	return h.UserHandler.Signup(ctx, in, out)
}

func (h *userHandler) Signin(ctx context.Context, in *SigninReq, out *UserResp) error {
	return h.UserHandler.Signin(ctx, in, out)
}

func (h *userHandler) Signout(ctx context.Context, in *SignoutReq, out *SignoutResp) error {
	return h.UserHandler.Signout(ctx, in, out)
}

func (h *userHandler) Reset(ctx context.Context, in *ResetReq, out *ResetResp) error {
	return h.UserHandler.Reset(ctx, in, out)
}

func (h *userHandler) Update(ctx context.Context, in *UpdateReq, out *UserResp) error {
	return h.UserHandler.Update(ctx, in, out)
}

func (h *userHandler) GetUserByToken(ctx context.Context, in *TokenReq, out *UserResp) error {
	return h.UserHandler.GetUserByToken(ctx, in, out)
}

func (h *userHandler) DeleteUser(ctx context.Context, in *IdReq, out *DeleteResp) error {
	return h.UserHandler.DeleteUser(ctx, in, out)
}

func (h *userHandler) GetUser(ctx context.Context, in *IdReq, out *UserResp) error {
	return h.UserHandler.GetUser(ctx, in, out)
}

func (h *userHandler) GetUsers(ctx context.Context, in *Query, out *UsersResp) error {
	return h.UserHandler.GetUsers(ctx, in, out)
}

func (h *userHandler) SaveConfig(ctx context.Context, in *ConfigReq, out *ConfigResp) error {
	return h.UserHandler.SaveConfig(ctx, in, out)
}

func (h *userHandler) DeleteConfig(ctx context.Context, in *ConfigReq, out *ConfigResp) error {
	return h.UserHandler.DeleteConfig(ctx, in, out)
}

func (h *userHandler) GetConfig(ctx context.Context, in *ConfigReq, out *ConfigResp) error {
	return h.UserHandler.GetConfig(ctx, in, out)
}

func (h *userHandler) Initialized(ctx context.Context, in *Nop, out *InitializedResp) error {
	return h.UserHandler.Initialized(ctx, in, out)
}

func (h *userHandler) Initialize(ctx context.Context, in *InitializeReq, out *InitializeResp) error {
	return h.UserHandler.Initialize(ctx, in, out)
}
