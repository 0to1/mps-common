// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/camera/camera.proto

package go_micro_srv_camera

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CameraService service

func NewCameraServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CameraService service

type CameraService interface {
	// 拍照
	SnapPicture(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error)
	AddCamera(ctx context.Context, in *CameraReq, opts ...client.CallOption) (*Response, error)
	DeleteCamera(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error)
	ConfigCamera(ctx context.Context, in *CameraReq, opts ...client.CallOption) (*Response, error)
	// 获取出入口的摄像头信息
	GetCamera(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Camera, error)
	GetCameras(ctx context.Context, in *Query, opts ...client.CallOption) (*Cameras, error)
}

type cameraService struct {
	c    client.Client
	name string
}

func NewCameraService(name string, c client.Client) CameraService {
	return &cameraService{
		c:    c,
		name: name,
	}
}

func (c *cameraService) SnapPicture(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "CameraService.SnapPicture", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraService) AddCamera(ctx context.Context, in *CameraReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "CameraService.AddCamera", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraService) DeleteCamera(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "CameraService.DeleteCamera", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraService) ConfigCamera(ctx context.Context, in *CameraReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "CameraService.ConfigCamera", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraService) GetCamera(ctx context.Context, in *IDReq, opts ...client.CallOption) (*Camera, error) {
	req := c.c.NewRequest(c.name, "CameraService.GetCamera", in)
	out := new(Camera)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraService) GetCameras(ctx context.Context, in *Query, opts ...client.CallOption) (*Cameras, error) {
	req := c.c.NewRequest(c.name, "CameraService.GetCameras", in)
	out := new(Cameras)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CameraService service

type CameraServiceHandler interface {
	// 拍照
	SnapPicture(context.Context, *IDReq, *Response) error
	AddCamera(context.Context, *CameraReq, *Response) error
	DeleteCamera(context.Context, *IDReq, *Response) error
	ConfigCamera(context.Context, *CameraReq, *Response) error
	// 获取出入口的摄像头信息
	GetCamera(context.Context, *IDReq, *Camera) error
	GetCameras(context.Context, *Query, *Cameras) error
}

func RegisterCameraServiceHandler(s server.Server, hdlr CameraServiceHandler, opts ...server.HandlerOption) error {
	type cameraService interface {
		SnapPicture(ctx context.Context, in *IDReq, out *Response) error
		AddCamera(ctx context.Context, in *CameraReq, out *Response) error
		DeleteCamera(ctx context.Context, in *IDReq, out *Response) error
		ConfigCamera(ctx context.Context, in *CameraReq, out *Response) error
		GetCamera(ctx context.Context, in *IDReq, out *Camera) error
		GetCameras(ctx context.Context, in *Query, out *Cameras) error
	}
	type CameraService struct {
		cameraService
	}
	h := &cameraServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CameraService{h}, opts...))
}

type cameraServiceHandler struct {
	CameraServiceHandler
}

func (h *cameraServiceHandler) SnapPicture(ctx context.Context, in *IDReq, out *Response) error {
	return h.CameraServiceHandler.SnapPicture(ctx, in, out)
}

func (h *cameraServiceHandler) AddCamera(ctx context.Context, in *CameraReq, out *Response) error {
	return h.CameraServiceHandler.AddCamera(ctx, in, out)
}

func (h *cameraServiceHandler) DeleteCamera(ctx context.Context, in *IDReq, out *Response) error {
	return h.CameraServiceHandler.DeleteCamera(ctx, in, out)
}

func (h *cameraServiceHandler) ConfigCamera(ctx context.Context, in *CameraReq, out *Response) error {
	return h.CameraServiceHandler.ConfigCamera(ctx, in, out)
}

func (h *cameraServiceHandler) GetCamera(ctx context.Context, in *IDReq, out *Camera) error {
	return h.CameraServiceHandler.GetCamera(ctx, in, out)
}

func (h *cameraServiceHandler) GetCameras(ctx context.Context, in *Query, out *Cameras) error {
	return h.CameraServiceHandler.GetCameras(ctx, in, out)
}
