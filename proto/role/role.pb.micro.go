// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/role/role.proto

package go_micro_srv_role

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Role service

type RoleService interface {
	// 添加角色
	AddRole(ctx context.Context, in *AddRoleReq, opts ...client.CallOption) (*AddRoleResp, error)
	// 删除指定角色
	DeleteRole(ctx context.Context, in *IdReq, opts ...client.CallOption) (*DeleteRoleResp, error)
	// 修改角色信息
	Update(ctx context.Context, in *UpdateReq, opts ...client.CallOption) (*UpdateResp, error)
	// 根据角色ID获取角色信息
	GetRoleByID(ctx context.Context, in *IdReq, opts ...client.CallOption) (*RoleResp, error)
	// 根据查询条件获取用户列表
	GetRoles(ctx context.Context, in *Query, opts ...client.CallOption) (*RolesResp, error)
	// 验证用户是否具备访问权限
	AuthRole(ctx context.Context, in *AuthReq, opts ...client.CallOption) (*AuthResp, error)
}

type roleService struct {
	c    client.Client
	name string
}

func NewRoleService(name string, c client.Client) RoleService {
	return &roleService{
		c:    c,
		name: name,
	}
}

func (c *roleService) AddRole(ctx context.Context, in *AddRoleReq, opts ...client.CallOption) (*AddRoleResp, error) {
	req := c.c.NewRequest(c.name, "Role.AddRole", in)
	out := new(AddRoleResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) DeleteRole(ctx context.Context, in *IdReq, opts ...client.CallOption) (*DeleteRoleResp, error) {
	req := c.c.NewRequest(c.name, "Role.DeleteRole", in)
	out := new(DeleteRoleResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) Update(ctx context.Context, in *UpdateReq, opts ...client.CallOption) (*UpdateResp, error) {
	req := c.c.NewRequest(c.name, "Role.Update", in)
	out := new(UpdateResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) GetRoleByID(ctx context.Context, in *IdReq, opts ...client.CallOption) (*RoleResp, error) {
	req := c.c.NewRequest(c.name, "Role.GetRoleByID", in)
	out := new(RoleResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) GetRoles(ctx context.Context, in *Query, opts ...client.CallOption) (*RolesResp, error) {
	req := c.c.NewRequest(c.name, "Role.GetRoles", in)
	out := new(RolesResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) AuthRole(ctx context.Context, in *AuthReq, opts ...client.CallOption) (*AuthResp, error) {
	req := c.c.NewRequest(c.name, "Role.AuthRole", in)
	out := new(AuthResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Role service

type RoleHandler interface {
	// 添加角色
	AddRole(context.Context, *AddRoleReq, *AddRoleResp) error
	// 删除指定角色
	DeleteRole(context.Context, *IdReq, *DeleteRoleResp) error
	// 修改角色信息
	Update(context.Context, *UpdateReq, *UpdateResp) error
	// 根据角色ID获取角色信息
	GetRoleByID(context.Context, *IdReq, *RoleResp) error
	// 根据查询条件获取用户列表
	GetRoles(context.Context, *Query, *RolesResp) error
	// 验证用户是否具备访问权限
	AuthRole(context.Context, *AuthReq, *AuthResp) error
}

func RegisterRoleHandler(s server.Server, hdlr RoleHandler, opts ...server.HandlerOption) error {
	type role interface {
		AddRole(ctx context.Context, in *AddRoleReq, out *AddRoleResp) error
		DeleteRole(ctx context.Context, in *IdReq, out *DeleteRoleResp) error
		Update(ctx context.Context, in *UpdateReq, out *UpdateResp) error
		GetRoleByID(ctx context.Context, in *IdReq, out *RoleResp) error
		GetRoles(ctx context.Context, in *Query, out *RolesResp) error
		AuthRole(ctx context.Context, in *AuthReq, out *AuthResp) error
	}
	type Role struct {
		role
	}
	h := &roleHandler{hdlr}
	return s.Handle(s.NewHandler(&Role{h}, opts...))
}

type roleHandler struct {
	RoleHandler
}

func (h *roleHandler) AddRole(ctx context.Context, in *AddRoleReq, out *AddRoleResp) error {
	return h.RoleHandler.AddRole(ctx, in, out)
}

func (h *roleHandler) DeleteRole(ctx context.Context, in *IdReq, out *DeleteRoleResp) error {
	return h.RoleHandler.DeleteRole(ctx, in, out)
}

func (h *roleHandler) Update(ctx context.Context, in *UpdateReq, out *UpdateResp) error {
	return h.RoleHandler.Update(ctx, in, out)
}

func (h *roleHandler) GetRoleByID(ctx context.Context, in *IdReq, out *RoleResp) error {
	return h.RoleHandler.GetRoleByID(ctx, in, out)
}

func (h *roleHandler) GetRoles(ctx context.Context, in *Query, out *RolesResp) error {
	return h.RoleHandler.GetRoles(ctx, in, out)
}

func (h *roleHandler) AuthRole(ctx context.Context, in *AuthReq, out *AuthResp) error {
	return h.RoleHandler.AuthRole(ctx, in, out)
}
