// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: proto/racktype/racktype.proto

package go_micro_srv_racktype

import (
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RackType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Length uint32 `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`
	Width  uint32 `protobuf:"varint,5,opt,name=width,proto3" json:"width,omitempty"`
	Height uint32 `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
	Layers uint32 `protobuf:"varint,7,opt,name=layers,proto3" json:"layers,omitempty"`
	// 拣货面(A、B两面或者只有一面)
	PickingSurface uint32 `protobuf:"varint,9,opt,name=pickingSurface,proto3" json:"pickingSurface,omitempty"`
	Description    string `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	//储位数量
	Cells      []*RackCell `protobuf:"bytes,12,rep,name=cells,proto3" json:"cells,omitempty"`
	CellOption string      `protobuf:"bytes,13,opt,name=cellOption,proto3" json:"cellOption,omitempty"`
}

func (x *RackType) Reset() {
	*x = RackType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racktype_racktype_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RackType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RackType) ProtoMessage() {}

func (x *RackType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racktype_racktype_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RackType.ProtoReflect.Descriptor instead.
func (*RackType) Descriptor() ([]byte, []int) {
	return file_proto_racktype_racktype_proto_rawDescGZIP(), []int{0}
}

func (x *RackType) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RackType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RackType) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *RackType) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *RackType) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *RackType) GetLayers() uint32 {
	if x != nil {
		return x.Layers
	}
	return 0
}

func (x *RackType) GetPickingSurface() uint32 {
	if x != nil {
		return x.PickingSurface
	}
	return 0
}

func (x *RackType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RackType) GetCells() []*RackCell {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *RackType) GetCellOption() string {
	if x != nil {
		return x.CellOption
	}
	return ""
}

type RackCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellType uint32 `protobuf:"varint,1,opt,name=cellType,proto3" json:"cellType,omitempty"`
	Row      uint32 `protobuf:"varint,2,opt,name=row,proto3" json:"row,omitempty"`
	Column   uint32 `protobuf:"varint,3,opt,name=column,proto3" json:"column,omitempty"`
}

func (x *RackCell) Reset() {
	*x = RackCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racktype_racktype_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RackCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RackCell) ProtoMessage() {}

func (x *RackCell) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racktype_racktype_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RackCell.ProtoReflect.Descriptor instead.
func (*RackCell) Descriptor() ([]byte, []int) {
	return file_proto_racktype_racktype_proto_rawDescGZIP(), []int{1}
}

func (x *RackCell) GetCellType() uint32 {
	if x != nil {
		return x.CellType
	}
	return 0
}

func (x *RackCell) GetRow() uint32 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *RackCell) GetColumn() uint32 {
	if x != nil {
		return x.Column
	}
	return 0
}

type CellType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Length      uint32 `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`
	Width       uint32 `protobuf:"varint,5,opt,name=width,proto3" json:"width,omitempty"`
	Height      uint32 `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
	Description string `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	IsValid     bool   `protobuf:"varint,9,opt,name=isValid,proto3" json:"isValid,omitempty"`
	Properties  string `protobuf:"bytes,10,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *CellType) Reset() {
	*x = CellType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racktype_racktype_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellType) ProtoMessage() {}

func (x *CellType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racktype_racktype_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellType.ProtoReflect.Descriptor instead.
func (*CellType) Descriptor() ([]byte, []int) {
	return file_proto_racktype_racktype_proto_rawDescGZIP(), []int{2}
}

func (x *CellType) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CellType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CellType) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *CellType) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *CellType) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *CellType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CellType) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CellType) GetProperties() string {
	if x != nil {
		return x.Properties
	}
	return ""
}

type UpdateRackTypeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Update *UpdateRackType `protobuf:"bytes,2,opt,name=update,proto3" json:"update,omitempty"`
}

func (x *UpdateRackTypeReq) Reset() {
	*x = UpdateRackTypeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racktype_racktype_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRackTypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRackTypeReq) ProtoMessage() {}

func (x *UpdateRackTypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racktype_racktype_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRackTypeReq.ProtoReflect.Descriptor instead.
func (*UpdateRackTypeReq) Descriptor() ([]byte, []int) {
	return file_proto_racktype_racktype_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateRackTypeReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateRackTypeReq) GetUpdate() *UpdateRackType {
	if x != nil {
		return x.Update
	}
	return nil
}

type UpdateRackType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *wrappers.UInt32Value `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           *wrappers.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Length         *wrappers.UInt32Value `protobuf:"bytes,4,opt,name=length,proto3" json:"length,omitempty"`
	Width          *wrappers.UInt32Value `protobuf:"bytes,5,opt,name=width,proto3" json:"width,omitempty"`
	Height         *wrappers.UInt32Value `protobuf:"bytes,6,opt,name=height,proto3" json:"height,omitempty"`
	Layers         *wrappers.UInt32Value `protobuf:"bytes,7,opt,name=layers,proto3" json:"layers,omitempty"`
	PickingSurface *wrappers.UInt32Value `protobuf:"bytes,8,opt,name=pickingSurface,proto3" json:"pickingSurface,omitempty"`
	Description    *wrappers.StringValue `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	Cells          []*RackCell           `protobuf:"bytes,12,rep,name=cells,proto3" json:"cells,omitempty"`
	CellOption     string                `protobuf:"bytes,13,opt,name=cellOption,proto3" json:"cellOption,omitempty"`
}

func (x *UpdateRackType) Reset() {
	*x = UpdateRackType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racktype_racktype_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRackType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRackType) ProtoMessage() {}

func (x *UpdateRackType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racktype_racktype_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRackType.ProtoReflect.Descriptor instead.
func (*UpdateRackType) Descriptor() ([]byte, []int) {
	return file_proto_racktype_racktype_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateRackType) GetId() *wrappers.UInt32Value {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UpdateRackType) GetName() *wrappers.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *UpdateRackType) GetLength() *wrappers.UInt32Value {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *UpdateRackType) GetWidth() *wrappers.UInt32Value {
	if x != nil {
		return x.Width
	}
	return nil
}

func (x *UpdateRackType) GetHeight() *wrappers.UInt32Value {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *UpdateRackType) GetLayers() *wrappers.UInt32Value {
	if x != nil {
		return x.Layers
	}
	return nil
}

func (x *UpdateRackType) GetPickingSurface() *wrappers.UInt32Value {
	if x != nil {
		return x.PickingSurface
	}
	return nil
}

func (x *UpdateRackType) GetDescription() *wrappers.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *UpdateRackType) GetCells() []*RackCell {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *UpdateRackType) GetCellOption() string {
	if x != nil {
		return x.CellOption
	}
	return ""
}

type UpdateCellTypeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Update *UpdateCellType `protobuf:"bytes,2,opt,name=update,proto3" json:"update,omitempty"`
}

func (x *UpdateCellTypeReq) Reset() {
	*x = UpdateCellTypeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racktype_racktype_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCellTypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCellTypeReq) ProtoMessage() {}

func (x *UpdateCellTypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racktype_racktype_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCellTypeReq.ProtoReflect.Descriptor instead.
func (*UpdateCellTypeReq) Descriptor() ([]byte, []int) {
	return file_proto_racktype_racktype_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateCellTypeReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateCellTypeReq) GetUpdate() *UpdateCellType {
	if x != nil {
		return x.Update
	}
	return nil
}

type UpdateCellType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *wrappers.UInt32Value `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        *wrappers.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Length      *wrappers.UInt32Value `protobuf:"bytes,4,opt,name=length,proto3" json:"length,omitempty"`
	Width       *wrappers.UInt32Value `protobuf:"bytes,5,opt,name=width,proto3" json:"width,omitempty"`
	Height      *wrappers.UInt32Value `protobuf:"bytes,6,opt,name=height,proto3" json:"height,omitempty"`
	Description *wrappers.StringValue `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	IsValid     *wrappers.BoolValue   `protobuf:"bytes,10,opt,name=isValid,proto3" json:"isValid,omitempty"`
	Properties  string                `protobuf:"bytes,11,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *UpdateCellType) Reset() {
	*x = UpdateCellType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racktype_racktype_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCellType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCellType) ProtoMessage() {}

func (x *UpdateCellType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racktype_racktype_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCellType.ProtoReflect.Descriptor instead.
func (*UpdateCellType) Descriptor() ([]byte, []int) {
	return file_proto_racktype_racktype_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateCellType) GetId() *wrappers.UInt32Value {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UpdateCellType) GetName() *wrappers.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *UpdateCellType) GetLength() *wrappers.UInt32Value {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *UpdateCellType) GetWidth() *wrappers.UInt32Value {
	if x != nil {
		return x.Width
	}
	return nil
}

func (x *UpdateCellType) GetHeight() *wrappers.UInt32Value {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *UpdateCellType) GetDescription() *wrappers.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *UpdateCellType) GetIsValid() *wrappers.BoolValue {
	if x != nil {
		return x.IsValid
	}
	return nil
}

func (x *UpdateCellType) GetProperties() string {
	if x != nil {
		return x.Properties
	}
	return ""
}

type IDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IDReq) Reset() {
	*x = IDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racktype_racktype_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDReq) ProtoMessage() {}

func (x *IDReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racktype_racktype_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDReq.ProtoReflect.Descriptor instead.
func (*IDReq) Descriptor() ([]byte, []int) {
	return file_proto_racktype_racktype_proto_rawDescGZIP(), []int{7}
}

func (x *IDReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racktype_racktype_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racktype_racktype_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_proto_racktype_racktype_proto_rawDescGZIP(), []int{8}
}

type RackTypeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   uint32          `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  uint32          `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Page    uint32          `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PerPage uint32          `protobuf:"varint,4,opt,name=perPage,proto3" json:"perPage,omitempty"`
	Filter  *RackTypeFilter `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *RackTypeQuery) Reset() {
	*x = RackTypeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racktype_racktype_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RackTypeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RackTypeQuery) ProtoMessage() {}

func (x *RackTypeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racktype_racktype_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RackTypeQuery.ProtoReflect.Descriptor instead.
func (*RackTypeQuery) Descriptor() ([]byte, []int) {
	return file_proto_racktype_racktype_proto_rawDescGZIP(), []int{9}
}

func (x *RackTypeQuery) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RackTypeQuery) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *RackTypeQuery) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RackTypeQuery) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *RackTypeQuery) GetFilter() *RackTypeFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type CellTypeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   uint32          `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  uint32          `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Page    uint32          `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PerPage uint32          `protobuf:"varint,4,opt,name=perPage,proto3" json:"perPage,omitempty"`
	Filter  *CellTypeFilter `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *CellTypeQuery) Reset() {
	*x = CellTypeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racktype_racktype_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellTypeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellTypeQuery) ProtoMessage() {}

func (x *CellTypeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racktype_racktype_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellTypeQuery.ProtoReflect.Descriptor instead.
func (*CellTypeQuery) Descriptor() ([]byte, []int) {
	return file_proto_racktype_racktype_proto_rawDescGZIP(), []int{10}
}

func (x *CellTypeQuery) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *CellTypeQuery) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *CellTypeQuery) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CellTypeQuery) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *CellTypeQuery) GetFilter() *CellTypeFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type RackTypeFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	And    []*RackTypeFilter     `protobuf:"bytes,1,rep,name=and,proto3" json:"and,omitempty"`
	Or     []*RackTypeFilter     `protobuf:"bytes,2,rep,name=or,proto3" json:"or,omitempty"`
	IdIn   []uint32              `protobuf:"varint,3,rep,packed,name=idIn,proto3" json:"idIn,omitempty"`
	NameIn []string              `protobuf:"bytes,4,rep,name=nameIn,proto3" json:"nameIn,omitempty"`
	Id     *wrappers.UInt32Value `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	Name   *wrappers.StringValue `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RackTypeFilter) Reset() {
	*x = RackTypeFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racktype_racktype_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RackTypeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RackTypeFilter) ProtoMessage() {}

func (x *RackTypeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racktype_racktype_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RackTypeFilter.ProtoReflect.Descriptor instead.
func (*RackTypeFilter) Descriptor() ([]byte, []int) {
	return file_proto_racktype_racktype_proto_rawDescGZIP(), []int{11}
}

func (x *RackTypeFilter) GetAnd() []*RackTypeFilter {
	if x != nil {
		return x.And
	}
	return nil
}

func (x *RackTypeFilter) GetOr() []*RackTypeFilter {
	if x != nil {
		return x.Or
	}
	return nil
}

func (x *RackTypeFilter) GetIdIn() []uint32 {
	if x != nil {
		return x.IdIn
	}
	return nil
}

func (x *RackTypeFilter) GetNameIn() []string {
	if x != nil {
		return x.NameIn
	}
	return nil
}

func (x *RackTypeFilter) GetId() *wrappers.UInt32Value {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RackTypeFilter) GetName() *wrappers.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type CellTypeFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	And    []*CellTypeFilter     `protobuf:"bytes,1,rep,name=and,proto3" json:"and,omitempty"`
	Or     []*CellTypeFilter     `protobuf:"bytes,2,rep,name=or,proto3" json:"or,omitempty"`
	IdIn   []uint32              `protobuf:"varint,3,rep,packed,name=idIn,proto3" json:"idIn,omitempty"`
	NameIn []string              `protobuf:"bytes,4,rep,name=nameIn,proto3" json:"nameIn,omitempty"`
	Id     *wrappers.UInt32Value `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	Name   *wrappers.StringValue `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CellTypeFilter) Reset() {
	*x = CellTypeFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racktype_racktype_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellTypeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellTypeFilter) ProtoMessage() {}

func (x *CellTypeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racktype_racktype_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellTypeFilter.ProtoReflect.Descriptor instead.
func (*CellTypeFilter) Descriptor() ([]byte, []int) {
	return file_proto_racktype_racktype_proto_rawDescGZIP(), []int{12}
}

func (x *CellTypeFilter) GetAnd() []*CellTypeFilter {
	if x != nil {
		return x.And
	}
	return nil
}

func (x *CellTypeFilter) GetOr() []*CellTypeFilter {
	if x != nil {
		return x.Or
	}
	return nil
}

func (x *CellTypeFilter) GetIdIn() []uint32 {
	if x != nil {
		return x.IdIn
	}
	return nil
}

func (x *CellTypeFilter) GetNameIn() []string {
	if x != nil {
		return x.NameIn
	}
	return nil
}

func (x *CellTypeFilter) GetId() *wrappers.UInt32Value {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CellTypeFilter) GetName() *wrappers.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type RackTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RackTypes  []*RackType `protobuf:"bytes,1,rep,name=rackTypes,proto3" json:"rackTypes,omitempty"`
	Totalpages uint32      `protobuf:"varint,2,opt,name=totalpages,proto3" json:"totalpages,omitempty"`
	Currpages  uint32      `protobuf:"varint,3,opt,name=currpages,proto3" json:"currpages,omitempty"`
	Totals     uint32      `protobuf:"varint,4,opt,name=totals,proto3" json:"totals,omitempty"`
}

func (x *RackTypes) Reset() {
	*x = RackTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racktype_racktype_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RackTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RackTypes) ProtoMessage() {}

func (x *RackTypes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racktype_racktype_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RackTypes.ProtoReflect.Descriptor instead.
func (*RackTypes) Descriptor() ([]byte, []int) {
	return file_proto_racktype_racktype_proto_rawDescGZIP(), []int{13}
}

func (x *RackTypes) GetRackTypes() []*RackType {
	if x != nil {
		return x.RackTypes
	}
	return nil
}

func (x *RackTypes) GetTotalpages() uint32 {
	if x != nil {
		return x.Totalpages
	}
	return 0
}

func (x *RackTypes) GetCurrpages() uint32 {
	if x != nil {
		return x.Currpages
	}
	return 0
}

func (x *RackTypes) GetTotals() uint32 {
	if x != nil {
		return x.Totals
	}
	return 0
}

type CellTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellTypes  []*CellType `protobuf:"bytes,1,rep,name=cellTypes,proto3" json:"cellTypes,omitempty"`
	Totalpages uint32      `protobuf:"varint,2,opt,name=totalpages,proto3" json:"totalpages,omitempty"`
	Currpages  uint32      `protobuf:"varint,3,opt,name=currpages,proto3" json:"currpages,omitempty"`
	Totals     uint32      `protobuf:"varint,4,opt,name=totals,proto3" json:"totals,omitempty"`
}

func (x *CellTypes) Reset() {
	*x = CellTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_racktype_racktype_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellTypes) ProtoMessage() {}

func (x *CellTypes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_racktype_racktype_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellTypes.ProtoReflect.Descriptor instead.
func (*CellTypes) Descriptor() ([]byte, []int) {
	return file_proto_racktype_racktype_proto_rawDescGZIP(), []int{14}
}

func (x *CellTypes) GetCellTypes() []*CellType {
	if x != nil {
		return x.CellTypes
	}
	return nil
}

func (x *CellTypes) GetTotalpages() uint32 {
	if x != nil {
		return x.Totalpages
	}
	return 0
}

func (x *CellTypes) GetCurrpages() uint32 {
	if x != nil {
		return x.Currpages
	}
	return 0
}

func (x *CellTypes) GetTotals() uint32 {
	if x != nil {
		return x.Totals
	}
	return 0
}

var File_proto_racktype_racktype_proto protoreflect.FileDescriptor

var file_proto_racktype_racktype_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x61, 0x63, 0x6b, 0x74, 0x79, 0x70, 0x65,
	0x2f, 0x72, 0x61, 0x63, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x15, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61,
	0x63, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad, 0x02, 0x0a, 0x08, 0x52, 0x61, 0x63, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70,
	0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x35, 0x0a, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61,
	0x63, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x43, 0x65, 0x6c, 0x6c, 0x52,
	0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x65, 0x6c, 0x6c,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x50, 0x0a, 0x08, 0x52, 0x61, 0x63, 0x6b, 0x43, 0x65,
	0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x72, 0x6f, 0x77,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xd0, 0x01, 0x0a, 0x08, 0x43, 0x65, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x62, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3d, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e,
	0x72, 0x61, 0x63, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22,
	0xa3, 0x04, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x0e, 0x70, 0x69, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e,
	0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x3e,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63,
	0x6b, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x05,
	0x63, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x62, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xa6, 0x03, 0x0a, 0x0e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x06,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x32, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3e, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07,
	0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x22, 0x17, 0x0a, 0x05, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x0a, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x0d, 0x52, 0x61, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65,
	0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x52, 0x61,
	0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0xaa, 0x01, 0x0a, 0x0d, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x50,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72,
	0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x22, 0x8c, 0x02, 0x0a, 0x0e, 0x52, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x03, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x72, 0x61, 0x63, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x03, 0x61, 0x6e, 0x64, 0x12, 0x35, 0x0a,
	0x02, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x02, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x64, 0x49, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x04, 0x69, 0x64, 0x49, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x61, 0x6d, 0x65,
	0x49, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e,
	0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x8c, 0x02, 0x0a, 0x0e, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x03, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e,
	0x72, 0x61, 0x63, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x03, 0x61, 0x6e, 0x64, 0x12, 0x35, 0x0a, 0x02,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x02, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x64, 0x49, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x04, 0x69, 0x64, 0x49, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x12,
	0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xa0, 0x01, 0x0a, 0x09, 0x52, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3d, 0x0a,
	0x09, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e,
	0x72, 0x61, 0x63, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x75, 0x72, 0x72, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x63, 0x75, 0x72, 0x72, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x09, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x3d, 0x0a, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x65, 0x6c, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x72, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x73, 0x32, 0xdb, 0x06, 0x0a, 0x0f, 0x52, 0x61, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x41, 0x64, 0x64,
	0x52, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x52, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x1f, 0x2e, 0x67, 0x6f, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63,
	0x6b, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52,
	0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x52, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x20,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61,
	0x63, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x4c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72,
	0x61, 0x63, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63,
	0x6b, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f,
	0x0a, 0x0b, 0x41, 0x64, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63,
	0x6b, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x1f,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61,
	0x63, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4f, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x72, 0x61, 0x63, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a,
	0x1f, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72,
	0x61, 0x63, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5b, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x28, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72,
	0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x72, 0x61, 0x63, 0x6b, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x1a, 0x20, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x72, 0x61, 0x63, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x42, 0x26, 0x5a, 0x24, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x61, 0x63,
	0x6b, 0x74, 0x79, 0x70, 0x65, 0x3b, 0x67, 0x6f, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5f, 0x73,
	0x72, 0x76, 0x5f, 0x72, 0x61, 0x63, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_racktype_racktype_proto_rawDescOnce sync.Once
	file_proto_racktype_racktype_proto_rawDescData = file_proto_racktype_racktype_proto_rawDesc
)

func file_proto_racktype_racktype_proto_rawDescGZIP() []byte {
	file_proto_racktype_racktype_proto_rawDescOnce.Do(func() {
		file_proto_racktype_racktype_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_racktype_racktype_proto_rawDescData)
	})
	return file_proto_racktype_racktype_proto_rawDescData
}

var file_proto_racktype_racktype_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_proto_racktype_racktype_proto_goTypes = []interface{}{
	(*RackType)(nil),             // 0: go.micro.srv.racktype.RackType
	(*RackCell)(nil),             // 1: go.micro.srv.racktype.RackCell
	(*CellType)(nil),             // 2: go.micro.srv.racktype.CellType
	(*UpdateRackTypeReq)(nil),    // 3: go.micro.srv.racktype.UpdateRackTypeReq
	(*UpdateRackType)(nil),       // 4: go.micro.srv.racktype.UpdateRackType
	(*UpdateCellTypeReq)(nil),    // 5: go.micro.srv.racktype.UpdateCellTypeReq
	(*UpdateCellType)(nil),       // 6: go.micro.srv.racktype.UpdateCellType
	(*IDReq)(nil),                // 7: go.micro.srv.racktype.IDReq
	(*Response)(nil),             // 8: go.micro.srv.racktype.Response
	(*RackTypeQuery)(nil),        // 9: go.micro.srv.racktype.RackTypeQuery
	(*CellTypeQuery)(nil),        // 10: go.micro.srv.racktype.CellTypeQuery
	(*RackTypeFilter)(nil),       // 11: go.micro.srv.racktype.RackTypeFilter
	(*CellTypeFilter)(nil),       // 12: go.micro.srv.racktype.CellTypeFilter
	(*RackTypes)(nil),            // 13: go.micro.srv.racktype.RackTypes
	(*CellTypes)(nil),            // 14: go.micro.srv.racktype.CellTypes
	(*wrappers.UInt32Value)(nil), // 15: google.protobuf.UInt32Value
	(*wrappers.StringValue)(nil), // 16: google.protobuf.StringValue
	(*wrappers.BoolValue)(nil),   // 17: google.protobuf.BoolValue
}
var file_proto_racktype_racktype_proto_depIdxs = []int32{
	1,  // 0: go.micro.srv.racktype.RackType.cells:type_name -> go.micro.srv.racktype.RackCell
	4,  // 1: go.micro.srv.racktype.UpdateRackTypeReq.update:type_name -> go.micro.srv.racktype.UpdateRackType
	15, // 2: go.micro.srv.racktype.UpdateRackType.id:type_name -> google.protobuf.UInt32Value
	16, // 3: go.micro.srv.racktype.UpdateRackType.name:type_name -> google.protobuf.StringValue
	15, // 4: go.micro.srv.racktype.UpdateRackType.length:type_name -> google.protobuf.UInt32Value
	15, // 5: go.micro.srv.racktype.UpdateRackType.width:type_name -> google.protobuf.UInt32Value
	15, // 6: go.micro.srv.racktype.UpdateRackType.height:type_name -> google.protobuf.UInt32Value
	15, // 7: go.micro.srv.racktype.UpdateRackType.layers:type_name -> google.protobuf.UInt32Value
	15, // 8: go.micro.srv.racktype.UpdateRackType.pickingSurface:type_name -> google.protobuf.UInt32Value
	16, // 9: go.micro.srv.racktype.UpdateRackType.description:type_name -> google.protobuf.StringValue
	1,  // 10: go.micro.srv.racktype.UpdateRackType.cells:type_name -> go.micro.srv.racktype.RackCell
	6,  // 11: go.micro.srv.racktype.UpdateCellTypeReq.update:type_name -> go.micro.srv.racktype.UpdateCellType
	15, // 12: go.micro.srv.racktype.UpdateCellType.id:type_name -> google.protobuf.UInt32Value
	16, // 13: go.micro.srv.racktype.UpdateCellType.name:type_name -> google.protobuf.StringValue
	15, // 14: go.micro.srv.racktype.UpdateCellType.length:type_name -> google.protobuf.UInt32Value
	15, // 15: go.micro.srv.racktype.UpdateCellType.width:type_name -> google.protobuf.UInt32Value
	15, // 16: go.micro.srv.racktype.UpdateCellType.height:type_name -> google.protobuf.UInt32Value
	16, // 17: go.micro.srv.racktype.UpdateCellType.description:type_name -> google.protobuf.StringValue
	17, // 18: go.micro.srv.racktype.UpdateCellType.isValid:type_name -> google.protobuf.BoolValue
	11, // 19: go.micro.srv.racktype.RackTypeQuery.filter:type_name -> go.micro.srv.racktype.RackTypeFilter
	12, // 20: go.micro.srv.racktype.CellTypeQuery.filter:type_name -> go.micro.srv.racktype.CellTypeFilter
	11, // 21: go.micro.srv.racktype.RackTypeFilter.and:type_name -> go.micro.srv.racktype.RackTypeFilter
	11, // 22: go.micro.srv.racktype.RackTypeFilter.or:type_name -> go.micro.srv.racktype.RackTypeFilter
	15, // 23: go.micro.srv.racktype.RackTypeFilter.id:type_name -> google.protobuf.UInt32Value
	16, // 24: go.micro.srv.racktype.RackTypeFilter.name:type_name -> google.protobuf.StringValue
	12, // 25: go.micro.srv.racktype.CellTypeFilter.and:type_name -> go.micro.srv.racktype.CellTypeFilter
	12, // 26: go.micro.srv.racktype.CellTypeFilter.or:type_name -> go.micro.srv.racktype.CellTypeFilter
	15, // 27: go.micro.srv.racktype.CellTypeFilter.id:type_name -> google.protobuf.UInt32Value
	16, // 28: go.micro.srv.racktype.CellTypeFilter.name:type_name -> google.protobuf.StringValue
	0,  // 29: go.micro.srv.racktype.RackTypes.rackTypes:type_name -> go.micro.srv.racktype.RackType
	2,  // 30: go.micro.srv.racktype.CellTypes.cellTypes:type_name -> go.micro.srv.racktype.CellType
	0,  // 31: go.micro.srv.racktype.RackTypeService.AddRackType:input_type -> go.micro.srv.racktype.RackType
	7,  // 32: go.micro.srv.racktype.RackTypeService.DeleteRackType:input_type -> go.micro.srv.racktype.IDReq
	3,  // 33: go.micro.srv.racktype.RackTypeService.UpdateRackType:input_type -> go.micro.srv.racktype.UpdateRackTypeReq
	9,  // 34: go.micro.srv.racktype.RackTypeService.GetRackTypes:input_type -> go.micro.srv.racktype.RackTypeQuery
	7,  // 35: go.micro.srv.racktype.RackTypeService.GetRackType:input_type -> go.micro.srv.racktype.IDReq
	2,  // 36: go.micro.srv.racktype.RackTypeService.AddCellType:input_type -> go.micro.srv.racktype.CellType
	7,  // 37: go.micro.srv.racktype.RackTypeService.DeleteCellType:input_type -> go.micro.srv.racktype.IDReq
	5,  // 38: go.micro.srv.racktype.RackTypeService.UpdateCellType:input_type -> go.micro.srv.racktype.UpdateCellTypeReq
	7,  // 39: go.micro.srv.racktype.RackTypeService.GetCellType:input_type -> go.micro.srv.racktype.IDReq
	10, // 40: go.micro.srv.racktype.RackTypeService.GetCellTypes:input_type -> go.micro.srv.racktype.CellTypeQuery
	8,  // 41: go.micro.srv.racktype.RackTypeService.AddRackType:output_type -> go.micro.srv.racktype.Response
	8,  // 42: go.micro.srv.racktype.RackTypeService.DeleteRackType:output_type -> go.micro.srv.racktype.Response
	8,  // 43: go.micro.srv.racktype.RackTypeService.UpdateRackType:output_type -> go.micro.srv.racktype.Response
	13, // 44: go.micro.srv.racktype.RackTypeService.GetRackTypes:output_type -> go.micro.srv.racktype.RackTypes
	0,  // 45: go.micro.srv.racktype.RackTypeService.GetRackType:output_type -> go.micro.srv.racktype.RackType
	8,  // 46: go.micro.srv.racktype.RackTypeService.AddCellType:output_type -> go.micro.srv.racktype.Response
	8,  // 47: go.micro.srv.racktype.RackTypeService.DeleteCellType:output_type -> go.micro.srv.racktype.Response
	8,  // 48: go.micro.srv.racktype.RackTypeService.UpdateCellType:output_type -> go.micro.srv.racktype.Response
	2,  // 49: go.micro.srv.racktype.RackTypeService.GetCellType:output_type -> go.micro.srv.racktype.CellType
	14, // 50: go.micro.srv.racktype.RackTypeService.GetCellTypes:output_type -> go.micro.srv.racktype.CellTypes
	41, // [41:51] is the sub-list for method output_type
	31, // [31:41] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_proto_racktype_racktype_proto_init() }
func file_proto_racktype_racktype_proto_init() {
	if File_proto_racktype_racktype_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_racktype_racktype_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RackType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racktype_racktype_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RackCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racktype_racktype_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racktype_racktype_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRackTypeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racktype_racktype_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRackType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racktype_racktype_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCellTypeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racktype_racktype_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCellType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racktype_racktype_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racktype_racktype_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racktype_racktype_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RackTypeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racktype_racktype_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellTypeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racktype_racktype_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RackTypeFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racktype_racktype_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellTypeFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racktype_racktype_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RackTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_racktype_racktype_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_racktype_racktype_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_racktype_racktype_proto_goTypes,
		DependencyIndexes: file_proto_racktype_racktype_proto_depIdxs,
		MessageInfos:      file_proto_racktype_racktype_proto_msgTypes,
	}.Build()
	File_proto_racktype_racktype_proto = out.File
	file_proto_racktype_racktype_proto_rawDesc = nil
	file_proto_racktype_racktype_proto_goTypes = nil
	file_proto_racktype_racktype_proto_depIdxs = nil
}
